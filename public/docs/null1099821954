<?xml version="1.0" encoding="UTF-8"?><!-- vim: set ts=2 sw=2 tw=80 ai si: --><?xml-model href="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" schematypens="http://relaxng.org/ns/structure/1.0"?><?xml-model href="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?><book xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="copyright" version="5.0"><?dbhtml filename="copyright.html"?>
  <title>Swarm 2016.2 Guide</title>
  <subtitle>September 2016</subtitle>

  <info>
    <publishername>Perforce</publishername>

    <copyright>
      <year>2013-2016</year>
      <holder>Perforce Software.</holder>
    </copyright>

    <legalnotice>
      <para>
        All rights reserved.
      </para>

      <para>
        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are
        met:
      </para>

      <orderedlist>
        <listitem>
          <para>
            Redistributions of source code must retain the above copyright
            notice, this list of conditions and the following disclaimer.
          </para>
        </listitem>

        <listitem>
          <para>
            Redistributions in binary form must reproduce the above copyright
            notice, this list of conditions and the following disclaimer in the
            documentation and/or other materials provided with the distribution.
          </para>

          <para>
            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
            "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
            LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
            FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL PERFORCE
            SOFTWARE, INC. BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
            LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
            USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
            ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
            OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
            OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
            SUCH DAMAGE.
          </para>
        </listitem>
      </orderedlist>
     
      <para>
        The views and conclusions contained in the software and documentation
        are those of the authors and should not be interpreted as representing
        official policies, either expressed or implied, of Perforce Software.
      </para>

      <para>
        This product is subject to U.S. export control laws and regulations
        including, but not limited to, the U.S. Export Administration
        Regulations, the International Traffic in Arms Regulation requirements,
        and all applicable end-use, end-user and destination restrictions.
      </para>

      <para>
        Licensee shall not permit, directly or indirectly, use of any Perforce
        technology in or by any U.S. embargoed country or otherwise in violation
        of any U.S. export control laws and regulations.
      </para>

      <para>
        This distribution includes the following Perforce software; please
        consult the following for the license terms that apply to these pieces
        of software only:
      </para>

      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">P4PHP</emphasis>, the Perforce extension for
            PHP
            <literallayout>
</literallayout>
            Location <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/p4-bin/bin.<replaceable>platform</replaceable></filename>
            <literallayout>
</literallayout>
            Terms of Use:
            <link xlink:href="https://www.perforce.com/downloads/terms-use"/>
          </para>
        </listitem>
      </itemizedlist>

      <para>
        This distribution also includes the following third party software;
        please consult the accompanying license file for the license terms that
        apply to that software only:
      </para>

      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">Arimo Font</emphasis>
            <literallayout>
</literallayout>
            Location: <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/vendor/arimo</filename>
            <literallayout>
</literallayout>
            License: <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/vendor/arimo/OFL.txt</filename>
          </para>
        </listitem>

        <listitem>
          <para>
            <emphasis role="bold">Bootstrap</emphasis>
            <literallayout>
</literallayout>
            Location: <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/vendor/bootstrap</filename>
            <literallayout>
</literallayout>
            License: <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/vendor/bootstrap/LICENSE</filename>
          </para>
        </listitem>

        <listitem>
          <para>
            <emphasis role="bold">Cousine Font</emphasis>
            <literallayout>
</literallayout>
            Location: <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/vendor/cousine</filename>
            <literallayout>
</literallayout>
            License: <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/vendor/cousine/OFL.txt</filename>
          </para>
        </listitem>

        <listitem>
          <para>
            <emphasis role="bold">Git Logo</emphasis>
            <literallayout>
</literallayout>
            Location: <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/vendor/git</filename>
            <literallayout>
</literallayout>
            License: <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/vendor/git/CC-LICENSE.txt</filename>
          </para>
        </listitem>

        <listitem>
          <para>
            <emphasis role="bold">Google Diff-Match-Patch</emphasis>
            <literallayout>
</literallayout>
            Location: <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/vendor/diff_match_patch</filename>
            <literallayout>
</literallayout>
            License:
            <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/vendor/diff_match_patch/COPYING</filename>
          </para>
        </listitem>

        <listitem>
          <para>
            <emphasis role="bold">Google Code Prettify</emphasis>
            <literallayout>
</literallayout>
            Location: <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/vendor/prettify</filename>
            <literallayout>
</literallayout>
            License: <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/vendor/prettify/COPYING</filename>
          </para>
        </listitem>

        <listitem>
          <para>
            <emphasis role="bold">jQuery</emphasis>
            <literallayout>
</literallayout>
            Location: <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/vendor/jquery</filename>
            <literallayout>
</literallayout>
            License file:
            <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/vendor/jquery/MIT-LICENSE.txt</filename>
          </para>
        </listitem>

        <listitem>
          <para>
            <emphasis role="bold">jQuery Expander</emphasis>
            <literallayout>
</literallayout>
            Location: <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/vendor/jquery.expander</filename>
            <literallayout>
</literallayout>
            License file:
            <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/vendor/jquery.expander/license.txt</filename>
          </para>
        </listitem>

        <listitem>
          <para>
            <emphasis role="bold">jQuery Sortable</emphasis>
            <literallayout>
</literallayout>
            Location: <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/vendor/jquery-sortable</filename>
            <literallayout>
</literallayout>
            License file:
            <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/vendor/jquery-sortable/LICENSE.txt</filename>
          </para>
        </listitem>

        <listitem>
          <para>
            <emphasis role="bold">jQuery Timeago</emphasis>
            <literallayout>
</literallayout>
            Location: <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/vendor/jquery.timeago</filename>
            <literallayout>
</literallayout>
            License file:
            <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/vendor/jquery.timeago/MIT-LICENSE.txt</filename>
          </para>
        </listitem>

        <listitem>
          <para>
            <emphasis role="bold">JsRender</emphasis>
            <literallayout>
</literallayout>
            Location: <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/vendor/jsrender</filename>
            <literallayout>
</literallayout>
            License file:
            <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/vendor/jsrender/MIT-LICENSE.txt</filename>
          </para>
        </listitem>

        <listitem>
          <para>
            <emphasis role="bold">ThreeJS</emphasis>
            <literallayout>
</literallayout>
            Location: <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/vendor/threejs</filename>
            <literallayout>
</literallayout>
            License file:
            <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/vendor/threejs/LICENSE</filename>
          </para>
        </listitem>

        <listitem>
          <para>
            <emphasis role="bold">Zend Framework 2</emphasis>
            <literallayout>
</literallayout>
            Location: <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/library/Zend</filename>
            <literallayout>
</literallayout>
            License file: <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/library/Zend/LICENSE.txt</filename>
          </para>
        </listitem>
      </itemizedlist>
    </legalnotice>
  </info>
    
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><chapter version="5.0" xml:id="welcome" xml:base="welcome.xml"><?dbhtml filename="index.html"?>
  <title>Helix Swarm</title>

  <para condition="videos">
    <markup role="overview">
      <link xlink:href="https://www.perforce.com/resources/tutorials/perforce-swarm">
        <inlinemediaobject>
          <imageobject>
            <imagedata fileref="../assets/html/images/video-swarm_overview.jpg"/>
          </imageobject>

          <textobject>
            <phrase>Video: Watch Swarm Overview</phrase>
          </textobject>
        </inlinemediaobject>
        <phrase role="button glyphicon glyphicon-play-circle"/>
      </link>

      <phrase role="order">0</phrase>
      <phrase role="title">Watch Swarm Overview</phrase>
      <phrase role="description">
        Swarm helps you ship quality software faster.
      </phrase>
    </markup>

    <markup role="create-project">
      <link xlink:href="https://www.perforce.com/resources/tutorials/create-project-swarm">
        <inlinemediaobject>
          <imageobject>
            <imagedata fileref="../assets/html/images/video-create_project.jpg"/>
          </imageobject>

          <textobject>
            <phrase>Video: Create a Project</phrase>
          </textobject>
        </inlinemediaobject>
        <phrase role="button glyphicon glyphicon-play-circle"/>
      </link>

      <phrase role="order">1</phrase>
      <phrase role="title">Create a Project</phrase>
      <phrase role="description">
        Projects unify teams with files, branches &amp; activity.
      </phrase>
    </markup>

    <markup role="create-review">
      <link xlink:href="https://www.perforce.com/resources/tutorials/create-review-swarm">
        <inlinemediaobject>
          <imageobject>
            <imagedata fileref="../assets/html/images/video-create_review.jpg"/>
          </imageobject>

          <textobject>
            <phrase>Video: Create a Review</phrase>
          </textobject>
        </inlinemediaobject>
        <phrase role="button glyphicon glyphicon-play-circle"/>
      </link>

      <phrase role="order">2</phrase>
      <phrase role="title">Create a Review</phrase>
      <phrase role="description">
        Create a review to get feedback on your work.
      </phrase>
    </markup>

    <markup role="collaborate-reviews">
      <link xlink:href="https://www.perforce.com/resources/tutorials/collaborate-review-swarm">
        <inlinemediaobject>
          <imageobject>
            <imagedata fileref="../assets/html/images/video-collaborate_reviews.jpg"/>
          </imageobject>

          <textobject>
            <phrase>Video: Collaborate on Reviews</phrase>
          </textobject>
        </inlinemediaobject>
        <phrase role="button glyphicon glyphicon-play-circle"/>
      </link>
      <phrase role="order">3</phrase>
      <phrase role="title">Collaborate on Reviews</phrase>
      <phrase role="description">
        Spread the knowledge of your code and assets.
      </phrase>
    </markup>
  </para>

  <para>
    Swarm enables collaboration and code review for teams using the Helix
    Versioning Engine, helping ship quality software faster. Review code before
    or after commit, bring continuous integration into the review, and merge
    work that passed the review.
  </para>

  <para>
    This documentation is structured with
    <link linkend="chapter.quickstart">quickstart</link> topics up front, for
    anyone experienced with code review but unfamiliar with Swarm, followed by
    chapters covering Swarm operations including
    <link linkend="chapter.setup">installing and configuring Swarm</link>,
    <link linkend="chapter.basics">basic features</link>,
    <link linkend="chapter.projects">managing projects</link>,
    <link linkend="chapter.code_reviews">code reviews</link>,
    <link linkend="chapter.integrations">integrations</link>,
    <link linkend="chapter.administration">Swarm administration</link>, 
    <link linkend="chapter.extending">guidance on extending Swarm</link>.
  </para>

  <para>
    <literallayout>
    </literallayout>
  </para>

  <para>
    <?download-swarm?>
  </para>

  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="whatsnew" xml:base="whatsnew.xml">
  <title>What's new in 2016.2</title>

  <para>
    This section provides a summary of the notable changes in Swarm for the
    2016.2 release. Full details are available in the distribution's
    <filename>RELNOTES.txt</filename> file.
  </para>

  <section xml:id="major-new-functionality">
    <title>Major new functionality</title>

    <variablelist>
      <varlistentry>
        <term>
          Updated Swarm's RESTful API to version 4
        </term>

        <listitem>
          <para>
            Support for private projects has been added, as well as file-level
            and inline comments.
          </para>

          <para>
            See <xref linkend="api.endpoints.Comments"/> and
            <xref linkend="api.endpoints.Projects"/> for details.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          API support for file-level and line-level comments
        </term>

        <listitem>
          <para>
            Swarm's Comments API now supports making file-level and line-level
            inline comments on changes and reviews.
          </para>

          <para>
            See <xref linkend="api.endpoints.Comments.addComment"/> for details.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          Private projects
        </term>

        <listitem>
          <para>
            Swarm now supports <emphasis>private projects</emphasis>. These are
            projects visible only to users with <emphasis>admin</emphasis> or
            <emphasis>super</emphasis> privileges in the Helix Versioning
            Engine, or users who are owners, moderators, or members of the
            private projects.
          </para>

          <para>
            See <xref linkend="basics.projects.private"/> for details.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section xml:id="minor-new-functionality">
    <title>Minor new functionality</title>

    <variablelist>
      <varlistentry>
        <term>
          Group name validation
        </term>

        <listitem>
          <para>
            Validation for group names is now performed more thoroughly.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          Extended pre-flight checks within index.php
        </term>

        <listitem>
          <para>
            Swarm's <filename>index.php</filename> script has been extended to
            catch more error conditions prior to fielding a request.
            Specifically, when the <filename>config.php</filename> does not
            return an array, and if the <xref linkend="admin.short_links"/>
            feature appears to be mis-configured.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          Short links now support custom port or sub-folder
        </term>

        <listitem>
          <para>
            The <xref linkend="basics.notable.short_links"/> feature (introduced
            in Swarm 2016.1 SP1) now has an <literal>external_url</literal>
            configuration item, allowing short links to work with Swarm
            installations using <xref linkend="setup.post.ssl"/>, a
            <link linkend="setup.post.port">custom port</link>, or a
            <link linkend="setup.post.subfolder">sub-folder</link>.
          </para>

          <para>
            See <xref linkend="admin.short_links"/> for details.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section xml:id="known-limitations">
    <title>Known limitations</title>

    <variablelist>
      <varlistentry>
        <term>
          Access Control
        </term>

        <listitem>
          <para>
            Swarm maintains a variety of information in the Helix Versioning
            Engine's keys facility. By default, users with
            <emphasis>list</emphasis>-level privileges can read these keys,
            which can include comments that contain excerpts of code they may
            not normally have access to.
          </para>

          <para>
            The Helix Versioning Engine, version 2013.1/659207 or higher, has a
            configuration setting to require <emphasis>admin</emphasis>-level
            privileges for access to read and write keys. See
            <xref linkend="setup.perforce.dm_keys"/>.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          Task Stream Reviews
        </term>

        <listitem>
          <para>
            Pre-commit reviews in a task stream are not yet supported.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
</section>
</chapter>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><chapter version="5.0" xml:id="chapter.quickstart" xml:base="quickstart/index.xml">
  <title>Quickstart</title>

  <para>
    Often, the best way to learn how software works is to try it. If the
    interface is sufficiently <emphasis>discoverable</emphasis>, you may
    not need to refer to documentation much, or at all. Sometimes, you
    just need to see the required steps to complete a task; that's what
    this chapter is all about.
  </para>

  <itemizedlist>
    <listitem>
      <para>
        <xref linkend="quickstart.start_code_review"/>
      </para>
    </listitem>

    <listitem>
      <para>
        <xref linkend="quickstart.code_review_contribute"/>
      </para>
    </listitem>

    <listitem>
      <para>
        <xref linkend="quickstart.local_copy"/>
      </para>
    </listitem>

    <listitem>
      <para>
        <xref linkend="quickstart.fix_non_mergeable"/>
      </para>
    </listitem>

    <listitem>
      <para>
        <xref linkend="quickstart.view_git_reviews"/>
      </para>
    </listitem>

    <listitem>
      <para>
        <xref linkend="quickstart.integrate_test_suite"/>
      </para>
    </listitem>

    <listitem>
      <para>
        <xref linkend="quickstart.review_deployment"/>
      </para>
    </listitem>

    <listitem>
      <para>
        <xref linkend="quickstart.manage_branches"/>
      </para>
    </listitem>

    <listitem>
      <para>
        <xref linkend="quickstart.logging_level"/>
      </para>
    </listitem>

    <listitem>
      <para>
        <xref linkend="quickstart.workers"/>
      </para>
    </listitem>
  </itemizedlist>

  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="quickstart.start_code_review" xml:base="quickstart/start_code_review.xml">
  <title>How do I start a code review?</title>

  <para>
    There are several ways:
  </para>

  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><important version="5.0" xml:base="../common/important-start_review_on_edge.xml">
  <para>
    If your Helix Versioning Engine is configured as a commit-edge deployment,
    and your normal connection is to an edge server, Swarm refuses to start
    reviews for shelved changes that have not been promoted to the commit
    server.
  </para>

  <para>
    Within Swarm, this means that the <guilabel>Request Review</guilabel> button
    does not appear for unpromoted shelved changes. Outside of Swarm, attempts
    to start reviews for unpromoted shelved changelists appear to do nothing.
    Ask your Helix Versioning Engine administrator for assistance if you cannot
    start a review.
  </para>

  <para>
    An administrator of the Helix Versioning Engine can automatically promote
    shelved changes to the commit server by setting the configurable
    <literal>dm.shelve.promote</literal> to <literal>1</literal>.
  </para>
</important>

  <orderedlist>
    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/button-request_review.png"/>
          </imageobject>
        </inlinemediaobject>

        When you use Swarm to view a shelved changelist, click the
        <guibutton>Request Review</guibutton> button to request a review of that
        shelved change.
      </para>

      <note>
        <para>
          To view a shelved changelist, use a
          <link linkend="basics.notable.quick_urls">Quick URL</link>. For
          example, if your shelved change is <replaceable>54321</replaceable>,
          visit the URL:
          <literal>https://myswarm.url/<replaceable>54321</replaceable></literal>
        </para>
      </note>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/button-request_review.png"/>
          </imageobject>
        </inlinemediaobject>

        When you use Swarm to view a submitted change, click the
        <guibutton>Request Review</guibutton> button to request a review of that
        change.
      </para>
    </listitem>

    <listitem>
      <para>
        When you are about to shelve or submit files:
      </para>

      <orderedlist numeration="loweralpha">
        <listitem>
          <para>
            Include <literal>#review</literal> within your changelist
            description (separated from other text with whitespace, or on a
            separate line).
          </para>

          <para>
            Once the review begins, Swarm replaces <literal>#review</literal>
            with <literal>#review-12345</literal>, where
            <literal>12345</literal> is the review's identifier.
          </para>

          <note>
            <para>
              The <literal>#review</literal> keyword is customizable.  For
              details, see <xref linkend="admin.review_keyword"/>.
            </para>
          </note>
        </listitem>

        <listitem>
          <para>
            At this time, you can add reviewers to the code review by using an
            <link linkend="basics.notable.mentions">@mention</link> in the changelist
            description for each desired reviewer.
          </para>
          
          <para>
            If your @mention includes an asterisk (<literal>*</literal>) before
            the userid, for example
            <literal>@*<replaceable>userid</replaceable></literal>, that user
            becomes a <emphasis>required</emphasis> reviewer. See
            <xref linkend="code_reviews.responsibility.required"/> for details.
          </para>
        </listitem>

        <listitem>
          <para>
            Complete your shelve or submit operation.
          </para>
        </listitem>
      </orderedlist>

      <warning>
        <para>
          If you shelve a change and subsequently edit the description to
          include <literal>#review</literal>, a review is
          <emphasis role="bold">not started</emphasis>. You must re-shelve the
          files after adding <literal>#review</literal>.
        </para>
      </warning>
    </listitem>

    <listitem>
      <para>
        When you are using <glossterm linkend="GF">Git Fusion</glossterm>, you
        can start a review by pushing your changes to a target branch using the
        following command:

<programlisting>
$ <command>git push origin <replaceable>task1</replaceable>:review/<replaceable>master</replaceable>/new</command>
</programlisting>

        <replaceable>task1</replaceable> is the name of the current Git task
        branch, and <replaceable>master</replaceable> is the target branch that
        the proposed changes are intended for.
      </para>

      <important>
        <para>
          The target branch must be mapped to a named Perforce branch in the Git
          Fusion repo configuration.
        </para>

        <para>
          See
          <link xlink:href="http://www.perforce.com/perforce/doc.current/manuals/git-fusion/chapter_dyn_ngj_3l.html">"Setting
          up Repos"</link> in the
          <link xlink:href="http://www.perforce.com/perforce/doc.current/manuals/git-fusion/">Git
          Fusion Guide</link> for details on
          <link xlink:href="http://www.perforce.com/perforce/doc.current/manuals/git-fusion/chapter_dyn_ngj_3l.html#section_kkz_gqv_rl">converting
          a lightweight branch into a fully populated Perforce branch</link>.
        </para>
      </important>

      <para>
        When the command completes, the output indicates the <emphasis>review
        id</emphasis> that has been created:

<screen>
remote: Perforce: Swarm review assigned: review/master/<replaceable>1234</replaceable>
</screen>

        where <replaceable>1234</replaceable> is the review id that was just
        created.
      </para>

      <tip>
        <para>
          For more information on Git Fusion, see the
          <link xlink:href="http://www.perforce.com/perforce/doc.current/manuals/git-fusion/">Git Fusion Guide</link>
        </para>
      </tip>
    </listitem>
  </orderedlist>

  <section xml:id="once-a-review-has-started">
    <title>Once a review has started</title>

    <para>
      Wait for someone else to review your code, or see:
      <xref linkend="quickstart.code_review_contribute"/>. More
      <link linkend="code_reviews.activities">review activities</link> are
      available.
    </para>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="quickstart.code_review_contribute" xml:base="quickstart/code_review_contribute.xml">
  <title>How do I contribute comments or code changes to a code review?</title>

  <para>
    Contribute to a code review by adding comments to the review, adding
    comments to specific lines within the review's files, or making edits
    to the review's files.
  </para>

  <section xml:id="quickstart.code_review_contribute.review_comment">
    <title>Commenting on a review</title>

    <orderedlist>
      <listitem>
        <para>
          Visit the review's page.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/tabs-review_files_comments_history-comments.png"/>
            </imageobject>

            <textobject>
              <phrase>Comments tab on Reviews page</phrase>
            </textobject>
          </inlinemediaobject>

          Click <guibutton>Comments</guibutton> to view the review's comments
          tab.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="popup">
              <imagedata fileref="../../assets/html/images/review-comment_area.png"/>
            </imageobject>

            <textobject>
              <phrase>Comment area for a review</phrase>
            </textobject>
          </inlinemediaobject>

          Add your comment in the provided text area.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/button-post.png"/>
            </imageobject>

            <textobject>
              <phrase>Post button for Comments</phrase>
            </textobject>
          </inlinemediaobject>

          Click <guibutton>Post</guibutton>.
        </para>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="quickstart.code_review_contribute.file_comment">
    <title>Commenting on a specific line in a file</title>

    <orderedlist>
      <listitem>
        <para>
          Visit the review's page.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/tabs-review_files_comments_history-files.png"/>
            </imageobject>

            <textobject>
              <phrase>Files tab on Reviews page</phrase>
            </textobject>
          </inlinemediaobject>

          Click <guibutton>Files</guibutton> to view the review's file tab.
        </para>
      </listitem>

      <listitem>
        <para>
          Click a line you would like to comment on. The comment text area
          appears.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="popup">
              <imagedata fileref="../../assets/html/images/diff-comment_area.png"/>
            </imageobject>

            <textobject>
              <phrase>Comment area in a diff</phrase>
            </textobject>
          </inlinemediaobject>

          Add your comment in the provided text area.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/button-post.png"/>
            </imageobject>

            <textobject>
              <phrase>Post button for Comments</phrase>
            </textobject>
          </inlinemediaobject>

          Click <guibutton>Post</guibutton>.
        </para>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="quickstart.code_review_contribute.edit_files_p4">
    <title>Editing files in a review</title>

    <orderedlist>
      <listitem>
        <para>
          <link linkend="quickstart.local_copy">Get a local copy</link> of the review's
          files.
        </para>

        <note>
          <para>
            If you are using <glossterm linkend="GF">Git Fusion</glossterm>,
            follow the steps in the
            <link linkend="quickstart.code_review_contribute.edit_files_git">next
            section</link>
          </para>
        </note>
      </listitem>

      <listitem>
        <para>
          Edit the files as required.
        </para>
      </listitem>

      <listitem>
        <para>
          Prepare a changelist with the edited files and include
          <literal>#review-1234</literal> within the changelist's description
          (separated from other text with whitespace, or on a separate line),
          where <literal>1234</literal> is the review's identifier.
        </para>

        <warning>
          <para>
            If you use an invalid review identifier, it will appear that nothing
            happens. Swarm is currently unable to notify you of this situation.
          </para>
        </warning>
      </listitem>

      <listitem>
        <para>
          Depending on the <link linkend="code_reviews.model">model of code
          review</link> you are using, you would:
        </para>

        <orderedlist numeration="loweralpha">
          <listitem>
            <para>
              Shelve the files (for pre-commit).
            </para>
          </listitem>

          <listitem>
            <para>
              Submit the files (for post-commit).
            </para>
          </listitem>
        </orderedlist>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="quickstart.code_review_contribute.edit_files_git">
    <title>Edit files in a review with Git Fusion</title>

    <important>
      <para>
        You can only update Git Fusion-initiated reviews using Git Fusion.
      </para>
    </important>

    <para>
      In the following example, the current local task branch is
      <replaceable>task1</replaceable>, the target branch is
      <replaceable>master</replaceable>, the review id is
      <replaceable>1234</replaceable>, the Git Fusion hostname is
      <replaceable>gfserver</replaceable>, and the remote repo name is
      <replaceable>p4gf_repo</replaceable>.
    </para>

    <procedure>
      <step>
        <para>
          Fetch the review's head version:
        </para>

<programlisting>
$ <command>git fetch --prune origin</command>
From <replaceable>gfserver</replaceable>:<replaceable>p4gf_repo</replaceable>
 * [new_branch]      review/<replaceable>master</replaceable>/<replaceable>1234</replaceable> -&gt; origin/review/<replaceable>master</replaceable>/<replaceable>1234</replaceable>
 x [deleted]         (none)     -&gt; origin/review/<replaceable>master</replaceable>/new
</programlisting>

        <para>
          The <parameter>--prune</parameter> option lets the local Git repo
          delete the unwanted
          <literal>review/<replaceable>master</replaceable>/new</literal>
          reference created by the initial <command>git push origin
          <replaceable>task1</replaceable>:review/<replaceable>master</replaceable>/new</command>
          command.
        </para>
      </step>

      <step>
        <para>
          Check out the review's head version:
        </para>

<programlisting>
$ <command>git checkout review/<replaceable>master</replaceable>/<replaceable>1234</replaceable></command>
</programlisting>
      </step>

      <step>
        <para>
          Edit the files as required.
        </para>
      </step>

      <step>
        <para>
          Add the edited files to the index of files, in preparation for the
          next commit.
        </para>

        <para>
          There are several ways to do this. For example, to add all
          modified files to the index, run:
        </para>

<programlisting>
$ <command>git add -A</command>
</programlisting>
      </step>

      <step>
        <para>
          Commit the files in Git:
        </para>

<programlisting>
$ <command>git commit -m "made some changes"</command>
</programlisting>
      </step>

      <step>
        <para>
          Push the Git changes to the review:
        </para>

<programlisting>
$ <command>git push origin review/<replaceable>master</replaceable>/<replaceable>1234</replaceable></command>
</programlisting>

        <note>
          <para>
            If you get review feedback that is better expressed as a Git rebase
            and cleaned up history, you can make your changes and push them as a
            new review.
          </para>

          <para>
            You <emphasis role="bold">cannot</emphasis> clean up history and
            then push your changes to the <emphasis>same</emphasis> review.
          </para>
        </note>
      </step>
    </procedure>

    <tip>
      <para>
        For more information on Git Fusion, see the
        <link xlink:href="http://www.perforce.com/perforce/doc.current/manuals/git-fusion/">Git Fusion Guide</link>
      </para>
    </tip>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="quickstart.local_copy" xml:base="quickstart/local_copy.xml">
  <title>How do I get a local copy of the review's code for evaluation?</title>

  <para>
    Swarm manages one or more changelists containing shelved copies of all of
    the files belonging to a specific review. You can unshelve the files to
    receive a copy of the review's code.
  </para>

  <section xml:id="quickstart.local_copy.determine_review_id">
    <title>Determine the changelist containing the review's files</title>

    <orderedlist>
      <listitem>
        <para>
          Visit the review's page.
        </para>
      </listitem>

      <listitem>
        <para>
          The current review version's changelist appears in the file
          list heading:
        </para>

        <para>
          <inlinemediaobject>
            <imageobject>
              <imagedata fileref="../../assets/html/images/thumb-pre_commit_change_number.png"/>
            </imageobject>

            <textobject>
              <phrase>A pre-commit review's changelist in the file list heading</phrase>
            </textobject>
          </inlinemediaobject>
        </para>

        <para>
          In this example, the changelist is <literal>697707</literal>. You use
          the identified changelist in place of <emphasis>shelved
          changelist</emphasis> below.
        </para>
      </listitem>
    </orderedlist>

    <note>
      <para>
        Swarm can version file updates in reviews. For more information,
        see <xref linkend="code_reviews.display"/>.
      </para>
    </note>
  </section>

  <section xml:id="quickstart.local_copy.using_p4">
    <title>Using P4</title>

    <para>
      For a <emphasis role="bold">shelved changelist</emphasis>, use
      a command-line shell and type:
    </para>

<programlisting>
$ <command>p4 unshelve -c <replaceable>shelved changelist</replaceable></command>
</programlisting>

    <para>
      For a <emphasis role="bold">committed changelist</emphasis>,
      use a command-line shell and type:
    </para>

<programlisting>
$ <command>p4 sync @<replaceable>committed changelist</replaceable></command>
</programlisting>

    <note>
      <para>
        Your client's view mappings need to include the changelist's path.
      </para>
    </note>
  </section>

  <section xml:id="quickstart.local_copy.using_p4v">
    <title>Using P4V</title>

    <para>
      For a <emphasis role="bold">shelved changelist</emphasis>:
    </para>

    <orderedlist>
      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="popup">
              <imagedata fileref="../../assets/html/images/p4v-search-goto.png"/>
            </imageobject>

            <textobject>
              <phrase>P4V "go to" menu option</phrase>
            </textobject>
          </inlinemediaobject>

          Select <guimenuitem>Search &gt; Go To...</guimenuitem>.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="popup">
              <imagedata fileref="../../assets/html/images/p4v-goto-pending_change.png"/>
            </imageobject>

            <textobject>
              <phrase>P4V "go to" dialog with "Pending Changelist" selected</phrase>
            </textobject>
          </inlinemediaobject>

          Change the select box to
          <guimenuitem>Pending Changelist</guimenuitem>.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="popup">
              <imagedata fileref="../../assets/html/images/p4v-goto-shelved_changelist.png"/>
            </imageobject>

            <textobject>
              <phrase>P4V "go to" dialog with changelist entered</phrase>
            </textobject>
          </inlinemediaobject>

          Type in the <emphasis>shelved changelist</emphasis> number and
          click <guibutton>OK</guibutton>.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="popup">
              <imagedata fileref="../../assets/html/images/p4v-dialog-pending_change-select.png"/>
            </imageobject>

            <textobject>
              <phrase>P4V "Pending Changelist" dialog with shelved files selected</phrase>
            </textobject>
          </inlinemediaobject>

          Select the files in the <emphasis role="bold">Shelved
          Files</emphasis> area.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="popup">
              <imagedata fileref="../../assets/html/images/p4v-dialog-pending_change-unshelve.png"/>
            </imageobject>

            <textobject>
              <phrase>P4V "Pending Changelist" dialog with content menu selecting "Unshelve..."</phrase>
            </textobject>
          </inlinemediaobject>

          Context-click, and select <guimenuitem>Unshelve...</guimenuitem>.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="popup">
              <imagedata fileref="../../assets/html/images/p4v-dialog-unshelve.png"/>
            </imageobject>

            <textobject>
              <phrase>P4V "Unshelve" dialog</phrase>
            </textobject>
          </inlinemediaobject>

          Click <guibutton>Unshelve</guibutton>.
        </para>
      </listitem>
    </orderedlist>

    <para condition="clear">
      For a <emphasis role="bold">committed changelist</emphasis>:
    </para>

    <orderedlist>
      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="popup">
              <imagedata fileref="../../assets/html/images/p4v-search-goto.png"/>
            </imageobject>

            <textobject>
              <phrase>P4V "go to" menu option</phrase>
            </textobject>
          </inlinemediaobject>

          Select <guimenuitem>Search &gt; Go To...</guimenuitem>.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="popup">
              <imagedata fileref="../../assets/html/images/p4v-goto-submitted_change.png"/>
            </imageobject>

            <textobject>
              <phrase>P4V "go to" dialog with "Submitted Changelist" selected</phrase>
            </textobject>
          </inlinemediaobject>

          Change the select box to <guimenuitem>Submitted
          Changelist</guimenuitem>.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="popup">
              <imagedata fileref="../../assets/html/images/p4v-goto-submitted_changelist.png"/>
            </imageobject>

            <textobject>
              <phrase>P4V "go to" dialog with changelist entered</phrase>
            </textobject>
          </inlinemediaobject>

          Type in the <emphasis>submitted changelist</emphasis> number and
          click <guibutton>OK</guibutton>.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="popup">
              <imagedata fileref="../../assets/html/images/p4v-dialog-submitted_change-select.png"/>
            </imageobject>

            <textobject>
              <phrase>P4V "Submitted Changelist" dialog with files selected</phrase>
            </textobject>
          </inlinemediaobject>

          Select the files in the <emphasis role="bold">Files</emphasis>
          area.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="popup">
              <imagedata fileref="../../assets/html/images/p4v-dialog-submitted_change-get_revision.png"/>
            </imageobject>

            <textobject>
              <phrase>P4V "Submitted Changelist" dialog with content menu selecting "Get this Revision"</phrase>
            </textobject>
          </inlinemediaobject>

          Context-click, and select <guimenuitem>Get this
          Revision</guimenuitem>.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/p4v-dialog-close.png"/>
            </imageobject>

            <textobject>
              <phrase>P4V dialog close button</phrase>
            </textobject>
          </inlinemediaobject>

          Click <guibutton>Close</guibutton>.
        </para>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="quickstart.local_copy.using_git_fusion">
    <title>Using Git Fusion</title>

    <para>
      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/thumb-gf_review.png"/>
        </imageobject>

        <textobject>
          <phrase>A Review heading with Git logo</phrase>
        </textobject>
      </inlinemediaobject>

      Git Fusion-initiated reviews include the Git logo beside the main review
      identifier. This indicator is important because Perforce users cannot
      update Git Fusion-initiated reviews.
    </para>

    <para>
      In the following example, the current local task branch is
      <replaceable>task1</replaceable>, the target branch is
      <replaceable>master</replaceable>, the review id is
      <replaceable>773273</replaceable>, the Git Fusion hostname is
      <replaceable>gfserver</replaceable>, and the remote repo name is
      <replaceable>p4gf_repo</replaceable>.
    </para>

    <procedure>
      <step>
        <para>
          Fetch the review's head version:
        </para>

<programlisting>
$ <command>git fetch --prune origin</command>
From <replaceable>gfserver</replaceable>:<replaceable>p4gf_repo</replaceable>
 * [new_branch]      review/<replaceable>master</replaceable>/<replaceable>773273</replaceable> -&gt; origin/review/<replaceable>master</replaceable>/<replaceable>773273</replaceable>
 x [deleted]         (none)     -&gt; origin/review/<replaceable>dev</replaceable>/new
</programlisting>

        <para>
          The <parameter>--prune</parameter> option lets the local Git repo
          delete the unwanted
          <literal>review/<replaceable>master</replaceable>/new</literal>
          reference created by the initial <command>git push origin
          <replaceable>task1</replaceable>:review/<replaceable>master</replaceable>/new</command>
          command.
        </para>
      </step>

      <step>
        <para>
          Check out the review's head version:
        </para>

<programlisting>
$ <command>git checkout review/<replaceable>master</replaceable>/<replaceable>773273</replaceable></command>
</programlisting>
      </step>
    </procedure>

    <important>
      <para>
        You can only update Git Fusion-initiated reviews using Git Fusion.
      </para>
    </important>

    <tip>
      <para>
        For more information on Git Fusion, see the
        <link xlink:href="http://www.perforce.com/perforce/doc.current/manuals/git-fusion/">Git Fusion Guide</link>
      </para>
    </tip>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="quickstart.fix_non_mergeable" xml:base="quickstart/fix_non_mergeable.xml">
  <title>How can I fix 'not mergeable' errors in a review?</title>

  <para>
    The problem can occur when you attempt to
    <guimenuitem>Commit</guimenuitem> or <guimenuitem>Approve and
    Commit</guimenuitem> via the Swarm UI and the shelved files are out of
    date.
  </para>

  <para>
    Helix Swarm cannot currently help with resolving conflicts; you need to use
    a Helix client such as <command>p4</command> or
    <application>P4V</application> to resolve conflicts.
  </para>

  <section xml:id="quickstart.fix_non_mergeable.via_p4">
    <title>Resolve via P4</title>

    <orderedlist>
      <listitem>
        <para>
          Acquire a <link linkend="quickstart.local_copy">local copy</link> of the files.
        </para>
      </listitem>

      <listitem>
        <para>
          Sync the files to the head version:
        </para>

<programlisting>
$ <command>p4 sync</command>
</programlisting>
      </listitem>

      <listitem>
        <para>
          Begin resolving files with:
        </para>

<programlisting>
$ <command>p4 resolve</command>
</programlisting>

        <para>
          Choose an appropriate option to resolve each file. For
          example:
        </para>

<programlisting>
$ <command>p4 resolve</command>
/home/bruno/bruno_ws/dev/main/jam/command.c - merging //depot/dev/main/jam/command.c#9
Diff chunks: 4 yours + 2 theirs + 1 both + 1 conflicting
Accept(a) Edit(e) Diff(d) Merge (m) Skip(s) Help(?) e:
</programlisting>
      </listitem>

      <listitem>
        <para>
          Re-shelve the resolved files with:
        </para>

<programlisting>
$ <command>p4 shelve</command>
</programlisting>

        <note>
          <para>
            Ensure that the changelist description contains
            <literal>#review-12345</literal> (separated from other text by
            whitespace, or on a separate line), where <literal>12345</literal>
            is the identifier of the review you are updating.
          </para>
        </note>

        <warning>
          <para>
            If you use an invalid review identifier, it will appear that nothing
            happens. Swarm is currently unable to notify you of this situation.
          </para>
        </warning>
      </listitem>
    </orderedlist>

    <tip>
      <para>
        For more information, see:
        <link xlink:href="http://www.perforce.com/perforce/doc.current/manuals/p4guide/05_resolve.html">P4
        User's Guide: Resolve</link>
      </para>
    </tip>
  </section>

  <section xml:id="quickstart.fix_non_mergeable.via_p4v">
    <title>Resolve via P4V</title>

    <orderedlist>
      <listitem>
        <para>
          Acquire a <link linkend="quickstart.local_copy">local copy</link> of the files.
        </para>
      </listitem>

      <listitem>
        <para>
          Context-click your workspace folder in P4V's Workspace tab.
          Select <guimenuitem>Resolve Files...</guimenuitem>.
          The <emphasis role="bold">Resolve</emphasis> dialog appears.
        </para>
      </listitem>

      <listitem>
        <para>
          Choose the appropriate options to resolve each file.
        </para>
      </listitem>

      <listitem>
        <para>
          Context-click your workspace folder in P4V's Workspace tab.  Select
          <guimenuitem>Shelve Files...</guimenuitem>. The
          <emphasis role="bold">Shelve</emphasis> dialog appears.
        </para>

        <note>
          <para>
            Ensure that the changelist description contains
            <literal>#review-12345</literal> (separated from other text with
            whitespace, or on a separate line), where <literal>12345</literal>
            is the identifier of the review you are updating.
          </para>
        </note>

        <warning>
          <para>
            If you use an invalid review identifier, it will appear that nothing
            happens. Swarm is currently unable to notify you of this situation.
          </para>
        </warning>
      </listitem>

      <listitem>
        <para>
          Click <guibutton>Shelve</guibutton>.
        </para>
      </listitem>
    </orderedlist>

    <tip>
      <para>
        For more information, see:
        <link xlink:href="http://www.perforce.com/perforce/doc.current/manuals/p4v/Resolving_files.html">P4V
        Online Help: Resolving Files</link>
      </para>
    </tip>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="quickstart.view_git_reviews" xml:base="quickstart/view_git_reviews.xml">
  <title>How do I see a list of Git-created reviews?</title>

  <para>
    You can view all reviews that were initiated in Git. First, you need to
    fetch any review branches that may exist:
  </para>

<programlisting>
$ <command>git fetch --prune origin</command>
</programlisting>

  <para>
    Then you can list all branches, which includes any <emphasis>review</emphasis>
    branches, for the current Git Fusion repo:
  </para>

<programlisting>
$ <command>git branch -a</command>
  task1
* master
  remotes/origin/task1
  remotes/origin/master
  remotes/origin/review/task1/1234
  remotes/origin/review/task1/1244
  remotes/origin/review/task1/1347
  remotes/origin/review/master/1235
  remotes/origin/review/master/1236
  remotes/origin/review/master/1358
</programlisting>

  <note>
    <para>
      Git users cannot see Swarm reviews initiated in Perforce.
    </para>
  </note>

  <tip>
    <para>
      For more information on Git Fusion, see the
      <link xlink:href="http://www.perforce.com/perforce/doc.current/manuals/git-fusion/">Git Fusion Guide</link>
    </para>
  </tip>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="quickstart.integrate_test_suite" xml:base="quickstart/integrate_test_suite.xml">
  <title>
    How can I integrate my test suite to inform review acceptance or
    rejection?
  </title>

  <para>
    Integrating Helix Swarm with a test suite involves enabling
    <emphasis role="bold">Automated Tests</emphasis> in your project's
    configuration and providing a <emphasis>trigger URL</emphasis>. When
    the <emphasis>trigger URL</emphasis> is requested, Swarm expects your
    test suite to be executed. When the tests complete, Swarm expects
    either a <emphasis>pass callback URL</emphasis> or <emphasis>fail
    callback URL</emphasis> to be requested by your test suite.
  </para>

  <orderedlist>
    <listitem>
      <para>
        Visit your project page.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/button-edit.png"/>
          </imageobject>

          <textobject>
            <phrase>Project Edit button</phrase>
          </textobject>
        </inlinemediaobject>

        Click <guibutton>Edit</guibutton>. The
        <link linkend="projects.edit">Edit Project</link> page is displayed.
      </para>
    </listitem>

    <listitem>
      <para>
        Ensure that paths in each named branch configured for the project do
        not overlap with paths in other named branches.
      </para>
    </listitem>

    <listitem>
      <para>
        Click the <guibutton>Enable</guibutton> checkbox next to Automated Tests
        to display the Automated Tests configuration fields:
      </para>

      <para>
        <inlinemediaobject>
          <imageobject>
            <imagedata fileref="../../assets/html/images/fields-automated_tests.png"/>
          </imageobject>

          <textobject>
            <phrase>The Automated Tests configuration fields</phrase>
          </textobject>
        </inlinemediaobject>
      </para>
    </listitem>

    <listitem>
      <para>
        Provide a URL that triggers your test suite execution.
      </para>

      <para>
        Special arguments are available to inform your test suite of
        various details from Swarm:
      </para>

      <variablelist>
        <varlistentry>
          <term>
            {change}
          </term>

          <listitem>
            <para>
              The change number.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            {status}
          </term>

          <listitem>
            <para>
              Status of the shelved change, <emphasis>shelved</emphasis>
              or <emphasis>committed</emphasis>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            {review}
          </term>

          <listitem>
            <para>
              The review's identifier.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            {project}
          </term>

          <listitem>
            <para>
              The project's identifier.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            {projectName}
          </term>

          <listitem>
            <para>
              The project's name.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            {branch}
          </term>

          <listitem>
            <para>
              The branch identifier(s) impacted by the review, comma-separated.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            {branchName}
          </term>

          <listitem>
            <para>
              The branch name(s) impacted by the review, comma-separated.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            {pass}
          </term>

          <listitem>
            <para>
              Tests pass callback URL.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            {fail}
          </term>

          <listitem>
            <para>
              Tests fail callback URL.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <note>
        <para>
          The <literal>{pass}</literal> and <literal>{fail}</literal> are
          composed automatically by Swarm, and include Swarm's own per-review
          authentication tokens.
        </para>
      </note>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/select-post_format.png"/>
          </imageobject>

          <textobject>
            <phrase>Project Edit button</phrase>
          </textobject>
        </inlinemediaobject>

        Optionally, specify any parameters that your automated tests require
        that must be sent via HTTP <literal>POST</literal> in the <guilabel>POST
        Parameters</guilabel> field. The <literal>POST</literal> parameters can
        include the special arguments listed above.
      </para>
      
      <para>
        You can also choose the format of the <literal>POST</literal>
        parameters, either <literal>GET</literal> or <literal>JSON</literal>.
        When <literal>GET</literal> is selected, the <literal>POST</literal>
        parameters are parsed into <literal>name=value</literal> pairs. When
        <literal>JSON</literal> is selected, any specified parameters are passed
        raw in the <literal>POST</literal> body.
      </para>
    </listitem>
  </orderedlist>

  <section xml:id="quickstart.integrate_test_suite.configure_jenkins">
    <title>Configuring Jenkins for Swarm integration</title>

    <important>
      <para>
        Your Jenkins host needs to be able to communicate with the Swarm host,
        and vice versa. Ensure that the appropriate DNS/host configuration is in
        place, and that each server can reach the other via HTTP/HTTPS.
      </para>
    </important>

    <orderedlist>
      <listitem>
        <para>
          Install the <literal>p4-plugin</literal> in Jenkins.
        </para>

<programlisting>
<link xlink:href="https://wiki.jenkins-ci.org/display/JENKINS/P4+Plugin">https://wiki.jenkins-ci.org/display/JENKINS/P4+Plugin</link>
</programlisting>
      </listitem>

      <listitem>
        <para>
          Configure a Jenkins project:
        </para>

        <orderedlist numeration="loweralpha">
          <listitem>
            <para>
              Specify the job name so that it matches the project identifier
              used in the trigger URL, as defined
              <link linkend="quickstart.integrate_test_suite.url">below</link>.
            </para>

            <para>
              For example, the computed value of
              <literal>{projectName}_{branchName}</literal>.
            </para>

            <para>
              Or, edit the trigger URL to use the Jenkins job name you specify.
            </para>
          </listitem>

          <listitem>
            <para>
              Make the build parameterized to accept these parameters (note that
              these are named to match up with the script that is called):
            </para>
            <variablelist>
              <varlistentry>
                <term>
                  <literal>status</literal>
                </term>

                <listitem>
                  <para>
                    whether the changelist to be tested is shelved or submitted
                  </para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>
                  <literal>change</literal>
                </term>

                <listitem>
                  <para>
                    changelist # to run tests against
                  </para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>
                  <literal>review</literal>
                </term>

                <listitem>
                  <para>
                    the review's identifier
                  </para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>
                  <literal>pass</literal>
                </term>

                <listitem>
                  <para>
                    the URL to <command>wget</command> if the build succeeds
                  </para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>
                  <literal>fail</literal>
                </term>

                <listitem>
                  <para>
                    the URL to <command>wget</command> if the build fails
                  </para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>

          <listitem>
            <para>
              Select <literal>Perforce Software</literal> for the
              <guilabel>Source Code Management</guilabel> section.
            </para>

            <important>
              <para>
                You may see <literal>Perforce</literal> in the <guilabel>Source
                Code Management</guilabel> section. This represents an earlier
                community-provided Perforce plugin that does not include support
                for Swarm.
              </para>
            </important>
          </listitem>

          <listitem>
            <para>
              Setup credentials and workspace behavior as needed.
            </para>

            <para>
              See the
              <link xlink:href="https://github.com/jenkinsci/p4-plugin#credentials">Credentials</link>
              and
              <link xlink:href="https://github.com/jenkinsci/p4-plugin#workspaces">Workspaces</link>
              sections of
              <link xlink:href="https://github.com/jenkinsci/p4-plugin">the
              p4-plugin documentation</link> for details.
            </para>

            <important>
              <para>
                The client workspace configured in Jenkins must have a view that
                includes the paths defined for that branch in Swarm.
              </para>
            </important>
          </listitem>
        </orderedlist>
      </listitem>

      <listitem xml:id="quickstart.integrate_test_suite.url">
        <para>
          Configure your Swarm project to run automated tests with a URL
          like this:
        </para>

<programlisting>
http://<replaceable>jenkins_host:8080</replaceable>/job/{projectName}_{branchName}/review/build?status={status}&amp;review={review}&amp;change={change}&amp;pass={pass}&amp;fail={fail}
</programlisting>

      <important>
        <para>
          For Jenkins, the job name needs to match the job identifier in the
          URL. In the example above, this is the computed value of
          <literal>{projectName}_{branchName}</literal>.
        </para>

        <para>
          If you prefer a different naming scheme in Jenkins, replace
          <literal>{projectName}_{branchName}</literal> in the URL above with
          the project name actually defined in Jenkins.
        </para>
      </important>

        <note>
          <para>
            If your build script has access to the results of test execution,
            include a GET or POST parameter called <literal>url</literal> when
            calling the <literal>pass</literal> or
            <literal>fail</literal> URLs. Swarm uses the provided
            <literal>url</literal> to link reviews to the test results.
          </para>
        </note>

        <important>
          <para>
            If security is enabled in Jenkins, the trigger URL needs to include
            credentials. Follow these steps:
          </para>

          <orderedlist>
            <listitem>
              <para>
                Create a Jenkins user that will trigger Swarm builds. For
                example <literal>swarm</literal>.
              </para>
            </listitem>

            <listitem>
              <para>
                Log into Jenkins as the new user.
              </para>
            </listitem>

            <listitem>
              <para>
                Click on the user's username in the Jenkins toolbar.
              </para>
            </listitem>

            <listitem>
              <para>
                Scroll down to <guilabel>API Token</guilabel>.
              </para>
            </listitem>

            <listitem>
              <para>
                Click <guibutton>Show API Token...</guibutton>.
              </para>
            </listitem>

            <listitem>
              <para>
                Incorporate the value of the <guilabel>API Token</guilabel> into
                the Swarm trigger URL.
              </para>
              
              <para>
                For example, if the username is <literal>swarm</literal> and the
                <guilabel>API Token</guilabel> value is
                <literal>832a5db7e5500c1288324c1441460610</literal>, the Swarm
                trigger URL should be:
              </para>

<programlisting>
http://swarm:832a5db7e5500c1288324c1441460610@<replaceable>jenkins_host:8080</replaceable>/job/{projectName}_{branchName}/review/build?cause=Automated%20test%20triggered%20for%20Swarm%20project%20{projectName},%20branch%20{branchName},%20review%20{review}&amp;status={status}&amp;review={review}&amp;change={change}&amp;pass={pass}&amp;fail={fail}
</programlisting>
            </listitem>
          </orderedlist>
        </important>
      </listitem>
    </orderedlist>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="quickstart.review_deployment" xml:base="quickstart/review_deployment.xml">
  <title>How can I automatically deploy code within a review?</title>

  <para>
    Deploying code in a code review automatically involves enabling
    <emphasis role="bold">Automated Deployment</emphasis> in your project's
    configuration and providing a <emphasis>trigger URL</emphasis>. When
    the <emphasis>trigger URL</emphasis> is requested, Swarm expects a
    deployment program to be executed.
  </para>

  <para>
    When the deployment processing ends, Swarm expects either a
    <emphasis>success callback URL</emphasis> or <emphasis>failure callback
    URL</emphasis> to be requested by your deployment program. These
    callback URLs should include a <literal>url</literal> parameter (either
    via GET or POST); when a valid-looking URL is included, clicking the
    deployment status indicator directs the user to the specified URL. This
    is intended to facilitate easy viewing of the successfully deployed
    review, or a report indicating why the deployment failed. The
    <literal>url</literal> parameter is mandatory for successful
    deployments, but is optional for failures.
  </para>

  <orderedlist>
    <listitem>
      <para>
        Visit your project page.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/button-edit.png"/>
          </imageobject>

          <textobject>
            <phrase>Project Edit button</phrase>
          </textobject>
        </inlinemediaobject>

        Click <guibutton>Edit</guibutton>. The
        <link linkend="projects.edit">Edit Project</link> page is displayed.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/checkbox-automated_deployment.png"/>
          </imageobject>

          <textobject>
            <phrase>The Enable Automated Deployment checkbox</phrase>
          </textobject>
        </inlinemediaobject>

        Click the <guibutton>Enable</guibutton> checkbox next to Automated
        Deployment to display the Automated Deployment configuration fields.
      </para>

      <para>
        <inlinemediaobject>
          <imageobject condition="popup">
            <imagedata fileref="../../assets/html/images/fields-automated_deployment.png"/>
          </imageobject>

          <textobject>
            <phrase>The Automated Deployment configuration fields</phrase>
          </textobject>
        </inlinemediaobject>
      </para>
    </listitem>

    <listitem>
      <para>
        Provide a URL that triggers your deployment execution.
      </para>

      <para>
        Special arguments are available to inform your deployment program of
        various details from Swarm:
      </para>

      <variablelist>
        <varlistentry>
          <term>
            <literal>{change}</literal>
          </term>

          <listitem>
            <para>
              The change number.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <literal>{status}</literal>
          </term>

          <listitem>
            <para>
              Status of the shelved change, <emphasis>shelved</emphasis>
              or <emphasis>committed</emphasis>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <literal>{review}</literal>
          </term>

          <listitem>
            <para>
              The review's identifier.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <literal>{project}</literal>
          </term>

          <listitem>
            <para>
              The project's identifier.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <literal>{projectName}</literal>
          </term>

          <listitem>
            <para>
              The project's name.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <literal>{branch}</literal>
          </term>

          <listitem>
            <para>
              The branch identifier(s), comma-separated.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <literal>{branchName}</literal>
          </term>

          <listitem>
            <para>
              The branch name(s), comma-separated.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <literal>{success}</literal>
          </term>

          <listitem>
            <para>
              Deployment successful callback URL.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <literal>{fail}</literal>
          </term>

          <listitem>
            <para>
              Deployment failure callback URL.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </listitem>
  </orderedlist>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="quickstart.manage_branches" xml:base="quickstart/manage_branches.xml">
  <title>How do I manage project branches?</title>

  <para>
    <emphasis role="bold">Initial steps:</emphasis>
  </para>

  <orderedlist>
    <listitem>
      <para>
        Visit your project page.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/button-edit.png"/>
          </imageobject>

          <textobject>
            <phrase>Project Edit button</phrase>
          </textobject>
        </inlinemediaobject>

        Click <guibutton>Edit</guibutton>.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/dropdown-branches.png"/>
          </imageobject>

          <textobject>
            <phrase>Branches drop-down buttons</phrase>
          </textobject>
        </inlinemediaobject>

        Next to the <emphasis role="bold">Branches</emphasis> label,
        a drop-down button for each branch is displayed, plus an
        <guibutton>Add Branch</guibutton> button.
      </para>
    </listitem>
  </orderedlist>

  <section xml:id="quickstart.manage_branches.adding-a-branch">
    <title>Adding a branch</title>

    <orderedlist>
      <listitem>
        <para>
          Follow the <link linkend="quickstart.manage_branches">initial
          steps</link>.
        </para>
      </listitem>

      <listitem>
        <para condition="thumb">
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/link-add_branch.png"/>
            </imageobject>

            <textobject>
              <phrase>The Add Branch link</phrase>
            </textobject>
          </inlinemediaobject>
        </para>

        <para>
          Click the <guibutton>Add Branch</guibutton> link to display the branch
          drop-down dialog:
        </para>

        <para>
          <inlinemediaobject>
            <imageobject>
              <imagedata fileref="../../assets/html/images/dropdown-branch.png"/>
            </imageobject>

            <textobject>
              <phrase>The branch drop-down dialog</phrase>
            </textobject>
          </inlinemediaobject>
        </para>
      </listitem>

      <listitem>
        <para>
          Type in a short <guilabel>Name</guilabel> for your branch.
        </para>
      </listitem>

      <listitem>
        <para>
          Type in one or more branch <emphasis role="bold">Paths</emphasis>, one
          per line.
        </para>

        <note>
          <para>
            Each branch path should be expressed in depot syntax. Wildcards
            should not be used; the only exception is the branch path can end
            with the Perforce wildcard <literal>...</literal>
          </para>

          <para>
            For example: <filename>//depot/main/swarm/...</filename>
          </para>
            
          <para>
            For more information, see
            <link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/cmdref/o.fspecs.html#d0e68386">Command
            Reference: File Specifications</link>.
          </para>
        </note>
      </listitem>

      <listitem>
        <para>
          Optionally check the <guibutton>Only Moderators can approve or reject
          reviews</guibutton> checkbox. When checked, a field is displayed
          allowing you to add a new moderator. The field auto-suggests users
          within the Helix Versioning Engine as you type.
        </para>

        <para>
          <inlinemediaobject>
            <imageobject>
              <imagedata fileref="../../assets/html/images/thumb-add_moderator.png"/>
            </imageobject>

            <textobject>
              <phrase>The Add Moderator field</phrase>
            </textobject>
          </inlinemediaobject>
        </para>

        <note>
          <para>
            You cannot specify a <link linkend="basics.groups">group</link> as
            a moderator.
          </para>
        </note>

        <para>
          Once the branch specification is complete and the project has been
          saved, changing the state of any review associated with
          this moderated branch is restricted as follows:
        </para>

        <!-- vim: set ts=2 sw=2 tw=80 ai si: --><itemizedlist version="5.0" xml:base="../common/list-state_transition_restrictions.xml">
  <listitem>
    <para>
      Only moderators can approve or reject the review. Moderators can also
      transition a review to any other state.
    </para>
  </listitem>

  <listitem>
    <para>
      The review's author, when she is not a moderator, can change the review's
      state to <guilabel>Needs Review</guilabel>, <guilabel>Needs
      Revision</guilabel>, <guilabel>Archived</guilabel>, and can attach
      committed changelists.
    </para>
    
    <para>
      Normally, the review's author cannot change the review's state to
      <guilabel>Approved</guilabel> or <guilabel>Rejected</guilabel> on
      moderated branches. However, authors that are also moderators have
      moderator privileges, and may approve or reject their own review.
    </para>

    <para>
      When <link linkend="admin.reviews.disable_self_approve"><literal>disable_self_approve</literal></link>
      is enabled, authors who are moderators (or even users with
      <emphasis>admin</emphasis> privileges) cannot approve their own reviews.
    </para>
  </listitem>

  <listitem>
    <para>
      Project members can change the review's state to <guilabel>Needs
      Review</guilabel> or <guilabel>Needs Revision</guilabel>, and can attach
      committed changelists. Project members cannot change the review's state to
      <guilabel>Approved</guilabel>, <guilabel>Rejected</guilabel>, or
      <guilabel>Archived</guilabel>.
    </para>
  </listitem>

  <listitem>
    <para>
      Users that are not project members, moderators, or the review's author
      cannot transition the review's state.
    </para>
  </listitem>

  <listitem>
    <para>
      For the review's author and project members, if a review is not in one of
      their permitted states, for example if the review's state is
      <guilabel>Rejected</guilabel>, they cannot transition the review to
      another state.
    </para>

    <para>
      These restrictions have no effect on who can start a review.
    </para>
  </listitem>
</itemizedlist>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/button-done.png"/>
            </imageobject>

            <textobject>
              <phrase>The Done button </phrase>
            </textobject>
          </inlinemediaobject>

          Click the <guibutton>Done</guibutton> button to accept your branch
          specification.
        </para>

        <para>
          Once the branch definition has completed, if any moderators were
          specified, the number of moderators for that branch is displayed in the
          list of branches:
        </para>

        <para>
          <inlinemediaobject>
            <imageobject>
              <imagedata fileref="../../assets/html/images/thumb-branch_moderators.png"/>
            </imageobject>

            <textobject>
              <phrase>Branch moderators count.</phrase>
            </textobject>
          </inlinemediaobject>
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/button-save.png"/>
            </imageobject>

            <textobject>
              <phrase>Project Save button </phrase>
            </textobject>
          </inlinemediaobject>

          Click <guibutton>Save</guibutton> to save the branch changes to your
          project.
        </para>
      </listitem>
    </orderedlist>

    <note>
      <para>
        The project name does not need to be included in the branch name; Swarm
        displays the project name with the branch name when appropriate.
      </para>
    </note>
  </section>

  <section xml:id="quickstart.manage_branches.editing_a_branch">
    <title>Editing a branch</title>

    <orderedlist>
      <listitem>
        <para>
          Follow the <link linkend="quickstart.manage_branches">initial
          steps</link>.
        </para>
      </listitem>

      <listitem>
        <para>
          Click the branch drop-down button you want to edit.
        </para>
      </listitem>

      <listitem>
        <para>
          Revise the <guilabel>Name</guilabel>, <guilabel>Paths</guilabel>, or
          moderators as required.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/button-save.png"/>
            </imageobject>

            <textobject>
              <phrase>Project Save button </phrase>
            </textobject>
          </inlinemediaobject>

          Click <guibutton>Save</guibutton>.
        </para>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="quickstart.manage_branches.removing_a_branch">
    <title>Removing a branch</title>

    <orderedlist>
      <listitem>
        <para>
          Follow the <link linkend="quickstart.manage_branches">initial
          steps</link>.
        </para>
      </listitem>

      <listitem>
        <para>
          Click the branch drop-down button you want to remove.
        </para>
      </listitem>

      <listitem>
        <para condition="thumb">
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/button-remove.png"/>
            </imageobject>

            <textobject>
              <phrase>Branch Remove button </phrase>
            </textobject>
          </inlinemediaobject>

          Click <guibutton>Remove</guibutton>.
        </para>
      </listitem>

      <listitem>
        <para condition="thumb">
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/button-save.png"/>
            </imageobject>

            <textobject>
              <phrase>Project Save button </phrase>
            </textobject>
          </inlinemediaobject>
        </para>

        <para>
          Click <guibutton>Save</guibutton>.
        </para>
      </listitem>
    </orderedlist>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="quickstart.logging_level" xml:base="quickstart/logging_level.xml">
  <title>How do I change the logging level?</title>

  <para>
    Swarm logs various activities to the data/log file. Change the logging level
    to increase or decrease the volume of log data by editing a configuration
    file.
  </para>

  <para>
    An example configuration, in the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file:
  </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'log' =&gt; array(
        'priority'  =&gt; 3, // 7 for max, defaults to 3
    ),
</programlisting>

  <para>
    The maximum value for the log priority is 7; higher values do not result in
    increased logging. The minimum value is 0, which means no logging; lower
    values do not result in further logging reductions. For more information,
    see: <xref linkend="admin.logging"/>.
  </para>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="quickstart.workers" xml:base="quickstart/workers.xml">
  <title>How do I check on the queue workers?</title>

  <para>
    Helix Swarm uses a custom queue system to process events, provide
    notifications, and more. The queue system is required to handle the
    potentially large volume of events from a busy Helix Versioning Engine.
  </para>

  <para>
    Check the status of the queue by making an HTTP request to
    <filename>/queue/status</filename>. The response is formatted in JSON, and
    looks like this:
  </para>

<programlisting language="json">
{"tasks":0,"futureTasks":1,"workers":3,"maxWorkers":3,"workerLifetime":"595s"}
</programlisting>

  <para>
    This response indicates that the queue has no current tasks, there is 1 task
    scheduled for processing later, there are 3 queue workers available, at most
    3 workers are created, and queue workers run for at most 10 minutes before
    self-terminating.
  </para>

  <para>
    A queue manager ensures that sufficient queue workers are available to
    process items. If the queue manager has stopped for some reason, start a new
    one by making an HTTP request to <filename>/queue/worker</filename>. No
    response is provided for this request.
  </para>

  <note>
    <para>
      A cron job should be setup to ensure that workers are running to process
      events. See <xref linkend="setup.worker"/>.
    </para>
  </note>
</section>
</chapter>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><chapter version="5.0" xml:id="chapter.setup" xml:base="setup/index.xml">
  <title>Setting up</title>

  <para>
    This chapter covers the initial installation and configuration of
    Swarm. Also covered is upgrading Swarm if you have previously installed
    Swarm.
  </para>

  <para>
    First, review the <xref linkend="setup.dependencies"/> section. Note that
    Swarm's dependencies can mostly easily be installed using
    <xref linkend="setup.packages"/>.
  </para>

  <para>
    You have three choices for installing Swarm. Choose <emphasis role="bold">one</emphasis> approach:
  </para>

  <orderedlist>
    <listitem>
      <para>
        Use the Swarm packages (RPM or Debian):
      </para>

      <itemizedlist>
        <listitem>
          <para>
            Follow the steps provided in <xref linkend="setup.packages"/>.
          </para>
        </listitem>

        <listitem>
          <para>
            Once Swarm is installed, it needs some initial configuration (common
            to any installation approach). Skip to the
            <xref linkend="setup.perforce"/> section.
          </para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>
        Use the Swarm OVA (Open Virtualization Appliance):
      </para>

      <itemizedlist>
        <listitem>
          <para>
            Follow the steps provided in <xref linkend="setup.ova"/>.
          </para>
        </listitem>

        <listitem>
          <para>
            Once Swarm is installed, it needs some initial configuration (common
            to any installation approach). Skip to the
            <xref linkend="setup.perforce"/> section.
          </para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>
        Use the Swarm source distribution archive:
      </para>

      <itemizedlist>
        <listitem>
          <para>
            Follow all of the steps provided in the
            <xref linkend="setup.installation"/> and subsequent sections.
          </para>
        </listitem>
      </itemizedlist>
    </listitem>
  </orderedlist>

  <para>
    After completing the installation and initial configuration steps, you may
    want to review the <xref linkend="setup.post"/> that may be useful for
    your deployment of Swarm.
  </para>

  <para>
    If you have not already done so, download Swarm: <?download-swarm?>
  </para>

  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="setup.dependencies" xml:base="setup/dependencies.xml">
  <title>Runtime dependencies</title>

  <para>
    In order to successfully install, configure, and deploy Swarm, the following
    dependencies are required:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        a <link linkend="setup.dependencies.os">supported operating system
        platform</link>
      </para>
    </listitem>

    <listitem>
      <para>
        an <xref linkend="setup.dependencies.apache"/> with
        <literal>mod_rewrite</literal> and <literal>mod_php5</literal>
      </para>
    </listitem>

    <listitem>
      <para>
        A supported version of <xref linkend="setup.dependencies.php"/> with
        the following extensions:
      </para>

      <itemizedlist>
        <listitem>
          <para>
            iconv
          </para>
        </listitem>

        <listitem>
          <para>
            JSON
          </para>
        </listitem>

        <listitem>
          <para>
            Session
          </para>
        </listitem>

        <listitem>
          <para>
            P4PHP
          </para>
        </listitem>

        <listitem>
          <para>
            one of APC or Zend OPCache (for optimal performance)
          </para>
        </listitem>
      </itemizedlist>

      <para>
        Swarm greatly benefits from the following optional extensions:
      </para>

      <itemizedlist>
        <listitem>
          <para>
            Imagick (used for viewing non-web safe images)
          </para>
        </listitem>

        <listitem>
          <para>
            php-xml (for RSS feeds)
          </para>
        </listitem>

        <listitem>
          <para>
            php-mbstring (for multi-byte character strings)
          </para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>
        A supported Helix Versioning Engine deployment, and the ability to
        connect to it from the system hosting Swarm.
      </para>

      <note>
        <para>
          A "Helix Versioning Engine deployment" can refer to a running
          <command>p4d</command>, or a proxy, replica, edge server, or commit
          server.
        </para>
      </note>
    </listitem>

    <listitem>
      <para>
        <command>curl</command> or <command>wget</command> (for Swarm worker
        operation)
      </para>
    </listitem>

    <listitem>
      <para>
        a <link linkend="setup.dependencies.triggers">supported version
        of perl</link> (to integrate with Helix Versioning Engine triggers)
      </para>
    </listitem>

    <listitem>
      <para>
        that <link linkend="setup.dependencies.selinux">SELinux</link>, if
        installed, is disabled
      </para>
    </listitem>
  </itemizedlist>

  <para>
    Optional dependencies:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        LibreOffice (for viewing office-type documents)
      </para>
    </listitem>

    <listitem>
      <para>
        <command>zip</command>, the command-line archiving tool (for downloading
        archives of files/folders.
      </para>
    </listitem>
  </itemizedlist>


  <section xml:id="setup.dependencies.os">
    <title>Supported operating system platforms</title>

    <para>
      Because Swarm includes binary versions of P4PHP (the Perforce
      extension for PHP), we support Swarm on the following operating
      systems:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          Linux 2.6+ Intel (x86, x86_64) with glibc 2.3.3+
        </para>
      </listitem>

      <listitem>
        <para>
          Mac OS X 10.6+ (x86_64)
        </para>
      </listitem>
    </itemizedlist>

    <para>
      You may be able to get Swarm running on another platform if you build
      P4PHP yourself and satisfy the other runtime dependencies.
      Instructions on how obtain and build P4PHP from source can be found
      <link xlink:href="https://www.perforce.com/perforce/doc.current/user/p4phpnotes.txt">here</link>.
    </para>

    <important>
      <para>
        P4PHP does not support threaded operation. If you compile P4PHP from
        source, ensure that the version of PHP you compile for is non-threaded.
      </para>
    </important>
  </section>

  <section xml:id="setup.dependencies.apache">
    <title>Apache web server</title>

    <para>
      Swarm requires Apache HTTP Server 2.2 or newer:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <link xlink:href="https://httpd.apache.org/"/>
        </para>
      </listitem>
    </itemizedlist>

    <para>
      Swarm also requires the following Apache modules:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          mod_php5 for interacting with PHP (usually installed with PHP)
        </para>
      </listitem>

      <listitem>
<literallayout>mod_rewrite URL rewriting engine
<link xlink:href="https://httpd.apache.org/docs/2.2/mod/mod_rewrite.html"/>
</literallayout>
      </listitem>
    </itemizedlist>

    <important>
      <para>
        Only the <literal>prefork</literal>
        <glossterm linkend="MPM">MPM</glossterm> is supported. Use of the
        <literal>worker</literal> or <literal>event</literal>
        <glossterm linkend="MPM">MPM</glossterm>s is not supported and is likely
        to cause problems because P4PHP does not support threaded operation.
      </para>

      <para>
        For more information on the <literal>prefork</literal>
        <glossterm linkend="MPM">MPM</glossterm>, see:
      </para>

<literallayout><link xlink:href="https://httpd.apache.org/docs/2.2/mod/prefork.html"/>
<link xlink:href="https://httpd.apache.org/docs/2.4/mod/prefork.html"/>
</literallayout>
    </important>
  </section>

  <section xml:id="setup.dependencies.php">
    <title>PHP</title>

    <para>
      Swarm requires PHP 5.3.3+, 5.4.x, 5.5.x, or 5.6.x:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <link xlink:href="https://secure.php.net/"/>
        </para>
      </listitem>
    </itemizedlist>

    <important>
      <para>
        PHP must be non-threaded because P4PHP does not support threaded
        operation.
      </para>
    </important>

    <para>
      Swarm requires the following PHP extensions:
    </para>

    <itemizedlist>
      <listitem>
<literallayout>iconv (character encoding converter)
<link xlink:href="https://secure.php.net/iconv"/>
</literallayout>

        <para>
          This is typically enabled by default with most PHP distributions
        </para>
      </listitem>

      <listitem>
<literallayout>JSON (JavaScript Object Notation)
<link xlink:href="https://secure.php.net/json"/>
</literallayout>
        <para>
          This is typically enabled by default with most PHP distributions,
          although recent distributions are making this optional
        </para>
      </listitem>

      <listitem>
<literallayout>Session (session handling)
</literallayout>

        <para>
          This is typically enabled by default with most PHP distributions
        </para>
      </listitem>

      <listitem>
        <para>
          P4PHP (the Perforce PHP Extension)
        </para>

        <para>
          Included with the Swarm package. See the
          <link linkend="setup.php.apc">install directions</link>.
        </para>
      </listitem>

      <listitem>
        <para>
          php-xml (DOM API for XML manipulation)
          <literallayout>
</literallayout>
          Included with PHP on many operating systems, but must be manually
          installed on CentOS/RHEL. When not installed, Swarm's RSS feed does
          not work.
        </para>
      </listitem>

      <listitem>
        <para>
          php-mbstring (multi-byte character strings)
        </para>

        <para>
          Included with PHP on many operating systems, but must be manually
          installed on CentOS/RHEL. When not installed, Swarm's RSS feed does
          not work.
        </para>
      </listitem>
    </itemizedlist>

    <para>
      Swarm greatly benefits from the following PHP extensions:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          One of (but not both):
        </para>

        <itemizedlist>
          <listitem>
<literallayout>APC (the Alternative PHP Cache)
<link xlink:href="https://secure.php.net/apc"/>
</literallayout>

            <para>
              Installation instructions for <link linkend="setup.php.apc">APC</link>.
            </para>
          </listitem>

          <listitem>
<literallayout>Zend OPCache
<link xlink:href="https://secure.php.net/opcache"/>
</literallayout>

            <para>
              Installation instructions for
              <link linkend="setup.php.zendopcache">Zend OPCache</link>.
            </para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
<literallayout>Imagick (integrates ImageMagick into PHP)
<link xlink:href="https://secure.php.net/imagick"/>
</literallayout>

        <para>
          Installation instructions for
          <link linkend="setup.php.imagick">Imagick</link>.
        </para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="setup.dependencies.perforce">
    <title>Perforce Server requirements</title>

    <para>
      Swarm works with the Helix Versioning Engine at any version that is newer
      than, or matches the following:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          2010.2/503309
        </para>
      </listitem>

      <listitem>
        <para>
          2011.1/506384
        </para>
      </listitem>

      <listitem>
        <para>
          2012.1/512349
        </para>
      </listitem>

      <listitem>
        <para>
          2012.2/525804
        </para>
      </listitem>

      <listitem>
        <para>
          2013.1/610569
        </para>
      </listitem>

      <listitem>
        <para>
          2013.2/708877
        </para>
      </listitem>

      <listitem>
        <para>
          2013.3/740675
        </para>
      </listitem>

      <listitem>
        <para>
          2014.1/807760
        </para>
      </listitem>
    </itemizedlist>

    <para>
      Swarm performs best with the Helix Versioning Engine version 2013.1 or newer.
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <link xlink:href="https://www.perforce.com"/>
        </para>
      </listitem>
    </itemizedlist>

    <para>
      Swarm requires a user with <emphasis>admin</emphasis> privileges in the
      Helix Versioning Engine. This can be an existing user, or a new user
      created specifically to support Swarm.
    </para>

    <tip>
      <para>
        For more information about how to set up a Helix Versioning Engine,
        see:<literallayout>
</literallayout><link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4sag/index.html"/>
      </para>
    </tip>
  </section>

  <section xml:id="setup.dependencies.triggers">
    <title>Trigger and worker dependencies</title>

      <para>
        The Swarm triggers, which are installed on the Helix Versioning Engine
        in a <link linkend="setup.perforce">later step</link>, requires:
      </para>

<literallayout>perl 5.08+
<link xlink:href="https://www.perl.org/get.html"/>
</literallayout>
    
    <para>
      Both the triggers and the recurring task to invoke Swarm workers,
      installed in a <link linkend="setup.worker">later step</link>, require
      either of:
    </para>

    <itemizedlist>
      <listitem>
<literallayout>curl
<link xlink:href="https://curl.haxx.se/download.html"/>
</literallayout>

        <!-- vim: set ts=2 sw=2 tw=80 ai si: --><note version="5.0" xml:base="../common/note-curl_on_windows.xml">
  <para>
    For Windows, <command>curl.exe</command> depends on
    <filename>MSVCR100.dll</filename>. You can get a copy by installing the
    <emphasis role="bold">Microsoft Visual C++ Redistributable
    Package</emphasis>, available for:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        32-bit systems:
        <link xlink:href="https://www.microsoft.com/download/en/details.aspx?id=5555"/>
      </para>
    </listitem>

    <listitem>
      <para>
        64-bit systems:
        <link xlink:href="https://www.microsoft.com/download/en/details.aspx?id=14632"/>
      </para>
    </listitem>
  </itemizedlist>

  <para>
    If you install Swarm with HTTPS, <command>curl.exe</command> requires recent
    CA certificates (or HTTPS connections silently fail). You can get a copy of
    the <filename>cacert.pem</filename> from:
  </para>

  <para>
    <link xlink:href="https://curl.haxx.se/docs/caextract.html"/>
  </para>

  <para>
    Once downloaded, copy <filename>cacert.pem</filename> to the same folder
    where you installed <command>curl.exe</command>, and rename it to
    <filename>curl-ca-bundle.crt</filename>.
  </para>
</note>
        <!-- vim: set ts=2 sw=2 tw=80 ai si: --><warning version="5.0" xml:base="../common/warning-curl_on_windows.xml">
  <para>
    If <command>curl</command> (or <command>curl.exe</command> on Windows)
    cannot execute as expected, trigger execution may block or fail. For
    example, if <filename>MSVCR100.dll</filename> is missing from a Windows
    system, invoking <command>curl.exe</command> causes a dialog to appear.
  </para>

  <para>
    Prior to configuring the <link linkend="setup.perforce">triggers</link>,
    verify that <command>curl</command> executes. On Linux systems, run:
  </para>

<programlisting>
$ <command>curl -h</command>
</programlisting>

  <para>
    On Windows systems, run:
  </para>

<programlisting>
C:\&gt; <command>curl.exe -h</command>
</programlisting>

  <para>
    The start of the output should be similar to:
  </para>

<screen>
Usage: curl [options...] &lt;url&gt;
Options: (H) means HTTP/HTTPS only, (F) means FTP only
     --anyauth       Pick "any" authentication method (H)
 -a, --append        Append to target file when uploading (F/SFTP)
     --basic         Use HTTP Basic Authentication (H)
     --cacert FILE   CA certificate to verify peer against (SSL)
     --capath DIR    CA directory to verify peer against (SSL)

...[truncated for brevity]...
</screen>

  <para>
    For a more thorough test that actually fetches content over a network, try
    the following test:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        For Linux systems, run:
      </para>

<programlisting>
$ <command>curl https://www.perforce.com/</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        For Windows systems, run:
      </para>

<programlisting>
C:\&gt; <command>curl.exe https://www.perforce.com/</command>
</programlisting>
    </listitem>
  </itemizedlist>

  <para>
    The output should look like HTML.
  </para>
</warning>
      </listitem>

      <listitem>
<literallayout>wget
<link xlink:href="https://ftp.gnu.org/gnu/wget/"/>
<link xlink:href="http://gnuwin32.sourceforge.net/packages/wget.htm"/> (for Windows)
</literallayout>
      </listitem>
    </itemizedlist>

    <!-- vim: set ts=2 sw=2 tw=80 ai si: --><note version="5.0" xml:base="../common/note-powershell_aliases.xml">
  <para>
    If you are using Powershell on Windows systems, be aware that
    Powershell includes aliases for <command>curl</command> and
    <command>wget</command> that call the Powershell command
    <command>Invoke-WebRequest</command> instead of
    <command>curl.exe</command> or <command>wget.exe</command>.
    <command>Invoke-WebRequest</command> has different command-line options
    than either <command>curl</command> or <command>wget</command>, which
    can be confusing.
  </para>

  <para>
    If you want to remove the built-in aliases for <command>curl</command> and
    <command>wget</command> from Powershell, follow these steps:
  </para>

  <procedure>
    <step>
      <para>
        Create a Powershell profile (only if you have not already done so).
      </para>

<programlisting>
PS C:\&gt; <command>New-Item $profile -force -itemtype file</command>
</programlisting>
    </step>

    <step>
      <para>
        Edit your profile:
      </para>

<programlisting>
PS C:\&gt; <command>notepad $profile</command>
</programlisting>
    </step>

    <step>
      <para>
        Add the following line to your profile:
      </para>

<programlisting>
remove-item alias:curl
remove-item alias:wget
</programlisting>
    </step>

    <step>
      <para>
        Save the profile, and close <command>notepad</command>.
      </para>
    </step>

    <step>
      <para>
        Reload your profile.
      </para>

<programlisting>
PS C:\&gt; <command>. $profile</command>
</programlisting>
    </step>
  </procedure>
</note>
  </section>

  <section xml:id="setup.dependencies.browsers">
    <title>Supported web browsers</title>

    <para>
      The following browsers are supported for use with Swarm:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          Apple Safari, latest stable version
        </para>
      </listitem>

      <listitem>
        <para>
          Google Chrome, latest stable version
        </para>
      </listitem>

      <listitem>
        <para>
          Microsoft Internet Explorer 10+
        </para>
      </listitem>

      <listitem>
        <para>
          Mozilla Firefox, latest stable version
        </para>
      </listitem>
    </itemizedlist>

    <para>
      Other web browsers might also work, including prior, development or
      beta builds of the above web browsers, but are not officially
      supported.
    </para>

    <para>
      Swarm requires that JavaScript and cookies are enabled in the web
      browser.
    </para>
  </section>

  <section xml:id="setup.dependencies.optional">
    <title>Optional dependencies</title>

    <para>
      Swarm can display previews of office-type documents when LibreOffice is
      installed. Installation is not required, but when LibreOffice is installed
      Swarm automatically detects its presence.
    </para>

    <para>
      For more information, see <xref linkend="integrations.libreoffice"/>.
    </para>

    <para>
      To use the <guibutton>Download .zip</guibutton> feature (see
      <xref linkend="basics.files.zip"/>), Swarm requires that the
      <command>zip</command> command-line tool is available.
    </para>

    <para>
      For more information, see <xref linkend="admin.archives"/>.
    </para>
  </section>

  <section xml:id="setup.dependencies.selinux">
    <title>Security-enhanced Linux (SELinux)</title>

    <para>
      Swarm is currently <emphasis role="bold">not supported with
      SELinux</emphasis>. We hope to support SELinux in a future release and
      provide guidance on the required configuration.
    </para>

    <para>
      This version of Swarm does not work with SELinux with its default
      configuration in <emphasis>enforcing mode</emphasis>. If you are running a
      system with SELinux, Swarm may work if you set it to <emphasis>permissive
      mode</emphasis> with the command:
    </para>

<programlisting language="bash">
$ <command>sudo setenforce 0</command>
</programlisting>

    <note>
      <para>
        Setting your system to <emphasis>permissive mode</emphasis> might make
        <link xlink:href="https://plus.google.com/112917221531140868607/posts/ZiqZVXAjrev">Dan
        Walsh cry</link>.
      </para>
    </note>

    <para>
      If you do attempt to run Swarm with SELinux enabled, the following error
      message may appear in the Swarm log:
    </para>

<programlisting>
2016-06-13T18:00:39-07:00 CRIT (2): exception 
'P4\Connection\Exception\ConnectException' with message 'Connect failed: 
[P4.connect()] Connect to server failed; check $P4PORT.
</programlisting>

    <para>
      In this situation, SELinux may be preventing Swarm, which is running in a
      web server process, from connecting to your Helix Versioning Engine.
    </para>
  </section>

  <section xml:id="setup.dependencies.install">
    <title>Choose installation approach</title>

    <para>
      Once you are aware of Swarm's dependencies and can satisfy them, you have
      three choices for installing Swarm. Choose
      <emphasis role="bold">one</emphasis> approach:
    </para>

    <orderedlist>
      <listitem>
        <para>
          Use the Swarm packages (RPM or Debian):
        </para>

        <itemizedlist>
          <listitem>
            <para>
              Follow the steps provided in <xref linkend="setup.packages"/>.
            </para>
          </listitem>

          <listitem>
            <para>
              Once Swarm is installed, it needs some initial configuration (common
              to any installation approach). Skip to the
              <xref linkend="setup.perforce"/> section.
            </para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>
          Use the Swarm OVA (Open Virtualization Appliance):
        </para>

        <itemizedlist>
          <listitem>
            <para>
              Follow the steps provided in <xref linkend="setup.ova"/>.
            </para>
          </listitem>

          <listitem>
            <para>
              Once Swarm is installed, it needs some initial configuration (common
              to any installation approach). Skip to the
              <xref linkend="setup.perforce"/> section.
            </para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>
          Use the Swarm source distribution archive:
        </para>

        <itemizedlist>
          <listitem>
            <para>
              Follow all of the steps provided in the
              <xref linkend="setup.installation"/> and subsequent sections.
            </para>
          </listitem>
        </itemizedlist>
      </listitem>
    </orderedlist>

    <para>
      If you have not already done so, download Swarm: <?download-swarm?>
    </para>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="setup.packages" xml:base="setup/packages.xml">
  <title>Swarm packages</title>

  <para>
    Helix Swarm is available in two distribution package formats:
    <glossterm linkend="Debian">Debian</glossterm> (<filename>.deb</filename>)
    for Ubuntu systems,
    and <glossterm linkend="RPM">RPM</glossterm> (<filename>.rpm</filename>) for
    CentOS and RedHat Enterprise Linux (RHEL).
  </para>

  <para>
    Using distribution packages greatly simplifies the installation, updating,
    and removal of software, as the tools that manage these packages are aware
    of the dependencies for each package.
  </para>

  <note>
    <para>
      The Swarm packages have been thoroughly tested on Ubuntu 12.04 LTS and
      Ubuntu 14.04 LTS, and CentOS/RHEL 6.1-6.7, and CentOS/RHEL 7. While the
      packages should work on other compatible distributions, these have not
      been tested.
    </para>
  </note>

  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><note version="5.0" xml:base="../common/note-perforce_service.xml">
  <para>
    A <emphasis>Helix Versioning Engine</emphasis> can refer to a Helix server
    (<command>p4d</command>), proxy, broker, replica, edge server, or commit
    server. It does not refer to a <emphasis>service user</emphasis>; service
    users are used to coordinate replication in a Helix Versioning Engine. For
    simplicity, the term <emphasis>Helix server</emphasis> is used to refer to
    any configuration of a Helix Versioning Engine.
  </para>
</note>

  <section xml:id="setup.packages.install">
    <title>Installation</title>

    <procedure>
      <step>
        <para>
          Configure the Perforce package repository, on the server to host Swarm
          and on the server hosting your Helix Versioning Engine.
        </para>

        <important>
          <para>
            If the server hosting your Helix Versioning Engine cannot use
            packages, for example when it is running Windows, skip this step on
            that server.
          </para>
        </important>

        <para>
          As root, run one of the following:
        </para>

        <procedure>
          <step>
            <para>
              For Ubuntu 12.04:
            </para>

            <para>
              Create the file
              <filename>/etc/apt/sources.list.d/perforce.list</filename> with
              the following content:
            </para>

<programlisting>
deb http://package.perforce.com/apt/ubuntu/ precise release
</programlisting>
          </step>

          <step>
            <para>
              For Ubuntu 14.04:
            </para>

            <para>
              Create the file
              <filename>/etc/apt/sources.list.d/perforce.list</filename> with
              the following content:
            </para>

<programlisting>
deb http://package.perforce.com/apt/ubuntu/ trusty release
</programlisting>
          </step>

          <step>
            <para>
              For CentOS/RHEL 6:
            </para>

            <para>
              Create the file
              <filename>/etc/yum.repos.d/helix-swarm.repo</filename> with
              the following content:
            </para>

<programlisting>
[Perforce]
name=Perforce
baseurl=http://package.perforce.com/yum/rhel/6/x86_64/
enabled=1
gpgcheck=1
</programlisting>
          </step>

          <step>
            <para>
              For CentOS/RHEL 7:
            </para>

            <para>
              Create the file
              <filename>/etc/yum.repos.d/helix-swarm.repo</filename> with
              the following content:
            </para>

<programlisting>
[Perforce]
name=Perforce
baseurl=http://package.perforce.com/yum/rhel/7/x86_64/
enabled=1
gpgcheck=1
</programlisting>
          </step>
        </procedure>
      </step>

      <step>
        <para>
          Import the Perforce package signing key, on the server to host Swarm
          and the server hosting your Helix Versioning Engine.
        </para>

        <important>
          <para>
            If the server hosting your Helix Versioning Engine cannot use
            packages, for example when it is running Windows, skip this step on
            that server.
          </para>
        </important>

        <para>
          Run one of the following:
        </para>

        <procedure>
          <step>
            <para>
              For Ubuntu:
            </para>

<programlisting language="bash">
$ <command>wget -qO - https://package.perforce.com/perforce.pubkey | sudo apt-key add -</command>
$ <command>sudo apt-get update</command>
</programlisting>
          </step>

          <step>
            <para>
              For CentOS/RHEL (run this command as root):
            </para>

<programlisting>
# <command>rpm --import https://package.perforce.com/perforce.pubkey</command>
</programlisting>
          </step>
        </procedure>
      
        <para>
          For information about how to verify the authenticity of the signing
          key, see:
          <link xlink:href="https://www.perforce.com/perforce-packages"/>
        </para>
      </step>

      <step>
        <para>
          Install the main Swarm package on the server to host Swarm.
        </para>

        <para>
          Run one of the following:
        </para>

        <substeps>
          <step>
            <para>
              For Ubuntu:
            </para>

<programlisting>
$ <command>sudo apt-get install helix-swarm</command>
</programlisting>
          </step>

          <step>
            <para>
              For CentOS/RHEL (run this command as root):
            </para>

<programlisting>
# <command>yum install helix-swarm</command>
</programlisting>

            <note>
              <para>
                For CentOS/RHEL, the firewall configuration may need to be adjusted
                to allow access to the web server.
              </para>
  
              <procedure>
                <step>
                  <para>
                    For CentOS/RHEL 6.x:
                  </para>

<programlisting>
$ <command>sudo lokkit -s http</command>
</programlisting>

                  <para>
                    If you subsequently wish to enable HTTPS, run (as root):
                  </para>

<programlisting>
$ <command>sudo lokkit -s https</command>
</programlisting>
                </step>

                <step>
                  <para>
                    For CentOS/RHEL 7.x:
                  </para>

<programlisting>
$ <command>sudo firewall-cmd --permanent --add-service=http</command>
$ <command>sudo systemctl reload firewalld</command>
</programlisting>

                  <para>
                    If you subsequently wish to enable HTTPS, run (as root):
                  </para>

<programlisting>
$ <command>sudo firewall-cmd --permanent --add-service=https</command>
$ <command>sudo systemctl reload firewalld</command>
</programlisting>
                </step>
              </procedure>
            </note>
          </step>
        </substeps>
      </step>

      <step>
        <para>
          Install the Swarm triggers package on the server hosting your Helix
          Versioning Engine.
        </para>

        <para>
          Install this package on the server hosting your Helix Versioning
          Engine, which may be the same server that is hosting Swarm, or
          elsewhere on your network.
        </para>

        <important>
          <para>
            If the server hosting your Helix Versioning Engine cannot use
            packages, for example when it is running Windows, you need to copy
            the appropriate Swarm trigger script from
            <filename>/opt/perforce/swarm/p4-bin/scripts</filename> to the
            server hosting your Helix Versioning Engine.
            <filename>swarm-trigger.pl</filename> is for Linux systems.
            <filename>swarm-trigger.vbs</filename> is for Windows systems. Once
            copied, the trigger script needs to be configured. See
            <xref linkend="setup.perforce"/> for details.
          </para>
        </important>

        <para>
          Run one of the following:
        </para>

        <substeps>
          <step>
            <para>
              For Ubuntu:
            </para>

<programlisting>
$ <command>sudo apt-get install helix-swarm-triggers</command>
</programlisting>
          </step>

          <step>
            <para>
              For CentOS/RHEL (run this command as root):
            </para>

<programlisting>
# <command>yum install helix-swarm-triggers</command>
</programlisting>
          </step>
        </substeps>

        <important>
          <para>
            The package installs a config file at
            <filename>/opt/perforce/etc/swarm-trigger.conf</filename> that you
            will need to modify. See <xref linkend="setup.perforce"/> for more
            details on configuring that file.
          </para>
        </important>
      </step>

      <step>
        <para>
          Optional: Install the Swarm optional package, on the server hosting Swarm.
        </para>

        <para>
          While not required, installing this package installs the dependencies
          required to use the Imagick and LibreOffice Swarm modules. These
          modules provide previews of a variety of image and office documents.
        </para>
            
        <para>
          Run one of the following:
        </para>

        <substeps>
          <step>
            <para>
              For Ubuntu:
            </para>

<programlisting>
$ <command>sudo apt-get install helix-swarm-optional</command>
</programlisting>
          </step>

          <step>
            <para>
              For CentOS/RHEL (run this command as root):
            </para>

<programlisting>
# <command>yum install helix-swarm-optional</command>
</programlisting>

            <important>
              <para>
                This package depends on the package
                <literal>php-pecl-imagick</literal> which is available from the
                EPEL project. In order to install packages from EPEL, you will
                need to add the EPEL repository and accept its signing key.
                Instructions are available at:
                <link xlink:href="https://fedoraproject.org/wiki/EPEL">https://fedoraproject.org/wiki/EPEL</link>
              </para>
            </important>

            <note>
              <para>
                Installation of this package also installs
                <link linkend="setup.php.apc">APC</link> for CentOS/RHEL 6, or
                <link linkend="setup.php.zendopcache">Zend OPCache</link> for
                CentOS/RHEL 7.
              </para>
            </note>
          </step>
        </substeps>
      </step>

      <step>
        <para>
          Complete the <xref linkend="setup.packages.configure"/> steps.
        </para>
      </step>
    </procedure>
  </section>

  <section xml:id="setup.packages.updating">
    <title>Updating</title>

    <important>
      <para>
        For the Swarm 2015.2 release, the packages have been renamed. The
        following instructions upgrade your Swarm packages to the latest
        versions.
      </para>
    </important>

    <para>
      Run one of the following:
    </para>

    <procedure>
      <step>
        <para>
          For Ubuntu:
        </para>

<programlisting language="bash">
$ <command>sudo apt-get update</command>
$ <command>sudo apt-get install helix-swarm helix-swarm-triggers helix-swarm-optional</command>
</programlisting>
      </step>

      <step>
        <para>
          For CentOS/RHEL (run this command as root):
        </para>

<programlisting>
# <command>yum install helix-swarm helix-swarm-triggers helix-swarm-optional</command>
</programlisting>
      </step>
    </procedure>

    <para>
      Swarm generally has several major updates each year, and may
      occasionally have a patch update between major updates. To determine
      whether a Swarm update is available, run one of the following:
    </para>

    <procedure>
      <step>
        <para>
          For Ubuntu:
        </para>

<programlisting>
$ <command>sudo apt-get update</command>
$ <command>sudo apt-get -s upgrade | grep swarm</command>
</programlisting>
      </step>

      <step>
        <para>
          For CentOS/RHEL (run this command as root):
        </para>

<programlisting>
# <command>yum list updates | grep swarm</command>
</programlisting>
      </step>
    </procedure>
  </section>

  <section xml:id="setup.packages.uninstall">
    <title>Uninstall</title>

    <procedure>
      <step>
        <para>
          Remove the Swarm triggers from your Helix Versioning Engine.
        </para>
      </step>

      <step>
        <para>
          Remove the Swarm trigger scripts from the server hosting your Helix
          Versioning Engine.
        </para>

        <important>
          <para>
            If you manually installed the trigger script, perhaps because the
            server hosting your Helix Versioning Engine cannot use packages (e.g.
            Windows), manually remove the script.
            <filename>swarm-trigger.pl</filename> is for Linux systems.
            <filename>swarm-trigger.vbs</filename> is for Windows systems.
          </para>
        </important>

        <para>
          Run one of the following:
        </para>

        <substeps>
          <step>
            <para>
              For Ubuntu:
            </para>

<programlisting>
$ <command>sudo apt-get remove helix-swarm-triggers</command>
</programlisting>
          </step>

          <step>
            <para>
              For CentOS/RHEL (run this command as root):
            </para>

<programlisting>
# <command>yum remove helix-swarm-triggers</command>
</programlisting>
          </step>
        </substeps>
      </step>

      <step>
        <para>
          Remove the Swarm packages from the server hosting Swarm.
        </para>

        <para>
          Run one of the following:
        </para>

        <substeps>
          <step>
            <para>
              For Ubuntu:
            </para>
        
<programlisting>
$ <command>sudo apt-get remove helix-swarm</command>
</programlisting>
          </step>

          <step>
            <para>
              For CentOS/RHEL (run this command as root):
            </para>

<programlisting>
# <command>yum remove helix-swarm</command>
</programlisting>
          </step>
        </substeps>
      </step>

      <step>
        <para>
          If you installed the optional package, remove it from the server
          hosting Swarm.
        </para>

        <para>
          Run one of the following:
        </para>

        <substeps>
          <step>
            <para>
              For Ubuntu:
            </para>
        
<programlisting>
$ <command>sudo apt-get remove helix-swarm-optional</command>
</programlisting>
          </step>

          <step>
            <para>
              For CentOS/RHEL (run this command as root):
            </para>

<programlisting>
# <command>yum remove helix-swarm-optional</command>
</programlisting>
          </step>
        </substeps>
      </step>
    </procedure>
  </section>

  <section xml:id="setup.packages.configure">
    <title>Post-installation configuration</title>

    <para>
      Once the <filename>helix-swarm</filename> package has been installed,
      additional configuration is required. Perform the following steps:
    </para>

    <procedure>
      <step>
        <para>
          Use the Swarm configuration script to setup Swarm, on the server
          hosting Swarm.
        </para>

        <note>
          <para>
            The Swarm configuration script can be used in a few different ways.
            The steps below outline the most straightforward configuration using
            an interactive install, but you can review the options by running:
          </para>

<programlisting>
$ <command>sudo /opt/perforce/swarm/sbin/configure-swarm.sh -h</command>
</programlisting>
        </note>

        <para>
          Run an interactive install:
        </para>

<programlisting>
$ <command>sudo /opt/perforce/swarm/sbin/configure-swarm.sh</command>
</programlisting>

        <para>
          The configuration script displays the following summary:
        </para>

<screen>
------------------------------------------------------------
configure-swarm.sh: Thu Aug 25 11:29:49 PDT 2016: commencing configuration of Swarm

Summary of arguments passed:
Interactive?       [yes]
Force?             [no]
P4PORT             [(not specified)]
Swarm user         [(not specified, will suggest swarm)]
Swarm password     [(not specified)]
Email host         [(not specified)]
Swarm host         [(not specified, will suggest <replaceable>myhost</replaceable>)]
Swarm port         [80]
Swarm base URL     [(default (empty))]
Create Swarm user? [no]
Super user         [(not specified)] * not needed
Super password     [(not specified)] * not needed
</screen>
      </step>

      <step>
        <para>
          Provide information to the configuration script.
        </para>

        <para>
          After the summary, the configuration script prompts for the following
          information:
        </para>

        <substeps>
          <step>
            <para>
              Specify a value for <envar>P4PORT</envar>.
            </para>

<screen>
No P4PORT specified

Swarm requires a connection to a Helix Versioning Engine.
Please supply the P4PORT to connect to.

Helix Versioning Engine address (P4PORT):
</screen>

            <para>
              Specify the hostname and port for your Helix Versioning Engine. If
              defined, the value for <envar>P4PORT</envar> is used as the
              default. The configuration script verifies that it can connect:
            </para>

<screen>
-response: [<replaceable>myp4host:1666</replaceable>]

Checking P4PORT [<replaceable>myp4host:1666</replaceable>]...
-P4 command line to use: [/opt/perforce/bin/p4 -p <replaceable>myp4host:1666</replaceable>]
Attempting connection to [<replaceable>myp4host:1666</replaceable>]...
-connection successful:
  Server address: <replaceable>myp4host:1666</replaceable>
  Server version: P4D/LINUX26X86_64/2016.1/1411799 (2016/07/12)
  Server license: 10000 users (support ends 2017/05/16) 
  Server license-ip: 192.168.0.1
</screen>

            <important>
              <para>
                If your Helix Versioning Engine is deployed using the commit-edge
                architecture, ensure that Swarm's <literal>port</literal> value
                points to the commit server.
              </para>

              <para>
                For more information, see
                "<link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4dist/chapter.distributed.html">Commit-edge Architecture</link>" in the
                <citetitle><link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4dist/index.html">Perforce
                Server Administrator's Guide: Multi-site
                Deployment</link></citetitle>.
              </para>
            </important>
          </step>

          <step>
            <para>
              Specify the userid and password of a normal user with
              <emphasis>admin</emphasis>-level privileges in the Helix
              Versioning Engine.
            </para>

<screen>
Checking Swarm user credentials...
No Swarm user specified

Swarm requires a Helix user account with 'admin' rights.
Please provide a username and password for this account.
If this account does not have 'admin' rights, it will
be set for this user.

Helix username for the Swarm user [swarm]:
</screen>

            <para>
              Enter the userid. The default is
              <literal><replaceable>swarm</replaceable></literal>.
            </para>

<screen>
-response: [<replaceable>swarm</replaceable>]

Helix password or login ticket for the Swarm user (typing hidden): 
</screen>

            <para>
              Enter the login ticket, or password, for the userid.
            </para>

            <note>
              <para>
                You can obtain a login ticket by running (in another shell):
              </para>

<programlisting>
$ <command>p4 -p <replaceable>myp4host:1666</replaceable> -u <replaceable>userid</replaceable> login -p</command>
</programlisting>

              <para>
                If the login ticket you provide would expire in less than a
                year, you will receive a warning.
              </para>
            </note>

<screen>
Checking Swarm user credentials...
-checking if user [<replaceable>swarm</replaceable>] exists in [<replaceable>myp4host:1666</replaceable>]...
-user exists
Obtaining Helix login ticket for [<replaceable>swarm</replaceable>] in [<replaceable>myp4host:1666</replaceable>]...
-login ticket obtained
Checking user [<replaceable>swarm</replaceable>]'s ticket against [<replaceable>myp4host:1666</replaceable>]...
-login ticket is good
Checking user [<replaceable>swarm</replaceable>] has at least access level [admin]...
-user has maximum access level [admin]
-user meets minimum access level [admin]
</screen>
          </step>

          <step>
            <para>
              Specify the hostname for the Swarm UI.
            </para>

<screen>
Swarm needs a distinct hostname that users can enter into their browsers to
access Swarm. Ideally, this is a fully-qualified domain name, e.g.
'swarm.company.com', but it can be just a hostname, e.g. 'swarm'.

Whatever hostname you provide should be Swarm-specific and not shared with
any other web service on this host.

Note that the hostname you specify typically requires configuration in your
network's DNS service. If you are merely testing Swarm, you can add a
hostname-&gt;IP mapping entry to your computer's hosts configuration.

Hostname for this Swarm server [myhost]:
</screen>

            <note>
              <para>
                The default is the current hostname. The configuration script
                does not verify that the hostname actually works (DNS
                configuration may not exist yet).
              </para>
            </note>
          </step>

          <step>
            <para>
              Specify a mail relay host.
            </para>

<screen>
Swarm requires an mail relay host to send email notifications.

Mail relay host (e.g.: mx.yourdomain.com):
</screen>

            <note>
              <para>
                The configuration script does not verify that the mail relay
                host you provide actually accepts <literal>SMTP</literal>
                connections.
              </para>
            </note>
          </step>
        </substeps>

        <para>
          Once this information has been provided, the configuration script
          performs the following steps (some of the detail depends on the
          version of PHP and Apache that is installed):
        </para>

<screen>
Configuring Cron...
`/opt/perforce/etc/swarm-cron-hosts.conf.new' -&gt; `/opt/perforce/etc/swarm-cron-hosts.conf'
-updated cron configuration file with supplied Swarm host
Configuring Swarm installation...
-composed new Swarm config file contents
`/opt/perforce/swarm/data/config.php.new' -&gt; `/opt/perforce/swarm/data/config.php'
-wrote new Swarm config file to reflect new configuration
-identified Apache user:group: [www-data:www-data]
-setting permissions on the Swarm data directory...
-ensured file permissions are set properly
Configuring Apache...
-identified Swarm virtual host config file: [/etc/apache2/sites-available/perforce-swarm-site.conf]
-identified Apache log directory: [/var/log/apache2]
-updated the vhost file to set Apache log directory
-updated the vhost file to reflect Swarm host
-checking Apache modules...
Enabling module rewrite.
Module php5 already enabled
To activate the new configuration, you need to run:
  service apache2 restart
-proper Apache modules are enabled
-enabling Swarm Apache site...
Enabling site perforce-swarm-site.conf.
To activate the new configuration, you need to run:
  service apache2 reload
-Swarm Apache site enabled
-restarting Apache...
-Apache restarted
configure-swarm.sh: Thu Aug 25 11:31:36 PDT 2016: completed configuration of Helix Swarm

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::
::  Swarm is now configured and available at:
::
::      http://<replaceable>myhost</replaceable>/
::
::  You may login as the Swarm user [<replaceable>swarm</replaceable>] using the password
::  you specified.
::
::  Please ensure you install the following package on the server
::  hosting your Helix Versioning Engine.
::
::      helix-swarm-triggers
::
::  (If your Helix Versioning Engine is hosted on an OS and
::  platform that is not compatible with the above package, you can
::  also install the trigger script manually.)
::
::  You will need to configure the triggers, as covered in the Swarm
::  documentation:
::
::  http://www.perforce.com/perforce/doc.current/manuals/swarm/setup.perforce.html
::
::  Documentation for optional post-install configuration, such as
::  configuring Swarm to use HTTPS, operate in a sub-folder, or on a
::  custom port, is available:
::
::  https://www.perforce.com/perforce/doc.current/manuals/swarm/setup.post.html
::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
</screen>

        <note>
          <para>
            If you have installed Swarm on a host that does not provide other
            web services, you may wish to disable Apache's default site
            configuration. Doing so means that regardless of the hostname a user
            might use to reach the web server hosting Swarm, Swarm would be
            presented.
          </para>

          <para>
            <emphasis role="bold">Be aware that disabling Apache's default site
            configuration could disable existing web services or
            content.</emphasis>
          </para>

          <para>
            Disabling Apache's default site configuration on Ubuntu hosts is
            easy. Run one of:
          </para>

          <itemizedlist>
            <listitem>
              <para>
                For Ubuntu 12:
              </para>

<programlisting language="bash">
$ <command>sudo a2dissite default</command>
</programlisting>
            </listitem>

            <listitem>
              <para>
                For Ubuntu 14:
              </para>

<programlisting language="bash">
$ <command>sudo a2dissite 000-default</command>
</programlisting>
            </listitem>
          </itemizedlist>

          <para>
            For CentOS hosts, or for non-standard Apache installations, you
            would need to manually adjust the Apache configuration. Such changes
            require familiarity with Apache configuration; for more details,
            see:
            <link xlink:href="https://httpd.apache.org/docs/current/configuring.html"/>
          </para>
        </note>
      </step>

      <step>
        <para>
          Configure the Swarm triggers, on the server hosting your Helix
          Versioning Engine.
        </para>

        <para>
          As the script's output notes, the triggers required for Swarm need
          to be configured if you have not already done so. See 
          <xref linkend="setup.perforce"/> for details.
        </para>
      </step>

      <step>
        <para>
          Review the <xref linkend="setup.post"/> for additional configuration
          alternatives for your Swarm installation.
        </para>
      </step>
    </procedure>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="setup.ova" xml:base="setup/ova_config.xml">
  <title>OVA configuration</title>

  <para>
    Swarm is available as an OVA, an open virtualization appliance that
    requires minimal configuration.
  </para>

  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><note version="5.0" xml:base="../common/note-perforce_service.xml">
  <para>
    A <emphasis>Helix Versioning Engine</emphasis> can refer to a Helix server
    (<command>p4d</command>), proxy, broker, replica, edge server, or commit
    server. It does not refer to a <emphasis>service user</emphasis>; service
    users are used to coordinate replication in a Helix Versioning Engine. For
    simplicity, the term <emphasis>Helix server</emphasis> is used to refer to
    any configuration of a Helix Versioning Engine.
  </para>
</note>

  <para>
    Use the OVA if you want to:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        Simplify the installation and configuration steps
      </para>
    </listitem>

    <listitem>
      <para>
        Experiment with Swarm without using additional hardware
      </para>
    </listitem>

    <listitem>
      <para>
        Install Swarm without having a Linux-based server available
      </para>
    </listitem>
  </itemizedlist>

  <para>
    To use the OVA, follow the instructions on this page and skip to the
    <xref linkend="setup.trigger_token"/> section.
  </para>

  <orderedlist>
    <listitem>
      <para>
        Download the 
        <link xlink:href="https://www.perforce.com/downloads/swarm">Swarm
        OVA</link>.
      </para>
    </listitem>

    <listitem>
      <para>
        Import the OVA into your virtualization environment. See
        <xref linkend="setup.ova.vmware"/>, or
        <xref linkend="setup.ova.virtualbox"/>.
      </para>
    </listitem>

    <listitem>
      <para>
        Start the virtual machine; diagnostic and boot information appears.
      </para>
    </listitem>

    <listitem>
      <para>
        Several configuration prompts appear in sequence:
      </para>

      <para>
        <inlinemediaobject>
          <imageobject condition="frame">
            <imagedata fileref="../../assets/html/images/screen-ova_config.png"/>
          </imageobject>

          <textobject>
            <phrase>Configuring the OVA</phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <orderedlist numeration="loweralpha">
        <listitem>
          <para>
            Password for the root user
          </para>
        </listitem>

        <listitem>
          <para>
            Password for the system <emphasis>swarm</emphasis> user
          </para>
        </listitem>

        <listitem>
          <para>
            Hostname for the virtual machine
          </para>
        </listitem>

        <listitem>
          <para>
            Helix Versioning Engine port (<envar>P4PORT</envar>)
          </para>

          <important>
            <para>
              If your Helix Versioning Engine is deployed using the commit-edge
              architecture, ensure that Swarm's <literal>port</literal> value
              points to the commit server.
            </para>

            <para>
              For more information, see
              "<link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4dist/chapter.distributed.html">Commit-edge Architecture</link>" in the
              <citetitle><link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4dist/index.html">Perforce
              Server Administrator's Guide: Multi-site
              Deployment</link></citetitle>.
            </para>
          </important>
        </listitem>

        <listitem>
          <para>
            Userid of a normal user in the Helix Versioning Engine with
            <emphasis>admin</emphasis> privileges
          </para>
        </listitem>

        <listitem>
          <para>
            Ticket, or password, of the <emphasis>admin-level</emphasis>
            Perforce user
          </para>
        </listitem>

        <listitem>
          <para>
            Mail relay host
          </para>
        </listitem>
      </orderedlist>

      <para>
        Once the prompts have been answered successfully, the virtual machine
        completes its configuration activities. When ready, a welcome screen is
        displayed:
      </para>

      <para>
        <inlinemediaobject>
          <imageobject condition="frame">
            <imagedata fileref="../../assets/html/images/screen-ova_running.png"/>
          </imageobject>

          <textobject>
            <phrase>OVA in operation</phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <para>
        The welcome screen provides URLs to access Swarm, its documentation, and
        the virtual machine management console.
      </para>
    </listitem>

    <listitem>
      <para>
        Update the OVA with security updates and bug fixes:
      </para>

      <orderedlist numeration="loweralpha">
        <listitem>
          <para>
            Use <command>ssh</command> to log into the OVA as the
            <emphasis>root</emphasis> user.
          </para>
        </listitem>

        <listitem>
          <para>
            Enter the following commands to update the OVA's list of packages
            and to apply any available upgrades.
          </para>

<programlisting language="bash">
$ <command>apt-get update</command>
$ <command>apt-get upgrade</command>
</programlisting>

          <para>
            See <xref linkend="admin.ova"/> for more details.
          </para>
        </listitem>
      </orderedlist>
    </listitem>
  </orderedlist>

  <note>
    <para>
      After the OVA is configured and running, you can adjust the configuration
      by using <command>ssh</command> to connect to the virtual machine as the
      system <emphasis>swarm</emphasis> user and editing the
      <xref linkend="setup.swarm"/> file
      <filename>/opt/perforce/swarm/data/config.php</filename>. Swarm's installation
      folder is <filename>/opt/perforce/swarm/</filename>.
    </para>
  </note>

  <para>
    The OVA setup is now complete. Continue with the steps listed in
    <xref linkend="setup.perforce"/> to complete the installation of Swarm.
  </para>


  <section xml:id="setup.ova.vmware">
    <title>VMWare OVA import</title>

    <para>
      The Swarm OVA works with several
      <link xlink:href="https://www.vmware.com/">VMWare</link> virtualization
      products, such as Player, Workstation, or Fusion.
    </para>

    <orderedlist>
      <listitem>
        <para>
          In the VMWare product, select <guimenuitem>File &gt;
          Open</guimenuitem>.
        </para>
      </listitem>

      <listitem>
        <para>
          Browse to the <filename>swarm.ova</filename> file and click
          <guibutton>Open</guibutton>.
        </para>
      </listitem>

      <listitem>
        <para>
          Type a name for the virtual machine, such as
          <emphasis>Swarm</emphasis>, and click <guibutton>Import</guibutton>.
        </para>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="setup.ova.virtualbox">
    <title>Oracle VirtualBox import</title>

    <para>
      The Swarm OVA works with
      <link xlink:href="https://www.virtualbox.org/">Oracle VirtualBox</link>,
      version 4.x+.
    </para>

    <orderedlist>
      <listitem>
        <para>
          In VirtualBox, select <guimenuitem>File &gt; Import
          Appliance...</guimenuitem>
        </para>
      </listitem>

      <listitem>
        <para>
          Click <guibutton>Open Appliance</guibutton>.
        </para>
      </listitem>

      <listitem>
        <para>
          Browse to the <filename>swarm.ova</filename> file and click
          <guibutton>Open</guibutton>,
        </para>
      </listitem>

      <listitem>
        <para>
          Click <guibutton>Continue</guibutton> (might be <guibutton>Next
          &gt;</guibutton> for some versions of VirtualBox)
        </para>
      </listitem>

      <listitem>
        <para>
          Click <guibutton>Import</guibutton>.
        </para>
      </listitem>
    </orderedlist>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="setup.installation" xml:base="setup/installation.xml">
  <title>Initial manual installation</title>

  <procedure>
    <step>
      <para>
        Expand the Swarm package (a <emphasis>compressed
        tarball</emphasis>).
      </para>

      <para>
        Many graphical file manager applications (Nautilus on Linux,
        Finder on Mac, etc.) can automatically expand the Swarm tarball
        package by simply double-clicking it.
      </para>

      <para>
        From the command line, expand it via the tar command:
      </para>

<programlisting language="bash">
$ <command>tar -zxf swarm.tgz</command>
</programlisting>

      <para>
        The contents of the Swarm package are expanded into a top-level
        folder named
        <filename>swarm-<replaceable>version</replaceable></filename>, where
        <replaceable>version</replaceable> corresponds to the version
        downloaded.
      </para>
    </step>

    <step xml:id="setup.installation.swarm_root">
      <para>
        Move the contents of the Swarm package to the correct location.
      </para>

      <para>
        Identify a location for the Swarm files; this should correspond
        to a location associated to the virtual host configured under
        Apache (see <xref linkend="setup.apache"/>).
      </para>

<programlisting language="bash">
$ <command>mv /path/to/swarm-<replaceable>version</replaceable> /path/to/vhosts/swarm</command>
</programlisting>
    </step>

    <step>
      <para>
        Assign correct ownership and permission for the Swarm files.
      </para>

      <para>
        The <literal>data</literal> top-level folder in the Swarm
        distribution needs to be writeable by the web server. To
        achieve this effect, simply change ownership of the
        <literal>data</literal> folder to the web user:
      </para>

<programlisting language="bash">
$ <command>sudo chown -R www /path/to/vhosts/swarm/data</command>
</programlisting>

      <para>
        The <literal>www</literal> user above is an example of what the
        web server user name might be. Depending on your distribution,
        this could be <literal>_www</literal>, <literal>web</literal>,
        <literal>nobody</literal> or something else entirely.
      </para>

      <para>
        If your web server is already running, you can discover the user with:
      </para>

<programlisting language="bash">
$ <command>ps aux | grep -E 'apache|httpd'</command>
root      3592  0.0  0.5 405240 20708 ?        Ss   May03   4:32 /usr/sbin/apache2 -k start
<emphasis role="bold">www</emphasis>      20016  0.0  0.2 405264  9796 ?        S    07:45   0:00 /usr/sbin/apache2 -k start
</programlisting>

      <para>
        In this example, <literal>www</literal> is the user Apache is running
        as.
      </para>


      <para>
        From a security perspective, we recommend that the minimum
        file permissions should be granted to the user/group under
        which the web server runs against the Swarm distribution.
      </para>
    </step>
  </procedure>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="setup.apache" xml:base="setup/apache_config.xml">
  <title>Apache configuration</title>

  <para>
    The configuration of the Apache HTTP Server (Apache) can vary between OS
    distributions; see the documentation specific to your installation of
    Apache. For example, on Mac OS X, you may have to enable Web Sharing within
    the Sharing control panel in System Preferences.
  </para>

  <procedure>
    <step>
      <para>
        Locate your system's Apache configuration.
      </para>

      <para>
        Common configuration directories include:
      </para>

      <itemizedlist>
        <listitem>
          <para>
            <filename>/etc/httpd/conf/</filename>
          </para>
        </listitem>

        <listitem>
          <para>
            <filename>/etc/apache2/</filename>
          </para>
        </listitem>

        <listitem>
          <para>
            <filename>/Applications/XAMPP/etc/</filename>
          </para>
        </listitem>
      </itemizedlist>

      <para>
        Within the configuration path, the main Apache configuration file is
        usually named one of the following:
      </para>

      <itemizedlist>
        <listitem>
          <para>
            <filename>httpd.conf</filename>
          </para>
        </listitem>

        <listitem>
          <para>
            <filename>apache2.conf</filename>
          </para>
        </listitem>
      </itemizedlist>

      <tip>
        <para>
          A longer discussion on the possible locations and names of Apache
          configuration files is available here:
          <literallayout>
</literallayout>
          <link xlink:href="https://wiki.apache.org/httpd/DistrosDefaultLayout"/>
        </para>
      </tip>
    </step>

    <step>
      <para>
        Set up an Apache virtual host (<emphasis>vhost</emphasis>) for your
        installation.
      </para>

      <para>
        If your Apache configuration directory contains the directories 
        <filename>sites-available</filename> and
        <filename>sites-enabled</filename>:
      </para>
      
      <orderedlist numeration="loweralpha">
        <listitem>
          <para>
            Copy the appropriate virtual host definition below into the file
            <filename>sites-available/swarm</filename>.
          </para>
        </listitem>

        <listitem>
          <para>
            Enable the Swarm virtual host definition.
          </para>

<programlisting>
$ <command>sudo a2ensite swarm</command>
</programlisting>
        </listitem>
      </orderedlist>

      <para>
        Otherwise, copy the appropriate virtual host definition below into the
        bottom of the main Apache configuration file,
        <filename>httpd.conf</filename> or <filename>apache2.conf</filename>.
      </para>

      <itemizedlist>
        <listitem>
          <para>
            Virtual host definition example for Apache 2.2:
          </para>

<programlisting language="apache">
&lt;VirtualHost *:80&gt;
    ServerName <replaceable>myswarm.host</replaceable>
    ServerAlias <replaceable>myswarm</replaceable>
    ErrorLog "<replaceable>/path/to/apache/logs</replaceable>/<replaceable>myswarm</replaceable>.error_log"
    CustomLog "<replaceable>/path/to/apache/logs</replaceable>/<replaceable>myswarm</replaceable>.access_log" common
    DocumentRoot "<replaceable>/path/to/swarm</replaceable>/public"
    &lt;Directory "<replaceable>/path/to/swarm</replaceable>/public"&gt;
        AllowOverride All
        Order allow,deny
        Allow from all
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;
</programlisting>
        </listitem>

        <listitem>
          <para>
            Virtual host definition example for Apache 2.4:
          </para>

<programlisting language="apache">
&lt;VirtualHost *:80&gt;
    ServerName <replaceable>myswarm.host</replaceable>
    ServerAlias <replaceable>myswarm</replaceable>
    ErrorLog "<replaceable>/path/to/apache/logs</replaceable>/<replaceable>myswarm</replaceable>.error_log"
    CustomLog "<replaceable>/path/to/apache/logs</replaceable>/<replaceable>myswarm</replaceable>.access_log" common
    DocumentRoot "<replaceable>/path/to/swarm</replaceable>/public"
    &lt;Directory "<replaceable>/path/to/swarm</replaceable>/public"&gt;
        AllowOverride All
        Require all granted
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;
</programlisting>
        </listitem>
      </itemizedlist>

      <tip>
        <para>
          See Apache's virtual host documentation for details:
          <literallayout>
</literallayout>
          <link xlink:href="https://httpd.apache.org/docs/2.2/vhosts/"/>
          <literallayout>
</literallayout>
          <link xlink:href="https://httpd.apache.org/docs/2.4/vhosts/"/>
        </para>
      </tip>
    </step>

    <step>
      <para>
        Customize the virtual host definition.
      </para>

      <orderedlist numeration="loweralpha">
        <listitem>
          <para>
            Replace <replaceable>myswarm.host</replaceable> with the hostname
            for Swarm on your network. This may require adjusting the DNS
            configuration on your network.
          </para>
        </listitem>

        <listitem>
          <para>
            Replace <replaceable>myswarm</replaceable> with the name of the
            subdomain hosting Swarm. Many administrators choose
            <literal>swarm</literal>.
          </para>
          
          <para>
            Note the string <replaceable>myswarm</replaceable> in the log file
            paths: this should match the subdomain name and prefix for the log
            files, to help coordinate the active host with the log files for
            that host. Doing this is particularly useful when your Apache server
            hosts multiple instances of Swarm.
          </para>
        </listitem>

        <listitem>
          <para>
            Replace <replaceable>/path/to/apache/logs</replaceable> with the
            path where your Apache stores its log files. Apache's log files are
            typically named <filename>access_log</filename> and
            <filename>error_log</filename>.
          </para>
        </listitem>

        <listitem>
          <para>
            Replace <replaceable>/path/to/swarm</replaceable> with the path to
            the Swarm directory.
          </para>
        </listitem>
      </orderedlist>
    </step>

    <step>
      <para>
        Verify that the correct Apache modules are enabled.
      </para>

      <itemizedlist>
        <listitem>
          <para>
            To query whether the PHP and Rewrite modules are active, use
            the apachectl utility to list all of the active modules (this
            may be named apache2ctl on your system):
          </para>

<programlisting language="bash">
$ <command>apachectl -t -D DUMP_MODULES</command>
</programlisting>
        </listitem>

        <listitem>
          <para>
            Simply look for <literal>php5_module</literal> and
            <literal>rewrite_module</literal> in the output. If you see them,
            skip ahead to <link linkend="setup.apache.restart">step
            5</link>.
          </para>
        </listitem>

        <listitem>
          <para>
            If your distribution ships with the Apache utility, a2enmod, use
            this to enable the PHP and Rewrite modules:
          </para>

<programlisting language="bash">
$ <command>sudo a2enmod php5 rewrite</command>
</programlisting>
        </listitem>

        <listitem>
          <para>
            Without the a2enmod utility, edit the Apache configuration file by
            hand. Locate your Apache configuration file for modules and either
            uncomment or add the following lines:
          </para>

<programlisting language="apache">
LoadModule  php5_module     libexec/apache2/libphp5.so
LoadModule  rewrite_module  libexec/apache2/mod_rewrite.so
</programlisting>
        </listitem>

        <listitem>
          <para>
            Note that your Apache installation may have different paths for the
            location of its modules (the .so files).
          </para>
        </listitem>
      </itemizedlist>
    </step>

    <step xml:id="setup.apache.restart">
      <para>
        Restart your web server.
      </para>

      <itemizedlist>
        <listitem>
          <para>
            To ensure that the Apache configuration changes you made become
            active, restart the web server.
          </para>

<programlisting language="bash">
$ <command>sudo apachectl restart</command>
</programlisting>
        </listitem>

        <listitem>
          <para>
            Query Apache's active virtual hosts and modules to confirm your
            changes are in effect:
          </para>

<programlisting language="bash">
$ <command>apachectl -t -D DUMP_VHOSTS</command>
$ <command>apachectl -t -D DUMP_MODULES</command>
</programlisting>
        </listitem>
      </itemizedlist>

      <important>
        <para>
          Apache must be configured to use the <literal>prefork</literal>
          <glossterm>MPM</glossterm>, because P4PHP does not support threaded
          operation.
        </para>

        <para>
          The <literal>prefork</literal> <glossterm>MPM</glossterm> is the
          default for Linux and OSX Apache installations, so you may not have to
          do anything.
        </para>

        <para>
          For more information on Apache MPMs and configuration, see:
        </para>

        <para>
          <link xlink:href="https://httpd.apache.org/docs/2.2/mpm.html"/><literallayout>
    </literallayout><link xlink:href="https://httpd.apache.org/docs/2.4/mpm.html"/>
        </para>
      </important>

    </step>
  </procedure>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="setup.php" xml:base="setup/php_config.xml">
  <title>PHP configuration</title>

  <para>
    PHP can vary between OS distributions; see the documentation specific to
    your installation of PHP.
  </para>

  <orderedlist xml:id="setup.php.ini">
    <listitem>
      <para>
        First determine which <filename>php.ini</filename> file is in use by the
        PHP Apache module.  Note that it may not necessarily be the same
        <filename>php.ini</filename> file that is in use when calling PHP from
        the command line (running <command>php --ini</command> from the command
        line reports this).
      </para>

      <para>
        If you're having trouble determining which <filename>php.ini</filename>
        the PHP Apache module is using, create a PHP file that can be served
        through Apache with the following contents:
      </para>

<programlisting language="php">
&lt;?php phpinfo();?&gt;
</programlisting>

      <para>
        Point your browser to this file and look for this table row in the
        resulting table:
      </para>

<programlisting language="bash">
Loaded Configuration File
</programlisting>
    </listitem>

    <listitem>
      <para>
        Ensure that <literal>date.timezone</literal> is set correctly for your
        system.
      </para>

      <para>
        Some distributions do not make a default timezone available to PHP, so
        the best practice to set the timezone for PHP explicitly. See the
        <link xlink:href="https://secure.php.net/manual/en/timezones.php">list of
        supported timezones</link>.
      </para>

      <para>
        An example <literal>date.timezone</literal> setting in
        <filename>php.ini</filename>:
      </para>

<programlisting language="ini">
date.timezone = America/Vancouver
</programlisting>
    </listitem>

    <listitem>
      <para>
        Verify that the iconv, json, and session extensions are present.
      </para>

      <para>
        They are usually enabled by default, although you may have to install
        packages for them through your OS distribution. Verify they are present
        by searching for their respective names in the
        <filename>phpinfo</filename> output above.
      </para>
    </listitem>

    <listitem>
      <para>
        Enable P4PHP, the Perforce extension for PHP:
      </para>

      <para>
        For Swarm to communicate with a Helix Versioning Engine, it needs the
        P4PHP extension. Swarm comes with a number of variants of the P4PHP
        binary, for Linux platforms (32- and 64-bit) and Mac OS X (Darwin), and
        for PHP 5.3, 5.4, and 5.5.
      </para>

      <note>
        <para>
          For Linux, the default variants are compiled with glibc 2.11. We have
          also included PHP 5.3 variants compiled with glibc 2.3.3 to support
          those customers on older distributions, such as Red Hat Enterprise
          Linux 5.9.
        </para>
      </note>

      <para>
        To enable P4PHP, edit the web server's <filename>php.ini</filename> file
        and add the following line:
      </para>

<programlisting language="ini">
extension=/path/to/swarm/p4-bin/bin.<replaceable>&lt;platform&gt;</replaceable>/perforce-<replaceable>&lt;variant&gt;</replaceable>.so
</programlisting>

      <para>
        Example 1: for a 64-bit Linux system running PHP 5.4:
      </para>

<programlisting language="ini">
extension=/path/to/swarm/p4-bin/bin.linux26x86_64/perforce-php54.so
</programlisting>

      <para>
        Example 2: for a 32-bit Linux system running PHP 5.3 with glibc older
        than 2.11:
      </para>

<programlisting language="ini">
extension=/path/to/swarm/p4-bin/bin.linux26x86/perforce-php53-glibc2.3.3.so
</programlisting>

      <para>
        Alternatively, copy the extension file to the default location for PHP
        extensions, and then just add this line instead:
      </para>

<programlisting language="ini">
extension=perforce-<replaceable>&lt;variant&gt;</replaceable>.so
</programlisting>
    </listitem>

    <listitem>
      <para>
        Restart Apache for the changes to become active.
      </para>
    </listitem>

    <listitem>
      <para>
        To verify that P4PHP is active, navigate to the
        <filename>phpinfo</filename> file you
        <link linkend="setup.php.ini">created above</link>. You should
        then see a <literal>perforce</literal> section (search for "Perforce
        Module"). It should report that the module is enabled and display the
        version information.
      </para>
    </listitem>
  </orderedlist>

  <note>
    <para>
      Be aware that any operating system upgrades on the machine hosting Swarm
      may involve updates to PHP. If this occurs, the
      <filename>php.ini</filename> needs to be updated to point to the correct
      <replaceable>variant</replaceable> of P4PHP to match the version of PHP
      that the upgraded operating system is using.
    </para>
  </note>

  <section xml:id="setup.php.apc">
    <title>Alternative PHP Cache (APC) extension for PHP</title>

    <para>
      APC is a free, open, and robust framework for caching and optimizing PHP
      intermediate code. Enabling APC improves Swarm performance by caching
      Swarm's compiled bytecode.
    </para>

    <tip>
      <para>
        For more information, see:<literallayout>
</literallayout><link xlink:href="https://secure.php.net/apc"/><literallayout>
</literallayout><link xlink:href="https://pecl.php.net/package/APC"/>
      </para>
    </tip>

    <orderedlist>
      <listitem>
        <para>
          We recommend that you install APC from your OS distribution, via
          <command>apt-get</command>, <command>yum</command>, etc. If your
          distribution does not offer the APC package for PHP, do so via
          <glossterm linkend="PECL">PECL</glossterm> (although you may have to
          resolve system dependencies):
        </para>

<programlisting language="bash">
$ <command>sudo pecl install apc</command>
</programlisting>
      </listitem>

      <listitem>
        <para>
          Verify that APC is enabled in your PHP Apache module's
          <filename>php.ini</filename> file (as determined in the section
          above for P4PHP). You may need to add the following line:
        </para>

<programlisting language="ini">
extension=apc.so
</programlisting>
      </listitem>

      <listitem>
        <para>
          Restart Apache for the changes to become active.
        </para>
      </listitem>

      <listitem>
        <para>
          To verify that APC is active, navigate to the
          <filename>phpinfo</filename> file you
          <link linkend="setup.php.ini">created above</link>. You should
          then see an <literal>apc</literal> section (you may have to search for
          "APC Support"). It should report its version information and a table
          for its directives.
        </para>

        <para>
          We currently do not have any specific recommendations for which APC
          directives to set.
        </para>

        <warning>
          <para>
            Once you have completed installing and enabling P4PHP and APC, we
            recommend that you remove the <filename>phpinfo</filename> file you
            created to avoid disclosing information about your installation.
          </para>
        </warning>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="setup.php.zendopcache">
    <title>Zend OPCache extension for PHP</title>

    <para>
      Zend OPCache, like APC, improves PHP performance by storing compiled PHP
      code into a cache, removing the need for PHP to load and parse scripts on
      each request.
    </para>

    <para>
      Zend OPCache is bundled with PHP 5.5.x, and is recommended for use instead
      of APC. For PHP versions 5.3 and 5.4, Zend OPCache is not bundled, but is
      available via <glossterm linkend="PECL">PECL</glossterm>.
    </para>

    <tip>
      <para>
        For more information, see:<literallayout>
</literallayout><link xlink:href="https://secure.php.net/opcache"/><literallayout>
</literallayout><link xlink:href="https://pecl.php.net/package/ZendOpcache"/>
      </para>
    </tip>

    <section xml:id="setup.php.zendopcache.install">
      <title>Install Zend OPCache</title>

      <orderedlist>
        <listitem>
          <para>
            We recommend that you install Zend OPCache from your OS
            distribution, via <command>apt-get</command>,
            <command>yum</command>, etc. If your distribution does not offer the
            Zend OPCache package for PHP, do so via
            <glossterm linkend="PECL">PECL</glossterm> (although you may have to
            resolve system dependencies):
          </para>

<programlisting language="bash">
$ <command>sudo pecl install zendopcache</command>
</programlisting>
        </listitem>

        <listitem>
          <para>
            Verify that Zend OPCache is enabled in your PHP Apache module's
            <filename>php.ini</filename> file (as determined in the section
            above for P4PHP). You may need to add the following line:
          </para>

<programlisting language="ini">
zend_extension=/path/to/opcache.so
</programlisting>
        </listitem>

        <listitem>
          <para>
            Restart Apache for the changes to become active.
          </para>
        </listitem>

        <listitem>
          <para>
            To verify that Zend OPCache is active, navigate to the
            <filename>phpinfo</filename> file you
            <link linkend="setup.php.ini">created above</link>. You should
            then see a <literal>Zend OPcache</literal> section. It should report
            its version information and a table for its directives.
          </para>

          <para>
            We currently do not have any specific recommendations for which Zend
            OPCache directives to set.
          </para>

          <warning>
            <para>
              Once you have completed installing and enabling P4PHP and Zend
              OPCache, we recommend that you remove the
              <filename>phpinfo</filename> file you created to avoid disclosing
              information about your installation.
            </para>
          </warning>
        </listitem>
      </orderedlist>
    </section>

    <section xml:id="setup.php.zendopcache.enable">
      <title>Enable Zend OPCache</title>

      <para>
        For PHP 5.5+, while Zend OPCache is included, it may not be enabled. If
        you choose to use it, you may need to add the following line to your PHP
        Apache module's <filename>php.ini</filename> file:
      </para>

<programlisting language="ini">
opcache.enable = 1
</programlisting>

      <para>
        If you have edited <filename>php.ini</filename>, ensure that you restart
        Apache for the changes to become active.
      </para>
    </section>
  </section>

  <section xml:id="setup.php.imagick">
    <title>ImageMagick (imagick) extension for PHP</title>

    <para>
      Imagick is a PHP extension that integrates the ImageMagick graphics
      library's API for the creation and manipulation of images. Enabling
      Imagick improves Swarm's ability to preview graphics formats that web
      browsers typically cannot display.
    </para>

    <tip>
      <para>
        For more information, see:<literallayout>
</literallayout><link xlink:href="https://secure.php.net/imagick"/><literallayout>
</literallayout><link xlink:href="https://pecl.php.net/package/imagick"/>
      </para>
    </tip>

    <orderedlist>
      <listitem>
        <para>
          We recommend that you install Imagick from your OS distribution, via
          <command>apt-get</command>, <command>yum</command>, etc. If your
          distribution does not offer the imagick package for PHP, do so via
          PECL (although you may have to resolve system dependencies):
        </para>

<programlisting language="bash">
$ <command>sudo pecl install imagick</command>
</programlisting>
      </listitem>

      <listitem>
        <para>
          Verify that imagick is enabled in your PHP Apache module's
          <filename>php.ini</filename> file (as determined in the section above
          for P4PHP). You may need to add the following line:
        </para>

<programlisting language="ini">
extension=imagick.so
</programlisting>
      </listitem>

      <listitem>
        <para>
          Restart Apache for the changes to become active.
        </para>
      </listitem>

      <listitem>
        <para>
          To verify that imagick is active, navigate to the
          <filename>phpinfo</filename> file you
          <link linkend="setup.php.ini">created above</link>. You should
          then see an <literal>imagick</literal> section. It should report its
          version information and a table for its directives, supported image
          file formats, and more.
        </para>

        <warning>
          <para>
            Once you have completed installing and enabling P4PHP and imagick,
            we recommend that you remove the <filename>phpinfo</filename> file
            you created to avoid disclosing information about your installation.
          </para>
        </warning>
      </listitem>
    </orderedlist>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="setup.swarm" xml:base="setup/swarm_config.xml">
  <title>Swarm configuration</title>

  <para>
    Now that Swarm is ready for use, you need to configure it to work in your
    environment.
  </para>

  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><note version="5.0" xml:base="../common/note-perforce_service.xml">
  <para>
    A <emphasis>Helix Versioning Engine</emphasis> can refer to a Helix server
    (<command>p4d</command>), proxy, broker, replica, edge server, or commit
    server. It does not refer to a <emphasis>service user</emphasis>; service
    users are used to coordinate replication in a Helix Versioning Engine. For
    simplicity, the term <emphasis>Helix server</emphasis> is used to refer to
    any configuration of a Helix Versioning Engine.
  </para>
</note>

  <section xml:id="setup.swarm.config_file">
    <title>Swarm configuration file</title>

    <para>
      Create a file named <filename>config.php</filename> under the data
      directory with the following contents:
    </para>

<programlisting language="php">
&lt;?php
    return array(
        'p4' =&gt; array(
            'port'      =&gt; '<replaceable>my-helix-versioning-engine:1666</replaceable>',
            'user'      =&gt; '<replaceable>admin_userid</replaceable>',
            'password'  =&gt; '<replaceable>admin user ticket or password</replaceable>',
        ),
        'log' =&gt; array(
            'priority'  =&gt; 3, // 7 for max, defaults to 3
        ),
        'mail' =&gt; array(
            'transport' =&gt; array(
                'host' =&gt; 'my.mx.host',
            ),
        ),
    );
</programlisting>

    <itemizedlist>
      <listitem>
        <para>
          For the <literal>port</literal> value, replace
          <replaceable>my-helix-versioning-engine:1666</replaceable> with the
          <literal>P4PORT</literal> value used to connect to your Helix
          Versioning Engine.
        </para>

        <important>
          <para>
            If your Helix Versioning Engine is deployed using the commit-edge
            architecture, ensure that Swarm's <literal>port</literal> value
            points to the commit server.
          </para>

          <para>
            For more information, see
            "<link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4dist/chapter.distributed.html">Commit-edge Architecture</link>" in the
            <citetitle><link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4dist/index.html">Perforce
            Server Administrator's Guide: Multi-site
            Deployment</link></citetitle>.
          </para>
        </important>

        <warning>
          <para>
            If the <literal>port</literal> points to a Helix Broker, ensure that
            the broker does not delegate commands to different replicas, edge
            servers, or proxies. Such delegation can cause odd problems or
            outright failures in Swarm.
          </para>
          
          <para>
            Swarm needs to have a consistent, current view of the state of the
            Helix Versioning Engine, and works best when it connects to a
            central/commit server.
          </para>
        </warning>
      </listitem>

      <listitem>
        <para>
          For the <literal>user</literal> value, replace
          <replaceable>admin_userid</replaceable> with a normal Perforce userid
          that has <emphasis>admin</emphasis>-level access to the Helix
          Versioning Engine.
        </para>
      </listitem>

      <listitem>
        <para>
          For the <literal>password</literal> value, while a plain-text password
          works, we recommend that you use a ticket value instead. Obtain the
          ticket value for the <replaceable>admin_userid</replaceable> during
          login with this command:
        </para>

<programlisting language="bash">
$ <command>p4 -p <replaceable>my-helix-versioning-engine:1666</replaceable> -u <replaceable>admin_userid</replaceable> login -p</command>
</programlisting>

        <note>
          <para>
            For a Helix Versioning Engine with the <literal>security</literal>
            configurable set to level <literal>3</literal>, or when
            authentication is configured to use LDAP, ticket-based
            authentication is required.
          </para>
        </note>

        <important>
          <para>
            When using ticket-based authentication, ensure that the ticket has a
            very long expiration. We recommend creating a group with an
            <literal>unlimited</literal> timeout, and adding
            <replaceable>admin_userid</replaceable> user to this group.
          </para>
          
          <para>
            An expired ticket causes many Swarm operations to fail.
          </para>
        </important>

        <para>
          You can determine when the <replaceable>admin userid</replaceable>'s
          ticket will expire with:
        </para>

<programlisting language="bash">
$ <command>p4 -p <replaceable>my-helix-versioning-engine:1666</replaceable> -u <replaceable>admin_userid</replaceable> -P <replaceable>ticket_value</replaceable> login -s</command>
</programlisting>

        <tip>
          <para>
            For more information about tickets, see the section
            <link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4sag/chapter.security.html#superuser.basic.auth.tickets">Ticket-based
            authentication</link> in the
            <citetitle><link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4sag/index.html">Helix
            Versioning Engine Administrator Guide:
            Fundamentals</link></citetitle>.
          </para>
        </tip>
      </listitem>

      <listitem>
        <para>
          For the <literal>host</literal> value, replace
          <replaceable>my.mx.host</replaceable> with the hostname of the mail
          exchanger service that Swarm should use to send its email
          notifications.
        </para>
      </listitem>
    </itemizedlist>

    <note>
      <para>
        Since this configuration file contains the credentials for a Perforce
        <emphasis>admin</emphasis>-level user, we recommend that this file's
        ownership and permissions be adjusted such that only the web server user
        can read the file, and that no user can write the file.
      </para>
    </note>
  </section>

  <section xml:id="setup.swarm.optional">
    <title>Optional additional Swarm configuration</title>

    <para>
      Swarm provides optional functionality that could be enabled at this time:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <link linkend="integrations.jira">JIRA integration</link>
        </para>
      </listitem>

      <listitem>
        <para>
          <link linkend="integrations.libreoffice">LibreOffice</link>
        </para>
      </listitem>
    </itemizedlist>

    <section xml:id="setup.swarm.optional.hostname">
      <title>Swarm hostname</title>

      <para>
        Swarm normally auto-detects the hostname it operates under. In some
        system configuration, the auto-detection logic might not choose the
        correct hostname, such as when there are multiple virtual hosts
        configured for a single Swarm instance. When auto-detection chooses the
        wrong hostname, email notifications, worker startup, and more could be
        affected.
      </para>

      <para>
        If you need to specify the Swarm hostname, see
        <xref linkend="admin.environment.hostname"/> for details.
      </para>
    </section>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="setup.trigger_token" xml:base="setup/trigger_token.xml">
  <title>Establish trigger token</title>

  <para>
    Trigger tokens prevent unwanted events from influencing Swarm operations;
    trigger requests to Swarm without a valid token are ignored.
  </para>

  <orderedlist>
    <listitem>
      <para>
        <link linkend="basics.login_logout">Log in</link> to Swarm as a
        <emphasis>super</emphasis> user.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="popup">
            <imagedata fileref="../../assets/html/images/dropdown-userid-closed.png"/>
          </imageobject>

          <textobject>
            <phrase>userid in toolbar</phrase>
          </textobject>
        </inlinemediaobject>

        Click your userid, found at the right of the main toolbar.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="popup">
            <imagedata fileref="../../assets/html/images/dropdown-userid-open-about.png"/>
          </imageobject>

          <textobject>
            <phrase>userid drop-down menu</phrase>
          </textobject>
        </inlinemediaobject>

        Select <guimenuitem>About Swarm</guimenuitem>.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="popup">
            <imagedata fileref="../../assets/html/images/dialog-about_swarm-token.png"/>
          </imageobject>

          <textobject>
            <phrase>About Swarm dialog</phrase>
          </textobject>
        </inlinemediaobject>

        The <emphasis role="bold">About Swarm</emphasis> dialog appears. When
        the <emphasis role="bold">About Swarm</emphasis> dialog is displayed,
        Swarm generates an API token if none exists.
      </para>
    </listitem>

    <listitem>
      <para>
        Note the trigger token value, from the bottom of the dialog, for use in
        the next section. Click the token to select it, which makes it easy to
        copy.
      </para>
    </listitem>
  </orderedlist>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="setup.perforce" xml:base="setup/perforce_config.xml">
  <title>Perforce configuration for Swarm</title>

  <para>
    Now that you have a configured instance of Swarm, the last piece is to
    configure your Helix Versioning Engine to tell Swarm about interesting
    events. This is accomplished through the use of triggers.
  </para>

  <tip>
    <para>
      For more information about Perforce triggers, see:<literallayout>
</literallayout><link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4sag/06_scripting.html">Perforce
      System Administrator's Guide: Scripting Perforce</link>
    </para>
  </tip>

  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><note version="5.0" xml:base="../common/note-perforce_service.xml">
  <para>
    A <emphasis>Helix Versioning Engine</emphasis> can refer to a Helix server
    (<command>p4d</command>), proxy, broker, replica, edge server, or commit
    server. It does not refer to a <emphasis>service user</emphasis>; service
    users are used to coordinate replication in a Helix Versioning Engine. For
    simplicity, the term <emphasis>Helix server</emphasis> is used to refer to
    any configuration of a Helix Versioning Engine.
  </para>
</note>

  <section xml:id="setup.perforce.triggers">
    <title>Using triggers to push events to Swarm</title>

    <para>
      The Helix Versioning Engine provides a facility called
      <emphasis>triggers</emphasis> to customize the operation of the server, or
      to invoke additional processing for specific kinds of versioning
      operations. Swarm provides a trigger script written in Perl that notifies
      Swarm about activity within the Helix Versioning Engine.
    </para>

    <para>
      See <xref linkend="admin.trigger"/> for more information on configuring
      the Perl trigger.
    </para>

    <section xml:id="setup.perforce.triggers.windows">
      <title>Setup Swarm triggers with a Windows-hosted Helix Versioning Engine</title>

      <procedure>
        <step>
          <para>
            Ensure that the required
            <link linkend="setup.dependencies.triggers">trigger
            dependencies</link> have been installed on the machine hosting the
            Helix Versioning Engine.
          </para>
        </step>

        <step>
          <para>
            Install the Swarm trigger script on the Perforce server.
          </para>

          <para>
            If the Swarm trigger script has not already been installed on your
            Perforce server machine, you need to copy
            <filename>p4-bin/scripts/swarm-trigger.pl</filename> from your
            Swarm install to the Perforce server machine so that it can be
            executed by the Perforce server.
          </para>

          <note>
            <para>
              If you are using the Swarm OVA, the full path to the trigger
              script within the OVA's filesystem is:
              <filename>/opt/perforce/swarm/p4-bin/scripts/swarm-trigger.pl</filename>
            </para>
          </note>
        </step>

        <step>
          <para>
            Configure the Swarm trigger script.
          </para>

          <para>
            You need to use the API token established in the
            <xref linkend="setup.trigger_token"/> section.
          </para>

          <para>
            <filename>swarm-trigger.pl</filename> can be configured directly,
            but the preferred approach is to create a configuration file called
            <filename>swarm-trigger.conf</filename>, as using the configuration
            file greatly simplifies upgrades.
            <filename>swarm-trigger.conf</filename> should be created in the
            same directory as <filename>swarm-trigger.pl</filename>.
          </para>

          <para>
            If your Helix Versioning Engine is configure using a commit-edge
            configuration, copy <filename>swarm-trigger.pl</filename> and
            <filename>swarm-trigger.conf</filename> to the commit server and all
            edge servers, making sure that they exist in the same path on all
            servers.
          </para>

          <para>
            The following is a sample of what your
            <filename>swarm-trigger.conf</filename> should contain:
          </para>

          <!-- vim: set ts=2 sw=2 tw=80 ai si: --><programlisting language="ini" version="5.0" xml:base="../common/swarm-trigger.conf.xml">
# SWARM_HOST (required)
# Hostname of your Swarm instance, with leading "http://" or "https://".
SWARM_HOST="<replaceable>http://my-swarm-host</replaceable>"

# SWARM_TOKEN (required)
# The token used when talking to Swarm to offer some security. To obtain the
# value, log in to Swarm as a super user and select 'About Swarm' to see the
# token value.
SWARM_TOKEN="<replaceable>MY-UUID-STYLE-TOKEN</replaceable>"

# ADMIN_USER (optional)
# For enforcing reviewed changes, optionally specify the normal Perforce user
# with admin privileges (to read keys); if not set, will use whatever Perforce
# user is set in environment.
ADMIN_USER=

# ADMIN_TICKET_FILE (optional)
# For enforcing reviewed changes, optionally specify the location of the
# p4tickets file if different from the default ($HOME/.p4tickets).
# Ensure this user is a member of a group with an 'unlimited' or very long
# timeout; then, manually login as this user from the Perforce server machine to
# set the ticket.
ADMIN_TICKET_FILE=
</programlisting>

          <para>
            Modify the <filename>swarm-trigger.conf</filename> configuration
            file to set the <literal>SWARM_HOST</literal> and the
            <literal>SWARM_TOKEN</literal> variables appropriately.
          </para>

          <note>
            <para>
              You may need to edit the trigger script to specify the full path
              to <command>curl.exe</command>.
            </para>
          </note>

          <important>
            <para>
              If you specify <literal>ADMIN_USER</literal>, the ticket contained
              in <filename>%USERPROFILE%/p4tickets.txt</filename> (or the ticket
              file specified with <literal>ADMIN_TICKET_FILE</literal>) must use
              the port that was used to start the Helix Versioning Engine. For
              example, if <command>p4d</command> is started with:
            </para>

<programlisting language="bash">
C:\&gt; <command>p4d -p <replaceable>my-helix-versioning-engine:1666</replaceable> ...</command>
</programlisting>

            <para>
              then the ticket for the <emphasis>admin</emphasis> user specified
              with <literal>ADMIN_USER</literal> should be established with:
            </para>

<programlisting language="bash">
C:\&gt; <command>p4 -p <replaceable>my-helix-versioning-engine:1666</replaceable> -u <replaceable>admin_userid</replaceable> login</command>
</programlisting>

            <para>
              If the ticket was established using the wrong port, the error
              message you encounter includes the <replaceable>port</replaceable>
              that the trigger is attempting to use:
            </para>

<screen>
'swarm.strict.1' validation failed: Invalid login credentials to [<replaceable>port</replaceable>] within this trigger script; please contact your administrator.
</screen>
          </important>
        </step>

        <step xml:id="setup.perforce.verify">
          <para>
            Verify that the trigger script executes correctly.
          </para>

          <para>
            Run:
          </para>

<programlisting language="bash">
C:\&gt; <command>perl "<replaceable>C:\path\to\</replaceable>swarm-trigger.pl" -t ping -v 0</command>
</programlisting>

          <para>
            Use the full path to <command>perl</command> if it is not available
            in your command path.
          </para>

          <para>
            You should expect to see no output. If the trigger is
            misconfigured, such as using an invalid
            <link linkend="setup.trigger_token">trigger token</link>, you
            would see an error.
          </para>

          <warning>
            <para>
              Installation of the triggers may cause a security warning dialog
              to appear when <command>curl.exe</command> executes:
            </para>

            <para>
              <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="../../assets/html/images/dialog-security_warning.png"/>
                </imageobject>

                <textobject>
                  <phrase>Windows security warning.</phrase>
                </textobject>
              </inlinemediaobject>
            </para>

            <para>
              If this occurs, the triggers hang, creating zombie perl
              processes. Due to the way triggers are invoked by the Helix
              Versioning Engine, the dialog is normally not visible even though
              Windows is waiting on interaction.
            </para>

            <para>
              To resolve this:
            </para>

            <procedure>
              <step>
                <para>
                  Uncheck <guibutton>Always ask before opening this
                  file</guibutton> and click <guibutton>Run</guibutton>.
                </para>
              </step>

              <step>
                <para>
                  context-click <command>curl.exe</command>, choose
                  <guimenuitem>Properties</guimenuitem>, and click
                  <guibutton>Unblock</guibutton>.
                </para>
              </step>
            </procedure>
          </warning>
        </step>

        <step>
          <para>
            Update the Perforce triggers table to run the trigger script.
          </para>

          <para>
            As a Perforce user with <emphasis>super</emphasis> privileges, edit
            the Perforce trigger table by running the <command>p4
            triggers</command> command and add the following lines (including
            the initial tab character):
          </para>

<programlisting>
	swarm.job        form-commit   job    "%quote%C:\path\to\perl.exe%quote% %quote%<replaceable>C:\path\to\</replaceable>swarm-trigger.pl%quote% -c %<replaceable>C:\path\to\</replaceable>swarm-trigger.conf% -t job -v %formname%"
	swarm.user       form-commit   user   "%quote%C:\path\to\perl.exe%quote% %quote%<replaceable>C:\path\to\</replaceable>swarm-trigger.pl%quote% -c %<replaceable>C:\path\to\</replaceable>swarm-trigger.conf% -t user -v %formname%"
	swarm.userdel    form-delete   user   "%quote%C:\path\to\perl.exe%quote% %quote%<replaceable>C:\path\to\</replaceable>swarm-trigger.pl%quote% -c %<replaceable>C:\path\to\</replaceable>swarm-trigger.conf% -t userdel -v %formname%"
	swarm.group      form-commit   group  "%quote%C:\path\to\perl.exe%quote% %quote%<replaceable>C:\path\to\</replaceable>swarm-trigger.pl%quote% -c %<replaceable>C:\path\to\</replaceable>swarm-trigger.conf% -t group -v %formname%"
	swarm.groupdel   form-delete   group  "%quote%C:\path\to\perl.exe%quote% %quote%<replaceable>C:\path\to\</replaceable>swarm-trigger.pl%quote% -c %<replaceable>C:\path\to\</replaceable>swarm-trigger.conf% -t groupdel -v %formname%"
	swarm.changesave form-save     change "%quote%C:\path\to\perl.exe%quote% %quote%<replaceable>C:\path\to\</replaceable>swarm-trigger.pl%quote% -c %<replaceable>C:\path\to\</replaceable>swarm-trigger.conf% -t changesave -v %formname%"
	swarm.shelve     shelve-commit //...  "%quote%C:\path\to\perl.exe%quote% %quote%<replaceable>C:\path\to\</replaceable>swarm-trigger.pl%quote% -c %<replaceable>C:\path\to\</replaceable>swarm-trigger.conf% -t shelve -v %change%"
	swarm.commit     change-commit //...  "%quote%C:\path\to\perl.exe%quote% %quote%<replaceable>C:\path\to\</replaceable>swarm-trigger.pl%quote% -c %<replaceable>C:\path\to\</replaceable>swarm-trigger.conf% -t commit -v %change%"
#	swarm.enforce.1 change-submit  //DEPOT_PATH1/... "%quote%C:\path\to\perl.exe%quote% %quote%<replaceable>C:\path\to\</replaceable>swarm-trigger.pl%quote% -c %<replaceable>/path/to/</replaceable>swarm-trigger.conf% -t enforce -v %change% -p %serverport%"
#	swarm.enforce.2 change-submit  //DEPOT_PATH2/... "%quote%C:\path\to\perl.exe%quote% %quote%<replaceable>C:\path\to\</replaceable>swarm-trigger.pl%quote% -c %<replaceable>/path/to/</replaceable>swarm-trigger.conf% -t enforce -v %change% -p %serverport%"
#	swarm.strict.1  change-content //DEPOT_PATH1/... "%quote%C:\path\to\perl.exe%quote% %quote%<replaceable>C:\path\to\</replaceable>swarm-trigger.pl%quote% -c %<replaceable>/path/to/</replaceable>swarm-trigger.conf% -t strict -v %change% -p %serverport%"
#	swarm.strict.2  change-content //DEPOT_PATH2/... "%quote%C:\path\to\perl.exe%quote% %quote%<replaceable>C:\path\to\</replaceable>swarm-trigger.pl%quote% -c %<replaceable>/path/to/</replaceable>swarm-trigger.conf% -t strict -v %change% -p %serverport%"
  </programlisting>

          <para>
            Update the <command>perl.exe</command>, trigger script, and
            configuration file paths in each line above to reflect the actual
            paths on your Perforce server.
          </para>

          <important>
            <para>
              If your Helix Versioning Engine has SSL enabled and is older than
              the 2014.1 release, the <literal>%serverport%</literal> trigger
              variable does not include the necessary transport indicator, which
              can cause the <literal>enforce</literal> and
              <literal>strict</literal> triggers to fail.
            </para>

            <para>
              To solve this problem, add <literal>ssl:</literal> immediately
              before <literal>%serverport%</literal> in the trigger lines. For
              example:
            </para>

<programlisting>
#	swarm.enforce.1 change-submit  //DEPOT_PATH1/... "%quote%C:\path\to\perl.exe%quote% %quote%<replaceable>C:\path\to\</replaceable>swarm-trigger.pl%quote% -c %<replaceable>/path/to/</replaceable>swarm-trigger.conf% -t enforce -v %change% -p ssl:%serverport%"
#	swarm.enforce.2 change-submit  //DEPOT_PATH2/... "%quote%C:\path\to\perl.exe%quote% %quote%<replaceable>C:\path\to\</replaceable>swarm-trigger.pl%quote% -c %<replaceable>/path/to/</replaceable>swarm-trigger.conf% -t enforce -v %change% -p ssl:%serverport%"
#	swarm.strict.1  change-content //DEPOT_PATH1/... "%quote%C:\path\to\perl.exe%quote% %quote%<replaceable>C:\path\to\</replaceable>swarm-trigger.pl%quote% -c %<replaceable>/path/to/</replaceable>swarm-trigger.conf% -t strict -v %change% -p %ssl:serverport%"
#	swarm.strict.2  change-content //DEPOT_PATH2/... "%quote%C:\path\to\perl.exe%quote% %quote%<replaceable>C:\path\to\</replaceable>swarm-trigger.pl%quote% -c %<replaceable>/path/to/</replaceable>swarm-trigger.conf% -t strict -v %change% -p %ssl:serverport%"
</programlisting>
          </important>

          <warning>
            <para>
              The use of <literal>%quote%</literal> is not supported on 2010.2
              servers (it is harmless though); if you are using this version,
              ensure that you do not have any spaces in the path to
              <command>perl.exe</command> or the script's path.
            </para>
          </warning>

          <note>
            <para>
              The last four trigger lines are commented out as they are
              optional, and require that the <literal>DEPOT_PATH1</literal> and
              <literal>DEPOT_PATH2</literal> values are configured
              appropriately.
            </para>

            <itemizedlist>
              <listitem>
                <para>
                  The first two lines configure the <emphasis>enforce</emphasis>
                  feature, which rejects any submitted changes that are not tied
                  to an approved review.
                </para>
              </listitem>

              <listitem>
                <para>
                  The second two lines configure the <emphasis>strict</emphasis>
                  feature, which rejects any submitted changes when the contents
                  of the changelist do not match the contents of its associated
                  approved review.
                </para>
              </listitem>
            </itemizedlist>

            <para>
              If you need to apply <emphasis>enforce</emphasis> or
              <emphasis>strict</emphasis> to more depot paths, copy the lines
              and tweak their depot paths as necessary.
            </para>
          </note>

          <tip>
            <para>
              The trigger script can provide the list of trigger lines that
              should work, with little to no adjustment, by executing it with
              the <option>-o</option> option:
            </para>

<programlisting language="bash">
C:\&gt; <command>perl "<replaceable>C:\path\to\</replaceable>swarm-trigger.pl" -o</command>
</programlisting>
          </tip>
        </step>

        <step>
          <para>
            Configure the Helix Versioning Engine to promote all shelved changes.
          </para>

<programlisting language="bash">
C:\&gt; <command>p4 configure set dm.shelve.promote=1</command>
</programlisting>

          <para>
            When this configurable is set, Swarm has access to all shelved
            changelists, which is a requirement for pre-commit reviews. When it
            is not set, users connected to an edge server must remember to use
            the <option>-p</option> option when shelving files to promote their
            shelves to the commit server when initiating a pre-commit review.
          </para>
        </step>
      </procedure>
    </section>

    <section xml:id="setup.perforce.triggers.linux">
      <title>Setup Swarm triggers with a Linux-hosted Helix Versioning Engine</title>

      <procedure>
        <step>
          <para>
            Ensure that the required
            <link linkend="setup.dependencies.triggers">trigger
            dependencies</link> have been installed on the machine hosting the
            Helix Versioning Engine.
          </para>
        </step>

        <step>
          <para>
            Copy the perl trigger to the Helix Versioning Engine.
          </para>

          <para>
            If your Helix Versioning Engine is version 2014.1 (or newer), we
            recommend submitting the trigger file,
            <filename>p4-bin/scripts/swarm-trigger.pl</filename>, to Perforce
            and running it from the depot. The recommended depot location would
            be <filename>//.swarm/triggers/swarm-trigger.pl</filename>,
            especially if you have already setup
            <xref linkend="admin.comment_attachments"/>.
          </para>

          <para>
            If your Helix Versioning Engine is older than version 2014.1, or
            prefer that the trigger exist in the filesystem, you must copy the
            <filename>p4-bin/scripts/swarm-trigger.pl</filename> script to the
            server hosting the Helix Versioning Engine. If your Helix Versioning
            Engine deployment uses the commit-edge architecture, the script must
            also be copied to all edge servers, and it must exist in the same
            path on all servers.
          </para>

          <note>
            <para>
              If you are using the Swarm OVA, the full path to the trigger
              script within the OVA's filesystem is:
              <filename>/opt/perforce/swarm/p4-bin/scripts/swarm-trigger.pl</filename>
            </para>
          </note>
        </step>

        <step>
          <para>
            Configure the Perl trigger.
          </para>

          <para>
            You need to use the API token established in the
            <xref linkend="setup.trigger_token"/> section.
          </para>

          <para>
            <filename>swarm-trigger.pl</filename> can be configured directly,
            but the preferred approach is to create a configuration file called
            <filename>swarm-trigger.conf</filename>, as using the configuration
            file greatly simplifies upgrades.
          </para>

          <para>
            If you are using the Swarm triggers package described in
            <xref linkend="setup.packages"/>, the file is available at
            <filename>/opt/perforce/etc/swarm-trigger.conf</filename>, 
            otherwise create <filename>swarm-trigger.conf</filename> in the same
            directory as <filename>swarm-trigger.pl</filename>.
          </para>

          <para>
            If you submitted the trigger script to the depot in the previous
            step, you should similarly submit the configuration file to the
            depot. The recommended path is
            <filename>//.swarm/triggers/swarm-trigger.conf</filename>.
          </para>

          <para>
            If you copied the trigger script to the commit server and all edge
            servers in the previous step, also copy the configuration file to
            the commit server and all edge servers, making sure that it exists
            in the same path on all servers.
          </para>

          <para>
            The following is a sample of what your
            <filename>swarm-trigger.conf</filename> should contain:
          </para>

<programlisting language="ini">
# SWARM_HOST (required)
# Hostname of your Swarm instance, with leading "http://" or "https://".
SWARM_HOST="<replaceable>https://my-swarm-host</replaceable>"

# SWARM_TOKEN (required)
# The token used when talking to Swarm to offer some security. To obtain the
# value, log in to Swarm as a super user and select 'About Swarm' to see the
# token value.
SWARM_TOKEN="<replaceable>MY-UUID-STYLE-TOKEN</replaceable>"

# ADMIN_USER (optional)
# For enforcing reviewed changes, optionally specify the normal Perforce user
# with admin privileges (to read keys); if not set, will use whatever Perforce
# user is set in environment.
ADMIN_USER=

# ADMIN_TICKET_FILE (optional)
# For enforcing reviewed changes, optionally specify the location of the
# p4tickets file if different from the default ($HOME/.p4tickets).
# Ensure this user is a member of a group with an 'unlimited' or very long
# timeout; then, manually login as this user from the Perforce server machine to
# set the ticket.
ADMIN_TICKET_FILE=
</programlisting>

          <para>
            Modify the <filename>swarm-trigger.conf</filename> configuration
            file to set the <literal>SWARM_HOST</literal> and the
            <literal>SWARM_TOKEN</literal> variables appropriately.
          </para>

          <note>
            <para>
              <filename>swarm-trigger.pl</filename> looks for configuration
              in the following files. Variables defined in the later files
              will override the earlier defined variables of the same name:
            </para>

            <itemizedlist>
              <listitem>
                <para>
                  Variables set inside the
                  <filename>swarm-trigger.pl</filename> script itself
                </para>
              </listitem>

              <listitem>
                <para>
                  <filename>/etc/perforce/swarm-trigger.conf</filename>
                </para>
              </listitem>

              <listitem>
                <para>
                  <filename>/opt/perforce/etc/swarm-trigger.conf</filename>
                </para>
              </listitem>

              <listitem>
                <para>
                  The <filename>swarm-trigger.conf</filename> file stored in
                  the same directory as
                  <filename>swarm-trigger.pl</filename>
                </para>
              </listitem>

              <listitem>
                <para>
                  Any file passed to the
                  <filename>swarm-trigger.pl</filename> script using the
                  <parameter>-c</parameter> command line argument.
                </para>
              </listitem>
            </itemizedlist>
          </note>

          <important>
            <para>
              If you specify <literal>ADMIN_USER</literal>, the ticket contained
              in <filename>$HOME/.p4tickets</filename> (or the ticket file
              specified with <literal>ADMIN_TICKET_FILE</literal>) must use the
              port that was used to start the Helix Versioning Engine. For
              example, if <command>p4d</command> is started with:
            </para>

<programlisting language="bash">
$ <command>p4d -p <replaceable>my-helix-versioning-engine:1666</replaceable> ...</command>
</programlisting>

            <para>
              then the ticket for the <emphasis>admin</emphasis> user specified
              with <literal>ADMIN_USER</literal> should be established with:
            </para>

<programlisting language="bash">
$ <command>p4 -p <replaceable>my-helix-versioning-engine:1666</replaceable> -u <replaceable>admin_userid</replaceable> login</command>
</programlisting>

            <para>
              If the ticket was established using the wrong port, the error
              message you encounter includes the <replaceable>port</replaceable>
              that the trigger is attempting to use:
            </para>

<screen>
'swarm.strict.1' validation failed: Invalid login credentials to [<replaceable>port</replaceable>] within this trigger script; please contact your administrator.
</screen>
          </important>
        </step>

        <step>
          <para>
            Ensure that the script has execute permissions.
          </para>

          <important>
            <para>
              Skip this step if you have committed the script to the Helix
              Versioning Engine.
            </para>
          </important>

<programlisting language="bash">
$ <command>chmod +x <replaceable>/path/to/</replaceable>swarm-trigger.pl</command>
</programlisting>
        </step>

        <step>
          <para>
            Verify that the trigger script executes correctly.
          </para>

          <important>
            <para>
              Skip this step if you have committed the script to the Helix
              Versioning Engine.
            </para>
          </important>

<programlisting language="bash">
$ <command><replaceable>/path/to/</replaceable>swarm-trigger.pl -t ping -v 0</command>
</programlisting>

          <note>
            <para>
              Run the trigger script without any arguments to see additional
              usage information.
            </para>
          </note>
        </step>

        <step>
          <para>
            Update the Perforce triggers table to run the Perl trigger.
          </para>

          <para>
            As a Perforce user with <emphasis>super</emphasis> privileges, edit
            the Perforce triggers table by running the <command>p4
            triggers</command> command and add the appropriate set of lines
            (including the initial tab character):
          </para>

          <orderedlist numeration="loweralpha">
            <listitem>
              <para>
                If you have committed both the trigger script and the configuration
                file to the Helix Versioning Engine:
              </para>

<programlisting>
	swarm.job        form-commit   job    "%//.swarm/triggers/swarm-trigger.pl% -c %//.swarm/triggers/swarm-trigger.conf% -t job        -v %formname%"
	swarm.user       form-commit   user   "%//.swarm/triggers/swarm-trigger.pl% -c %//.swarm/triggers/swarm-trigger.conf% -t user       -v %formname%"
	swarm.userdel    form-delete   user   "%//.swarm/triggers/swarm-trigger.pl% -c %//.swarm/triggers/swarm-trigger.conf% -t userdel    -v %formname%"
	swarm.group      form-commit   group  "%//.swarm/triggers/swarm-trigger.pl% -c %//.swarm/triggers/swarm-trigger.conf% -t group      -v %formname%"
	swarm.groupdel   form-delete   group  "%//.swarm/triggers/swarm-trigger.pl% -c %//.swarm/triggers/swarm-trigger.conf% -t groupdel   -v %formname%"
	swarm.changesave form-save     change "%//.swarm/triggers/swarm-trigger.pl% -c %//.swarm/triggers/swarm-trigger.conf% -t changesave -v %formname%"
	swarm.shelve     shelve-commit //...  "%//.swarm/triggers/swarm-trigger.pl% -c %//.swarm/triggers/swarm-trigger.conf% -t shelve     -v %change%"
	swarm.commit     change-commit //...  "%//.swarm/triggers/swarm-trigger.pl% -c %//.swarm/triggers/swarm-trigger.conf% -t commit     -v %change%"
#	swarm.enforce.1 change-submit  //DEPOT_PATH1/... "%//.swarm/triggers/swarm-trigger.pl% -c %//.swarm/triggers/swarm-trigger.conf% -t enforce -v %change% -p %serverport%"
#	swarm.enforce.2 change-submit  //DEPOT_PATH2/... "%//.swarm/triggers/swarm-trigger.pl% -c %//.swarm/triggers/swarm-trigger.conf% -t enforce -v %change% -p %serverport%"
#	swarm.strict.1  change-content //DEPOT_PATH1/... "%//.swarm/triggers/swarm-trigger.pl% -c %//.swarm/triggers/swarm-trigger.conf% -t strict -v %change% -p %serverport%"
#	swarm.strict.2  change-content //DEPOT_PATH2/... "%//.swarm/triggers/swarm-trigger.pl% -c %//.swarm/triggers/swarm-trigger.conf% -t strict -v %change% -p %serverport%"
</programlisting>
            </listitem>

            <listitem>
              <para>
                If you have copied the trigger script and configuration file to
                common paths on all servers:
              </para>

<programlisting>
	swarm.job        form-commit   job    "%quote%<replaceable>/path/to/</replaceable>swarm-trigger.pl%quote% -c %quote%<replaceable>/path/to/</replaceable>swarm-trigger.conf%quote% -t job        -v %formname%"
	swarm.user       form-commit   user   "%quote%<replaceable>/path/to/</replaceable>swarm-trigger.pl%quote% -c %quote%<replaceable>/path/to/</replaceable>swarm-trigger.conf%quote% -t user       -v %formname%"
	swarm.userdel    form-delete   user   "%quote%<replaceable>/path/to/</replaceable>swarm-trigger.pl%quote% -c %quote%<replaceable>/path/to/</replaceable>swarm-trigger.conf%quote% -t userdel    -v %formname%"
	swarm.group      form-commit   group  "%quote%<replaceable>/path/to/</replaceable>swarm-trigger.pl%quote% -c %quote%<replaceable>/path/to/</replaceable>swarm-trigger.conf%quote% -t group      -v %formname%"
	swarm.groupdel   form-delete   group  "%quote%<replaceable>/path/to/</replaceable>swarm-trigger.pl%quote% -c %quote%<replaceable>/path/to/</replaceable>swarm-trigger.conf%quote% -t groupdel   -v %formname%"
	swarm.changesave form-save     change "%quote%<replaceable>/path/to/</replaceable>swarm-trigger.pl%quote% -c %quote%<replaceable>/path/to/</replaceable>swarm-trigger.conf%quote% -t changesave -v %formname%"
	swarm.shelve     shelve-commit //...  "%quote%<replaceable>/path/to/</replaceable>swarm-trigger.pl%quote% -c %quote%<replaceable>/path/to/</replaceable>swarm-trigger.conf%quote% -t shelve     -v %change%"
	swarm.commit     change-commit //...  "%quote%<replaceable>/path/to/</replaceable>swarm-trigger.pl%quote% -c %quote%<replaceable>/path/to/</replaceable>swarm-trigger.conf%quote% -t commit     -v %change%"
#	swarm.enforce.1 change-submit  //DEPOT_PATH1/... "%quote%<replaceable>/path/to/</replaceable>swarm-trigger.pl%quote% -c %quote%<replaceable>/path/to/</replaceable>swarm-trigger.conf%quote% -t enforce -v %change% -p %serverport%"
#	swarm.enforce.2 change-submit  //DEPOT_PATH2/... "%quote%<replaceable>/path/to/</replaceable>swarm-trigger.pl%quote% -c %quote%<replaceable>/path/to/</replaceable>swarm-trigger.conf%quote% -t enforce -v %change% -p %serverport%"
#	swarm.strict.1  change-content //DEPOT_PATH1/... "%quote%<replaceable>/path/to/</replaceable>swarm-trigger.pl%quote% -c %quote%<replaceable>/path/to/</replaceable>swarm-trigger.conf%quote% -t strict -v %change% -p %serverport%"
#	swarm.strict.2  change-content //DEPOT_PATH2/... "%quote%<replaceable>/path/to/</replaceable>swarm-trigger.pl%quote% -c %quote%<replaceable>/path/to/</replaceable>swarm-trigger.conf%quote% -t strict -v %change% -p %serverport%"
</programlisting>

              <para>
                Update the trigger script and configuration file paths in each
                line above to reflect the actual paths on your Perforce server.
              </para>

              <important>
                <para>
                  If your Helix Versioning Engine has SSL enabled and is older
                  than the 2014.1 release, the <literal>%serverport%</literal>
                  trigger variable does not include the necessary transport
                  indicator, which can cause the <literal>enforce</literal> and
                  <literal>strict</literal> triggers to fail.
                </para>

                <para>
                  To solve this problem, add <literal>ssl:</literal> immediately
                  before <literal>%serverport%</literal> in the trigger lines. For
                  example:
                </para>

<programlisting>
#	swarm.enforce.1 change-submit  //DEPOT_PATH1/... "%quote%<replaceable>/path/to/</replaceable>swarm-trigger.pl%quote% -c %//.swarm/trigggers/swarm-trigger.conf% -t enforce -v %change% -p ssl:%serverport%"
#	swarm.enforce.2 change-submit  //DEPOT_PATH2/... "%quote%<replaceable>/path/to/</replaceable>swarm-trigger.pl%quote% -c %//.swarm/trigggers/swarm-trigger.conf% -t enforce -v %change% -p ssl:%serverport%"
#	swarm.strict.1  change-content //DEPOT_PATH1/... "%quote%<replaceable>/path/to/</replaceable>swarm-trigger.pl%quote% -c %//.swarm/trigggers/swarm-trigger.conf% -t strict -v %change% -p ssl:%serverport%"
#	swarm.strict.2  change-content //DEPOT_PATH2/... "%quote%<replaceable>/path/to/</replaceable>swarm-trigger.pl%quote% -c %//.swarm/trigggers/swarm-trigger.conf% -t strict -v %change% -p ssl:%serverport%"
</programlisting>
              </important>

            </listitem>
          </orderedlist>

          <note>
            <para>
              The last four trigger lines in either block are commented out as
              they are optional, and require that the
              <literal>DEPOT_PATH1</literal> and <literal>DEPOT_PATH2</literal>
              values are configured appropriately.
            </para>

            <itemizedlist>
              <listitem>
                <para>
                  The first two lines configure the <emphasis>enforce</emphasis>
                  feature, which rejects any submitted changes that are not tied
                  to an approved review.
                </para>
              </listitem>

              <listitem>
                <para>
                  The second two lines configure the <emphasis>strict</emphasis>
                  feature, which rejects any submitted changes when the contents
                  of the changelist do not match the contents of its associated
                  approved review.
                </para>
              </listitem>
            </itemizedlist>

            <para>
              If you need to apply <emphasis>enforce</emphasis> or
              <emphasis>strict</emphasis> to more depot paths, copy the lines
              and tweak their depot paths as necessary.
            </para>
          </note>

          <tip>
            <para>
              The trigger script can provide the list of trigger lines that
              should work, with little to no adjustment, by executing it with
              the <option>-o</option> option:
            </para>

<programlisting language="bash">
$ <command><replaceable>/path/to/</replaceable>swarm-trigger.pl -o</command>
</programlisting>
          </tip>

        </step>

        <step>
          <para>
            Configure the Helix Versioning Engine to promote all shelved changes.
          </para>

<programlisting language="bash">
$ <command>p4 configure set dm.shelve.promote=1</command>
</programlisting>

          <para>
            When this configurable is set, Swarm has access to all shelved
            changelists, which is a requirement for pre-commit reviews. When it
            is not set, users connected to an edge server must remember to use
            the <option>-p</option> option when shelving files to promote their
            shelves to the commit server when initiating a pre-commit review.
          </para>
        </step>
      </procedure>
    </section>
  </section>

  <section xml:id="setup.perforce.dm_keys">
    <title>Hiding Swarm storage from regular users</title>

    <para>
      Swarm information storage uses the Helix Versioning Engine's
      <emphasis>keys</emphasis> facility. By default, users with
      <emphasis>list</emphasis>-level access can search keys and potentially
      obtain information they would not otherwise have access to, and users with
      <emphasis>review</emphasis>-level access can write or modify keys
      potentially corrupting or destroying data.
    </para>

    <para>
      We recommend that you set the <literal>dm.keys.hide</literal> configurable
      to <literal>2</literal> to require <emphasis>admin</emphasis>-level access
      for searching and modifying keys. Note that <literal>dm.keys.hide</literal>
      is available in Perforce server versions 2013.1 and newer.
    </para>

    <para>
      When <literal>dm.keys.hide</literal> is set to <literal>2</literal>, both
      the p4 keys and p4 key commands require <emphasis>admin</emphasis>-level
      access in the Helix Versioning Engine. When
      <literal>dm.keys.hide</literal> is set to <literal>1</literal>, only the
      p4 keys command requires <emphasis>admin</emphasis>-level access in the
      Helix Versioning Engine. When <literal>dm.keys.hide</literal> is set to
      <literal>1</literal>, or is not set, users who know (or can deduce) key
      names can read values (if they have <emphasis>list</emphasis>-level
      access) or write values (if they have <emphasis>review</emphasis>-level
      access) with the p4 key command.
    </para>

    <para>
      To set <literal>dm.keys.hide</literal>:
    </para>

<programlisting language="bash">
$ <command>p4 configure set dm.keys.hide=2</command>
</programlisting>

    <para>
      To confirm the current value of <literal>dm.keys.hide</literal>:
    </para>

<programlisting language="bash">
$ <command>p4 configure show dm.keys.hide</command>
</programlisting>

    <para>
      To unset <literal>dm.keys.hide</literal>:
    </para>

<programlisting language="bash">
$ <command>p4 configure unset dm.keys.hide</command>
</programlisting>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="setup.worker" xml:base="setup/worker_config.xml">
  <title>Set up a recurring task to spawn workers</title>

  <para>
    To ensure that incoming Perforce events are automatically processed by
    Swarm, it is important to set up a cron job to do this. The cron job
    can be installed on any host, although you may want to place this on
    the Swarm host.
  </para>

  <warning>
    <para>
      <command>curl</command> or <command>wget</command> must be installed
      or workers do not spawn and Swarm cannot process any events. See
      <link linkend="setup.worker.verification">below</link> for
      verification steps.
    </para>
  </warning>

  <orderedlist>
    <listitem>
      <para>
        Create a file named <literal>helix-swarm</literal> in
        <filename>/etc/cron.d</filename>.
      </para>
    </listitem>

    <listitem>
      <para>
        Edit <filename>/etc/cron.d/helix-swarm</filename> to contain
        <emphasis role="bold">one</emphasis> of the following blocks; select a
        block depending on whether your system has <command>curl</command> or
        <command>wget</command> installed.
      </para>

      <itemizedlist>
        <listitem>
          <para>
            If you have <command>curl</command> installed:
          </para>

<programlisting language="bash">
# This ensures that a worker is fired up every minute
* * * * * nobody curl -so /dev/null -m5 https://<replaceable>myswarm.url</replaceable>/queue/worker
</programlisting>
        </listitem>

        <listitem>
          <para>
            If you have <command>wget</command> installed:
          </para>

<programlisting language="bash">
# This ensures that a worker is fired up every minute
* * * * * nobody wget -q -O /dev/null -T5 https://<replaceable>myswarm.url</replaceable>/queue/worker
</programlisting>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>
        Replace <emphasis>myswarm.url</emphasis> above with the actual URL you
        have configured for Swarm (which may include a
        <link linkend="setup.post.subfolder">sub-folder</link> or a
        <link linkend="setup.post.port">custom port</link>).
      </para>

      <para>
        If the cron job is running on the Swarm host, and you have specified the
        correct <literal>hostname</literal> item in the
        <xref linkend="admin.environment"/> configuration, this can be set to
        <literal>localhost</literal>.
      </para>

      <para>
        In the example configuration lines above, where you see
        <parameter>-m5</parameter> or <parameter>-T5</parameter>, the
        <literal>5</literal> is the number of seconds that the cron task will
        wait for a response from the Swarm host. When the cron task is installed
        on the Swarm host, such as in the Swarm OVA, that value could be reduced
        to 1 seconds (e.g. <parameter>-m1</parameter> or
        <parameter>-T1</parameter>).
      </para>

      <note>
        <para>
          If you configure Swarm to use HTTPS, and you install a self-signed
          certificate, the cron jobs need to be adjusted to avoid certificate
          validity test which could cause silent failures to process events.
        </para>

        <itemizedlist>
          <listitem>
            <para>
              If you have <command>curl</command> installed:
            </para>

<programlisting language="bash">
# This ensures that a worker is fired up every minute
* * * * * nobody curl -so /dev/null <emphasis role="bold">--insecure</emphasis> -m5 https://<replaceable>myswarm.url</replaceable>/queue/worker
</programlisting>
          </listitem>

          <listitem>
            <para>
              If you have <command>wget</command> installed:
            </para>

<programlisting language="bash">
# This ensures that a worker is fired up every minute
* * * * * nobody wget -q -O /dev/null <emphasis role="bold">--no-check-certificate</emphasis> -T5 https://<replaceable>myswarm.url</replaceable>/queue/worker
</programlisting>
          </listitem>
        </itemizedlist>
      </note>
    </listitem>

    <listitem>
      <para>
        Save the edited file.
      </para>
    </listitem>
  </orderedlist>

  <para>
    You are now all set to start using Swarm. Enjoy!
  </para>

  <note>
    <para>
      If the recurring task is disabled, or stops functioning for any reason,
      logged-in users see the following error message when Swarm detects that no
      workers are running:
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="frame">
          <imagedata fileref="../../assets/html/images/screen-no_workers.png"/>
        </imageobject>

        <textobject>
          <phrase>
            The error message that appears when there are no running workers.
          </phrase>
        </textobject>
      </inlinemediaobject>
    </para>
  </note>

  <section xml:id="setup.worker.verification">
    <title>curl/wget verification</title>

    <para>
      The cron job depends on having <command>curl</command> or
      <command>wget</command> installed, as indicated in
      <xref linkend="setup.dependencies"/>.
    </para>

    <para>
      To verify that <command>curl</command> or <command>wget</command> is
      installed, use the which command. For example:
    </para>

<programlisting language="bash">
$ <command>which curl</command>
</programlisting>

    <para>
      If you see any output, the referenced command is installed.
    </para>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="setup.post" xml:base="setup/post_install.xml">
  <title>Post-install configuration options</title>

  <para>
    There are a few options for customizing your Swarm installation's operation.
    This section covers the options that are officially supported:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        <xref linkend="setup.post.ssl"/>
      </para>
    </listitem>

    <listitem>
      <para>
        <xref linkend="setup.post.subfolder"/>
      </para>
    </listitem>

    <listitem>
      <para>
        <xref linkend="setup.post.port"/>
      </para>
    </listitem>
  </itemizedlist>

  <para>
    Before undertaking any of the following customization options, ensure that
    you have backed up your Swarm virtual host configuration. Choose the most
    appropriate option:
  </para>

  <itemizedlist xml:id="setup.post.backup">
    <listitem>
      <para>
        If your Apache configuration directory contains the directories
        <filename>sites-available</filename> and
        <filename>sites-enabled</filename>:
      </para>

<programlisting language="bash">
$ <command>cd <replaceable>/path/to/apache/configuration</replaceable>/..</command>
$ <command>cp -a sites-available sites-available.bak</command>
</programlisting>

      <important>
        <para>
          If the <filename>sites-enabled</filename> directory contains files,
          and not just symbolic links, you need to backup this folder as well:
        </para>

<programlisting language="bash">
$ <command>cd <replaceable>/path/to/apache/configuration</replaceable>/..</command>
$ <command>cp -a sites-enabled sites-enabled.bak</command>
</programlisting>
      </important>
    </listitem>

    <listitem>
      <para>
        For CentOS/RHEL systems, if you used the
        <link linkend="setup.packages">Swarm packages</link> to
        install Swarm:
      </para>

<programlisting language="bash">
$ <command>cd <replaceable>/path/to/apache/configuration</replaceable>/..</command>
$ <command>cp -a conf.d conf.d.bak</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        Otherwise, backup your Apache configuration.
      </para>
    </listitem>
    </itemizedlist>

  <section xml:id="setup.post.ssl">
    <title>HTTPS</title>

    <para>
      This section describes how to make your Swarm installation more secure by
      using HTTPS.
    </para>

    <para>
      Before you begin the following procedure, locate your system's Apache
      configuration. Common configuration directories include:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <filename>/etc/httpd/conf/</filename>
        </para>
      </listitem>

      <listitem>
        <para>
          <filename>/etc/apache2/</filename>
        </para>
      </listitem>

      <listitem>
        <para>
          <filename>/Applications/XAMPP/etc/</filename>
        </para>
      </listitem>
    </itemizedlist>

    <para>
      Within the Apache configuration path, the main Apache configuration file
      is usually named one of the following:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <filename>httpd.conf</filename>
        </para>
      </listitem>

      <listitem>
        <para>
          <filename>apache2.conf</filename>
        </para>
      </listitem>
    </itemizedlist>

    <tip>
      <para>
        A longer discussion on the possible locations and names of Apache
        configuration files is available here:<literallayout>
</literallayout>
        <link xlink:href="https://wiki.apache.org/httpd/DistrosDefaultLayout"/>
      </para>
    </tip>

    <procedure>
      <step>
        <para>
          Enable SSL in Apache.
        </para>

<programlisting language="bash">
$ <command>sudo a2enmod ssl</command>
</programlisting>
      </step>

      <step>
        <para>
          Create a directory to store certificates.
        </para>

<programlisting language="bash">
$ <command>sudo mkdir -p /etc/apache2/ssl</command>
</programlisting>
      </step>

      <step>
        <para>
          Create a certificate/key pair.
        </para>

<programlisting language="bash">
$ <command>cd /etc/apache2/ssl</command>
$ <command>sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout apache.key -out apache.crt</command>
</programlisting>

        <para>
          This command generates a private key and a certificate. To form the
          certificate, <command>openssl</command> prompts you for several
          details:
        </para>

<screen>
Generating a 2048 bit RSA private key
...................+++
....................................+++
writing new private key to 'apache.key'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:<replaceable>CA</replaceable>
State or Province Name (full name) [Some-State]:<replaceable>British Columbia</replaceable>
Locality Name (eg, city) []:<replaceable>Victoria</replaceable>
Organization Name (eg, company) [Internet Widgits Pty Ltd]:<replaceable>Perforce Software</replaceable>
Organizational Unit Name (eg, section) []:<replaceable>Swarm development team</replaceable>
Common Name (e.g. server FQDN or YOUR name) []:<replaceable>myswarm.host</replaceable>
Email Address []:<replaceable>admin@myswarm.host</replaceable>
</screen>

        <para>
          The output above includes some example details. You should replace
          anything in italics with your own details. Since the certificate
          request details that can help users determine whether your certificate
          is valid, enter legitimate information whenever possible.
        </para>

        <important>
          <para>
            The <literal>Common Name</literal> field <emphasis role="bold">must
            match</emphasis> the hostname for your Swarm installation exactly.
          </para>
        </important>
      </step>

      <step>
        <para>
          Secure the certificate directory.
        </para>

<programlisting language="bash">
$ <command>sudo chmod 600 /etc/apache2/ssl</command>
</programlisting>
      </step>

      <step>
        <para>
          Edit the virtual host configuration.
        </para>

        <note>
          <para>
            The virtual host configuration should be in the file you
            <link linkend="setup.post.backup">backed up initially</link>.
          </para>
        </note>

        <itemizedlist>
          <listitem>
            <para>
              For Apache 2.2, edit the virtual host configuration to match:
            </para>

<programlisting language="apache">
&lt;VirtualHost *:80&gt;
    ServerName <replaceable>myswarm.host</replaceable>
    ServerAlias <replaceable>myswarm</replaceable>
    ErrorLog "<replaceable>/path/to/apache/logs/myswarm</replaceable>.error_log"
    CustomLog "<replaceable>/path/to/apache/logs/myswarm</replaceable>.access_log" common
    DocumentRoot "<replaceable>/path/to/swarm/</replaceable>public"
    &lt;Directory "<replaceable>/path/to/swarm/</replaceable>public"&gt;
        AllowOverride All
        Require all granted
    &lt;/Directory&gt;

    Redirect permanent / https://<replaceable>myswarm.host</replaceable>
&lt;/VirtualHost&gt;

&lt;VirtualHost *:443&gt;
    SSLEngine on
    SSLCertificateFile /etc/apache2/ssl/apache.crt
    SSLCertificateKeyFile /etc/apache2/ssl/apache.key

    ServerName <replaceable>myswarm.host</replaceable>
    ServerAlias <replaceable>myswarm</replaceable>
    ErrorLog "<replaceable>/path/to/apache/logs/myswarm</replaceable>.error_log"
    CustomLog "<replaceable>/path/to/apache/logs/myswarm</replaceable>.access_log" common
    DocumentRoot "<replaceable>/path/to/swarm/</replaceable>public"
    &lt;Directory "<replaceable>/path/to/swarm/</replaceable>public"&gt;
        AllowOverride All
        Order allow,deny
        Allow from all
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;
</programlisting>
          </listitem>

          <listitem>
            <para>
              For Apache 2.4, edit the virtual host configuration to match:
            </para>

<programlisting language="apache">
&lt;VirtualHost *:80&gt;
    ServerName <replaceable>myswarm</replaceable>
    ServerAlias <replaceable>myswarm.host</replaceable>
    ErrorLog "<replaceable>/path/to/apache/logs/myswarm</replaceable>.error_log"
    CustomLog "<replaceable>/path/to/apache/logs/myswarm</replaceable>.access_log" common
    DocumentRoot "<replaceable>/path/to/swarm/</replaceable>public"
    &lt;Directory "<replaceable>/path/to/swarm/</replaceable>public"&gt;
        AllowOverride All
        Require all granted
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;

&lt;VirtualHost *:443&gt;
    SSLEngine on
    SSLCertificateFile /etc/apache2/ssl/apache.crt
    SSLCertificateKeyFile /etc/apache2/ssl/apache.key

    ServerName <replaceable>myswarm.host</replaceable>
    ServerAlias <replaceable>myswarm</replaceable>
    ErrorLog "<replaceable>/path/to/apache/logs/myswarm</replaceable>.error_log"
    CustomLog "<replaceable>/path/to/apache/logs/myswarm</replaceable>.access_log" common
    DocumentRoot "<replaceable>/path/to/swarm/</replaceable>public"
    &lt;Directory "<replaceable>/path/to/swarm/</replaceable>public"&gt;
        AllowOverride All
        Require all granted
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;
</programlisting>
          </listitem>
        </itemizedlist>

        <tip>
          <para>
            See Apache's virtual host documentation for details:
            <literallayout>
</literallayout>
            <link xlink:href="https://httpd.apache.org/docs/2.2/vhosts/"/>
            <literallayout>
</literallayout>
            <link xlink:href="https://httpd.apache.org/docs/2.4/vhosts/"/>
          </para>
        </tip>

      </step>

      <step>
        <para>
          Customize the virtual host definition.
        </para>

        <substeps>
          <step>
            <para>
              Replace <replaceable>myswarm.host</replaceable> with the hostname
              for Swarm on your network.
            </para>
          </step>

          <step>
            <para>
              Replace <replaceable>myswarm</replaceable> with the name of the
              subdomain hosting Swarm. Many administrators choose
              <replaceable>swarm</replaceable>.
            </para>

            <para>
              Note the string <replaceable>myswarm</replaceable> in the log file
              paths: this should match the subdomain name and prefix for the log
              files, to help coordinate the active host with the log files for
              that host. Doing this is particularly useful when your Apache
              server hosts multiple instances of Swarm.
            </para>
          </step>

          <step>
            <para>
              Replace <replaceable>/path/to/apache/logs</replaceable> with the
              path where your Apache store its log files. Apache's log files are
              typically named <filename>access_log</filename> and
              <filename>error_log</filename>.
            </para>
          </step>

          <step>
            <para>
              Replace <replaceable>/path/to/swarm</replaceable> with the path to
              the Swarm directory.
            </para>
          </step>
        </substeps>
      </step>

      <step>
        <para>
          Restart your web server.
        </para>

<programlisting language="bash">
$ <command>sudo apachectl restart</command>
</programlisting>
      </step>

      <step>
        <para>
          Adjust your firewall configuration to allow connections to the
          standard SSL port for web servers.
        </para>

        <itemizedlist>
          <listitem>
            <para>
              For CentOS/RHEL 6.6+:
            </para>

<programlisting language="bash">
$ <command>sudo lokkit -p 443:tcp</command>
</programlisting>
          </listitem>

          <listitem>
            <para>
              For CentOS/RHEL 7+:
            </para>

<programlisting language="bash">
$ <command>sudo firewall-cmd --zone=public --add-port=443/tcp --permanent</command>
$ <command>sudo systemctl reload firewalld</command>
</programlisting>
          </listitem>

          <listitem>
            <para>
              For other distributions, consult with your network administrator
              or operating system documentation to determine how to adjust your
              firewall configuration.
            </para>
          </listitem>
        </itemizedlist>
      </step>

      <step>
        <para>
          Test your HTTPS URL from a web browser.
        </para>

        <important>
          <para>
            If the <replaceable>myswarm.host</replaceable> value in the virtual
            host configuration and the certificate do not match,
            <application>P4V</application>'s integration with Swarm fails with
            the message <literal>SSL handshake failed</literal>.
          </para>

          <para>
            Also, when a reverse DNS lookup is performed
            <replaceable>myswarm.host</replaceable> should be the answer when
            querying for the Swarm server's IP address.
          </para>
        </important>
      </step>
    </procedure>
  </section>

  <section xml:id="setup.post.subfolder">
    <title>Run Swarm in a sub-folder of an existing web site</title>

    <para>
      If you cannot run Swarm in its own virtual host, which might be necessary
      when you do not control the hostname to be used with Swarm, installing
      Swarm in a sub-folder of an existing virtual host configuration can be a
      good solution.
    </para>

    <para>
      Installing Swarm in a sub-folder requires modification of the previous
      installation steps covered in this chapter:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          The <xref linkend="setup.apache"/> is entirely different; instead of
          establishing a new virtual host, you need to
          <link linkend="setup.post.subfolder.apache">modify an existing virtual
          host configuration</link>. Often, this would be Apache's default site.
        </para>
      </listitem>

      <listitem>
        <para>
          <link linkend="setup.swarm">Swarm's configuration file</link> requires
          <link linkend="setup.post.subfolder.swarm">an extra item</link>.
        </para>
      </listitem>
    </itemizedlist>

    <para>
      The following sections cover the specifics of sub-folder installation.
    </para>

    <note>
      <para>
        See <xref linkend="admin.environment.base_url"/> for more details.
      </para>
    </note>

    <important>
      <para>
        If you used the <link linkend="setup.ova">Swarm OVA</link> or
        <link linkend="setup.packages">Swarm packages</link> to install Swarm,
        you can adjust Swarm's configuration using the package configuration
        script <command>/opt/perforce/swarm/sbin/configure-swarm.sh</command>.
      </para>

      <para>
        <emphasis role="bold"><command>configure-swarm.sh</command> does not
        read any existing Swarm configuration; you must provide all of the
        configuration details each time you execute
        <command>configure-swarm.sh</command></emphasis>:
      </para>

<programlisting language="bash">
$ <command>sudo /opt/perforce/swarm/sbin/configure-swarm.sh -n -p <replaceable>myp4host:1666</replaceable> -u <replaceable>swarm</replaceable> -w <replaceable>password</replaceable> -e <replaceable>mx.example.com</replaceable> -H <replaceable>myhost</replaceable> -B /<replaceable>swarm</replaceable></command>
</programlisting>

      <para>
        In the example above, the <option>-B</option> option is used to specify
        the name of the sub-folder.
      </para>

      <para>
        If you use <command>configure-swarm.sh</command> to adjust Swarm's
        configuration, you only need to follow the
        <xref linkend="setup.post.subfolder.apache"/> steps described below; all
        of the changes listed in <xref linkend="setup.post.subfolder.swarm"/>
        section below have been completed by
        <command>configure-swarm.sh</command>.
      </para>
    </important>

    <section xml:id="setup.post.subfolder.apache">
      <title>Apache configuration</title>

      <procedure>
        <step>
          <para>
            Ensure that the <link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link> is <emphasis>not</emphasis> within the
            document root of the intended virtual host.
          </para>

          <para>
            This step ensures that Swarm's source code and configuration is
            impossible to browse, preventing access to important details such as
            stored credentials, and active sessions and workspaces.
          </para>
        </step>

        <step>
          <para>
            Adjust the virtual host configuration that you are already using.
          </para>

          <note>
            <para>
              Depending on the method used to install Swarm, the filename for
              virtual host configuration you need to edit is:
            </para>

            <itemizedlist>
              <listitem>
                <para>
                  For <link linkend="setup.ova">Swarm OVA</link> or
                  <link linkend="setup.packages">Swarm package</link>
                  installations, edit
                  <filename>perforce-swarm-site.conf</filename>.
                </para>
              </listitem>

              <listitem>
                <para>
                  For manual installations following Swarm's
                  <link linkend="setup.apache">recommended Apache
                  configuration</link>, edit <filename>swarm</filename>.
                </para>
              </listitem>

              <listitem>
                <para>
                  For other installations, you may have to edit
                  <filename>httpd.conf</filename> or nearby files.
                </para>
              </listitem>
            </itemizedlist>
          </note>

          <itemizedlist>
            <listitem>
              <para>
                For Apache 2.2, add the following lines to the virtual host
                definition:
              </para>

<programlisting language="apache">
Alias /<replaceable>swarm</replaceable> <link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public

&lt;Directory "<link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public"&gt;
  AllowOverride All
  Order allow,deny
  Allow from All
&lt;/Directory&gt;
</programlisting>
            </listitem>

            <listitem>
              <para>
                For Apache 2.4, add the following lines to the virtual host
                definition:
              </para>

<programlisting language="apache">
Alias /<replaceable>swarm</replaceable> <link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public

&lt;Directory "<link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public"&gt;
  AllowOverride All
  Require all granted
&lt;/Directory&gt;
</programlisting>
            </listitem>
          </itemizedlist>

          <para>
            The <literal>Alias</literal> line configures Apache to respond
            to requests to <literal>https://myhost/swarm</literal> with
            content from Swarm's <filename>public</filename>
            folder. You can change the
            <filename>/<replaceable>swarm</replaceable></filename> portion
            of the <literal>Alias</literal> line to anything you want.
          </para>
          
          <para>
            The <literal>&lt;Directory&gt;</literal> block grants access to
            everything within Swarm's <filename>public</filename> folder.
            Replace <link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link> with the actual path to Swarm.
          </para>
        </step>

        <step>
          <para>
            Restart your web server.
          </para>

<programlisting language="bash">
$ <command>sudo apachectl restart</command>
</programlisting>
        </step>
      </procedure>
    </section>

    <section xml:id="setup.post.subfolder.swarm">
      <title>Swarm configuration</title>

      <para>
        To successfully operate within a sub-folder, the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file needs
        to be adjusted to contain the following lines (as a peer of the
        <literal>p4</literal> item):
      </para>

<programlisting language="php">
        'environment' =&gt; array(
            'base_url' =&gt; '/<replaceable>swarm</replaceable>'
        ),
</programlisting>

      <para>
        Ensure that <filename>/<replaceable>swarm</replaceable></filename>
        matches the first item in the <literal>Alias</literal> line in the
        virtual host configuration.
      </para>

      <note>
        <para>
          See <xref linkend="admin.environment"/> for more details.
        </para>
      </note>
    </section>

    <section xml:id="setup.post.subfolder.cron">
      <title>Cron configuration</title>

      <para>
        Swarm's <link linkend="setup.worker">recurring task</link> configuration
        must be updated to reflect the sub-folder that you have configured in
        <link linkend="setup.post.subfolder.apache">Apache's</link> and
        <link linkend="setup.post.subfolder.swarm">Swarm's</link>
        configurations.
      </para>

      <procedure>
        <step>
          <para>
            Edit <filename>/etc/cron.d/helix-swarm</filename>.
          </para>
        </step>

        <step>
          <para>
            Replace:
          </para>

<programlisting>
https://<replaceable>myswarm.url</replaceable>/queue/worker
</programlisting>

          <para>
            with:
          </para>

<programlisting>
https://<replaceable>myswarm.url</replaceable>/<replaceable>swarm</replaceable>/queue/worker
</programlisting>

          <para>
            Where <replaceable>myswarm.url</replaceable> is the hostname of your
            Swarm installation, and <replaceable>swarm</replaceable> is the
            sub-folder you wish to use.
          </para>
        </step>

        <step>
          <para>
            Save the edited file.
          </para>

          <para>
            New workers should be started at the start of the next minute.
          </para>
        </step>
      </procedure>
    </section>
  </section>

  <section xml:id="setup.post.port">
    <title>Run Swarm's virtual host on a custom port</title>

    <para>
      If you cannot run Swarm on port 80 (or port 443 for HTTPS), perhaps
      because you do not have root access, it is possible to run Swarm on a
      custom port.
    </para>

    <para>
      Installing Swarm to use a custom port requires modification of the
      previous installation steps covered in this chapter:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          The <xref linkend="setup.apache"/> is slightly different, requiring 
          <link linkend="setup.post.port.apache">modification of Swarm's virtual
          host definition</link>.
        </para>
      </listitem>
    </itemizedlist>

    <para>
      The following section covers the specifics of the custom port
      configuration.
    </para>

    <note>
      <para>
        In addition to the following instructions, you may also need to apply
        the <parameter>external_url</parameter> item described in the
        <xref linkend="admin.environment"/> section if your Swarm is behind a
        proxy, or you have multiple Swarm instances connected to the Helix
        Versioning Engine.
      </para>
    </note>

    <important>
      <para>
        If you used the <link linkend="setup.ova">Swarm OVA</link> or
        <link linkend="setup.packages">Swarm packages</link> to install Swarm,
        you can adjust Swarm's configuration using the package configuration
        script <command>/opt/perforce/swarm/sbin/configure-swarm.sh</command>.
      </para>

      <para>
        <emphasis role="bold"><command>configure-swarm.sh</command> does not
        read any existing Swarm configuration; you must provide all of the
        configuration details each time you execute
        <command>configure-swarm.sh</command></emphasis>:
      </para>

<programlisting language="bash">
$ <command>sudo /opt/perforce/swarm/sbin/configure-swarm.sh -n -p <replaceable>myp4host:1666</replaceable> -u <replaceable>swarm</replaceable> -w <replaceable>password</replaceable> -e <replaceable>mx.example.com</replaceable> -H <replaceable>myhost</replaceable> -P <replaceable>8080</replaceable></command>
</programlisting>

      <para>
        In the example above, the <option>-P</option> option is used to specify
        the custom port that Swarm should use.
      </para>

      <para>
        If you use <command>configure-swarm.sh</command> to adjust Swarm's
        configuration, follow the additional steps that it describes. Once those
        steps are complete, do not perform any of the steps described below.
      </para>
    </important>

    <section xml:id="setup.post.port.apache">
      <title>Apache configuration</title>

      <procedure>
        <step>
          <para>
            Edit the virtual host configuration.
          </para>

          <note>
            <para>
              Depending on the method used to install Swarm, the filename for
              virtual host configuration you need to edit is:
            </para>

            <itemizedlist>
              <listitem>
                <para>
                  For <link linkend="setup.ova">Swarm OVA</link> or
                  <link linkend="setup.packages">Swarm package</link>
                  installations, edit
                  <filename>perforce-swarm-site.conf</filename>.
                </para>
              </listitem>

              <listitem>
                <para>
                  For manual installations following Swarm's
                  <link linkend="setup.apache">recommended Apache
                  configuration</link>, edit <filename>swarm</filename>.
                </para>
              </listitem>

              <listitem>
                <para>
                  For other installations, you may have to edit
                  <filename>httpd.conf</filename> or nearby files.
                </para>
              </listitem>
            </itemizedlist>
          </note>

          <substeps>
            <step>
              <para>
                Add the following line <emphasis>outside</emphasis> of the
                <literal>&lt;VirtualHost&gt;</literal> block:
              </para>

<programlisting language="apache">
Listen <replaceable>8080</replaceable>
</programlisting>
            </step>

            <step>
              <para>
                Edit the <literal>&lt;VirtualHost *:80&gt;</literal> line to
                read:
              </para>

<programlisting language="apache">
&lt;VirtualHost *:<replaceable>8080</replaceable>&gt;
</programlisting>
            </step>
          </substeps>

          <para>
            For both lines, replace <replaceable>8080</replaceable> with the
            custom port you wish to use.
          </para>

          <important>
            <para>
              If you choose a port that is already in use, Apache refuses to
              start.
            </para>
          </important>
        </step>

        <step>
          <para>
            Restart your web server.
          </para>

<programlisting language="bash">
$ <command>sudo apachectl restart</command>
</programlisting>
        </step>

        <step>
          <para>
            Adjust your firewall configuration to allow connections to the
            custom port.
          </para>

          <itemizedlist>
            <listitem>
              <para>
                For CentOS/RHEL 6.6+:
              </para>

<programlisting language="bash">
$ <command>sudo lokkit -p <replaceable>8080</replaceable>:tcp</command>
</programlisting>

              <para>
                Replace <replaceable>8080</replaceable> with the custom port you
                wish to use.
              </para>
            </listitem>

            <listitem>
              <para>
                For CentOS/RHEL 7+:
              </para>

<programlisting language="bash">
$ <command>sudo firewall-cmd --zone=public --add-port=<replaceable>8080</replaceable>/tcp --permanent</command>
$ <command>sudo systemctl reload firewalld</command>
</programlisting>

              <para>
                Replace <replaceable>8080</replaceable> with the custom port you
                wish to use.
              </para>
            </listitem>

            <listitem>
              <para>
                For other distributions, consult with your network administrator
                or operating system documentation to determine how to just your
                firewall configuration.
              </para>
            </listitem>
          </itemizedlist>
        </step>
      </procedure>
    </section>

    <section xml:id="setup.post.port.cron">
      <title>Cron configuration</title>

      <para>
        Swarm's <link linkend="setup.worker">recurring task</link> configuration
        must be updated to reflect the custom port that you have configured in
        <link linkend="setup.post.port.apache">Apache's</link> configuration.
      </para>

      <procedure>
        <step>
          <para>
            Edit <filename>/etc/cron.d/helix-swarm</filename>.
          </para>
        </step>

        <step>
          <para>
            Replace:
          </para>

<programlisting>
https://<replaceable>myswarm.url</replaceable>/queue/worker
</programlisting>

          <para>
            with:
          </para>

<programlisting>
https://<replaceable>myswarm.url</replaceable>:<replaceable>8080</replaceable>/queue/worker
</programlisting>

          <para>
            Where <replaceable>myswarm.url</replaceable> is the hostname of your
            Swarm installation, and <replaceable>8080</replaceable> is the
            custom port you wish to use.
          </para>
        </step>

        <step>
          <para>
            Save the edited file.
          </para>

          <para>
            New workers should be started at the start of the next minute.
          </para>
        </step>
      </procedure>
    </section>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="setup.upgrade" xml:base="setup/upgrade.xml">
  <title>Upgrading Swarm</title>

  <para>
    The section covers upgrading specific Swarm releases to a newer release. If
    you are not already running Swarm, none of these instructions apply to you.
    Instead, see the <link linkend="chapter.setup">Swarm installation
    instructions</link>.
  </para>
  
  <para>
    As there may be version specific upgrade requirements, each of the upgrades
    available are from one point release to the next.
  </para>

  <para>
    If you have installed Swarm via packages, see the
    <link linkend="setup.packages.updating">package update instructions</link>.
  </para>

  <note>
    <para>
      The instructions below can be applied to an OVA. The OVA's
      <literal>SWARM_ROOT</literal>, the folder where Swarm is installed, is
      <filename>/opt/perforce/swarm</filename>.
    </para>

    <para>
      However, we recommend downloading the new OVA and then following the
      <link linkend="setup.ova">OVA setup steps</link>. This provides you with
      an upgraded Swarm plus an updated web hosting environment within the OVA,
      which can include distribution, web server, PHP, and security updates.
    </para>

    <para>
      If you have customized the original OVA's Swarm configuration, copy
      <filename>/opt/perforce/swarm/data/config.php</filename> to the same path
      in the new OVA.
    </para>

    <para>
      Copy all token files in
      <filename>/opt/perforce/swarm/data/queue/tokens/</filename> to the same
      path in the new OVA.
    </para>

    <para>
      If you are running the Swarm 2014.2 OVA, or newer, Swarm was installed
      using system packages and can be upgraded by following the
      <link linkend="setup.packages.updating">package update instructions</link>.
    </para>
  </note>

  <para>
    The following process attempts to minimize downtime, but a short period of
    downtime for Swarm users is unavoidable. There should be no downtime for
    your Helix Versioning Engine. After a successful upgrade, all Swarm users
    are logged out.
  </para>

  <para>
    If you are using Swarm in a production environment, we encourage you to test
    this upgrade process in a non-production environment first.
  </para>

  <warning>
    <para>
      <glossterm linkend="P4PHP">P4PHP</glossterm> should be upgraded to the
      version included in the new Swarm release.  If you have already configured
      PHP to use the Swarm-provided P4PHP (<link linkend="setup.php">as
      recommended</link>), this happens automatically. If you have manually
      installed P4PHP in some other fashion, upgrade P4PHP before you perform
      any of the upgrade steps below. See <xref linkend="setup.php"/> for
      details.
    </para>
  </warning>

  <para>
    If you have not already done so, download the Swarm TAR option: <?download-swarm?>
  </para>

  <para>
    The steps in the following sub-sections describe how to upgrade Swarm using
    the provided archive file. <literal>SWARM_ROOT</literal> refers to the
    current Swarm installation.
  </para>

  <para>
    The following version-specific upgrades are described:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        <link linkend="setup.upgrade.2015.4">2016.1 to 2016.1 SP1</link>
      </para>
    </listitem>

    <listitem>
      <para>
        <link linkend="setup.upgrade.2015.4">2015.4 to 2016.1</link>
      </para>
    </listitem>

    <listitem>
      <para>
        <link linkend="setup.upgrade.2015.3">2015.3 to 2015.4</link>
      </para>
    </listitem>

    <listitem>
      <para>
        <link linkend="setup.upgrade.2015.2">2015.2 to 2015.3</link>
      </para>
    </listitem>

    <listitem>
      <para>
        <link linkend="setup.upgrade.2015.1">2015.1 to 2015.2</link>
      </para>
    </listitem>
  </itemizedlist>

  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="setup.upgrade.2016.1" xml:base="upgrade_2016.1.xml">
  <title>Upgrade Swarm 2016.1 to 2016.1 SP1</title>

  <para>
    This section covers the steps to upgrade from Swarm's 2016.1 release to the
    2016.1 Service Pack 1 release.
  </para>

  <orderedlist>
    <listitem>
      <para>
        Expand the new <filename>swarm.tgz</filename>:
      </para>

<programlisting language="bash">
$ <command>tar -zxf swarm.tgz</command>
</programlisting>

      <para>
        The contents of <filename>swarm.tgz</filename> are expanded into a
        top-level folder named
        <filename>swarm-<replaceable>version</replaceable></filename>, where
        <replaceable>version</replaceable> corresponds to the version
        downloaded. This directory is identified as <literal>SWARM_NEW</literal>
        below.
      </para>
    </listitem>

    <listitem>
      <para>
        Move <literal>SWARM_NEW</literal> to be a peer of
        <literal>SWARM_ROOT</literal>:
      </para>

<programlisting language="bash">
$ <command>mv SWARM_NEW SWARM_ROOT/../</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        Copy the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file from the old Swarm to the new Swarm:
      </para>

<programlisting language="bash">
$ <command>cp -p SWARM_ROOT/data/config.php SWARM_NEW/data/</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        Create the queue token directory:
      </para>

<programlisting language="bash">
$ <command>mkdir SWARM_NEW/data/queue</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        Copy the existing trigger token(s):
      </para>

<programlisting language="bash">
$ <command>sudo cp -pR SWARM_ROOT/data/queue/tokens SWARM_NEW/data/queue/</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        Assign correct ownership to the new Swarm's data directory:
      </para>

<programlisting language="bash">
$ <command>sudo chown -R <replaceable>www-data</replaceable> SWARM_NEW/data</command>
</programlisting>

      <note>
        <para>
          The <replaceable>www-data</replaceable> user above is an example of
          what the web server user name might be, and can vary based on
          distribution or customization. For example, the user is typically
          <literal>apache</literal> for Red Hat/Fedora/CentOS,
          <literal>www-data</literal> for Debian/Ubuntu,
          <literal>wwwrun</literal> for SuSE, <literal>_www</literal> for Mac
          OSX.
        </para>
      </note>
    </listitem>

    <listitem>
      <para>
        Copy the new Swarm trigger script to your Perforce server machine. The
        trigger script is
        <filename>SWARM_NEW/p4-bin/scripts/swarm-trigger.pl</filename>, and
        requires installation of Perl 5.08+ (use the latest available) on the
        Perforce server machine.
      </para>

      <warning>
        <para>
          Do not overwrite any existing trigger script at this time. Give the
          script a new name, for example:
          <filename>swarm-trigger-new.pl</filename>.
        </para>
      </warning>
    </listitem>

    <listitem>
      <para>
        Configure the Swarm trigger script by creating, in the same directory on
        the Perforce server machine, <filename>swarm-trigger.conf</filename>. It
        should contain:
      </para>

      <!-- vim: set ts=2 sw=2 tw=80 ai si: --><programlisting language="ini" version="5.0" xml:base="../common/swarm-trigger.conf.xml">
# SWARM_HOST (required)
# Hostname of your Swarm instance, with leading "http://" or "https://".
SWARM_HOST="<replaceable>http://my-swarm-host</replaceable>"

# SWARM_TOKEN (required)
# The token used when talking to Swarm to offer some security. To obtain the
# value, log in to Swarm as a super user and select 'About Swarm' to see the
# token value.
SWARM_TOKEN="<replaceable>MY-UUID-STYLE-TOKEN</replaceable>"

# ADMIN_USER (optional)
# For enforcing reviewed changes, optionally specify the normal Perforce user
# with admin privileges (to read keys); if not set, will use whatever Perforce
# user is set in environment.
ADMIN_USER=

# ADMIN_TICKET_FILE (optional)
# For enforcing reviewed changes, optionally specify the location of the
# p4tickets file if different from the default ($HOME/.p4tickets).
# Ensure this user is a member of a group with an 'unlimited' or very long
# timeout; then, manually login as this user from the Perforce server machine to
# set the ticket.
ADMIN_TICKET_FILE=
</programlisting>

      <para>
        Fill in the required <literal>SWARM_HOST</literal> and
        <literal>SWARM_TOKEN</literal> variables with the configuration from any
        previous Swarm trigger script, typically
        <filename>swarm-trigger.sh</filename>.
      </para>

      <note>
        <para>
          If you already have a <filename>swarm-trigger.conf</filename> file,
          no additional configuration is required.
        </para>
      </note>
    </listitem>

    <listitem>
      <para>
        For Linux systems, ensure that the script is executable:
      </para>

<programlisting>
$ <command>sudo chmod +x swarm-trigger-new.pl</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        Rename the new trigger script:
      </para>

<programlisting>
$ <command>mv swarm-trigger-new.pl swarm-trigger.pl</command>
</programlisting>

      <para>
        On Windows:
      </para>

<programlisting>
C:\&gt; <command>ren swarm-trigger-new.pl swarm-trigger.pl</command>
</programlisting>
    </listitem>

    <!-- vim: set ts=2 sw=2 tw=80 ai si: --><listitem version="5.0" xml:base="../common/listitem-update_triggers.xml">
  <para>
    Update the triggers in your Helix Versioning Engine.
  </para>

  <orderedlist>
    <listitem>
      <para>
        Run the Swarm trigger script to capture (using
        <keycombo action="simul"><keycap>Ctrl</keycap>
        <keycap>C</keycap></keycombo> on Windows and Linux,
        <keycombo action="simul"><keycap>Command</keycap>
        <keycap>C</keycap></keycombo> on Mac OSX) the trigger lines that should
        be included in the Perforce trigger table:
      </para>

<programlisting>
$ <command>./swarm-trigger.pl -o</command>
</programlisting>

      <para>
        On Windows:
      </para>

<programlisting>
C:\&gt; <command><replaceable>path/to/</replaceable>perl swarm-trigger.pl -o</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        As a Perforce user with <emphasis>super</emphasis> privileges, update
        the Perforce trigger table by running <command>p4 triggers</command>
        command and replacing any <literal>swarm.*</literal> lines with the
        previously captured trigger line output (using
        <keycombo action="simul"><keycap>Ctrl</keycap>
        <keycap>V</keycap></keycombo> on Windows and Linux,
        <keycombo action="simul"><keycap>Command</keycap>
        <keycap>V</keycap></keycombo> on Mac OSX).
      </para>
    </listitem>
  </orderedlist>

  <important>
    <para>
      If you previously customized the Swarm trigger lines, perhaps to apply
      various <xref linkend="admin.trigger"/>, be sure to repeat those
      customizations within the updated trigger lines.
    </para>
  </important>
</listitem>

    <listitem>
      <para>
        Replace the old Swarm with the new Swarm.
        <emphasis role="bold">Downtime occurs in this step.</emphasis>
      </para>

<programlisting language="bash">
$ <command>sudo apache2ctl stop; mv SWARM_ROOT to SWARM.old; mv SWARM_NEW SWARM_ROOT; sudo apache2ctl start</command>
</programlisting>
    </listitem>
  </orderedlist>

  <para>
    All done!
  </para>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="setup.upgrade.2015.4" xml:base="upgrade_2015.4.xml">
  <title>Upgrade Swarm 2015.4 to 2016.1</title>

  <para>
    This section covers the steps to upgrade from Swarm's 2015.4 release to the
    2016.1 release.
  </para>

  <orderedlist>
    <listitem>
      <para>
        Expand the new <filename>swarm.tgz</filename>:
      </para>

<programlisting language="bash">
$ <command>tar -zxf swarm.tgz</command>
</programlisting>

      <para>
        The contents of <filename>swarm.tgz</filename> are expanded into a
        top-level folder named
        <filename>swarm-<replaceable>version</replaceable></filename>, where
        <replaceable>version</replaceable> corresponds to the version
        downloaded. This directory is identified as <literal>SWARM_NEW</literal>
        below.
      </para>
    </listitem>

    <listitem>
      <para>
        Move <literal>SWARM_NEW</literal> to be a peer of
        <literal>SWARM_ROOT</literal>:
      </para>

<programlisting language="bash">
$ <command>mv SWARM_NEW SWARM_ROOT/../</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        Copy the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file from the old Swarm to the new Swarm:
      </para>

<programlisting language="bash">
$ <command>cp -p SWARM_ROOT/data/config.php SWARM_NEW/data/</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        Create the queue token directory:
      </para>

<programlisting language="bash">
$ <command>mkdir SWARM_NEW/data/queue</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        Copy the existing trigger token(s):
      </para>

<programlisting language="bash">
$ <command>sudo cp -pR SWARM_ROOT/data/queue/tokens SWARM_NEW/data/queue/</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        Assign correct ownership to the new Swarm's data directory:
      </para>

<programlisting language="bash">
$ <command>sudo chown -R <replaceable>www-data</replaceable> SWARM_NEW/data</command>
</programlisting>

      <note>
        <para>
          The <replaceable>www-data</replaceable> user above is an example of
          what the web server user name might be, and can vary based on
          distribution or customization. For example, the user is typically
          <literal>apache</literal> for Red Hat/Fedora/CentOS,
          <literal>www-data</literal> for Debian/Ubuntu,
          <literal>wwwrun</literal> for SuSE, <literal>_www</literal> for Mac
          OSX.
        </para>
      </note>
    </listitem>

    <listitem>
      <para>
        Copy the new Swarm trigger script to your Perforce server machine. The
        trigger script is
        <filename>SWARM_NEW/p4-bin/scripts/swarm-trigger.pl</filename>, and
        requires installation of Perl 5.08+ (use the latest available) on the
        Perforce server machine.
      </para>

      <warning>
        <para>
          Do not overwrite any existing trigger script at this time. Give the
          script a new name, for example:
          <filename>swarm-trigger-new.pl</filename>.
        </para>
      </warning>
    </listitem>

    <listitem>
      <para>
        Configure the Swarm trigger script by creating, in the same directory on
        the Perforce server machine, <filename>swarm-trigger.conf</filename>. It
        should contain:
      </para>

      <!-- vim: set ts=2 sw=2 tw=80 ai si: --><programlisting language="ini" version="5.0" xml:base="../common/swarm-trigger.conf.xml">
# SWARM_HOST (required)
# Hostname of your Swarm instance, with leading "http://" or "https://".
SWARM_HOST="<replaceable>http://my-swarm-host</replaceable>"

# SWARM_TOKEN (required)
# The token used when talking to Swarm to offer some security. To obtain the
# value, log in to Swarm as a super user and select 'About Swarm' to see the
# token value.
SWARM_TOKEN="<replaceable>MY-UUID-STYLE-TOKEN</replaceable>"

# ADMIN_USER (optional)
# For enforcing reviewed changes, optionally specify the normal Perforce user
# with admin privileges (to read keys); if not set, will use whatever Perforce
# user is set in environment.
ADMIN_USER=

# ADMIN_TICKET_FILE (optional)
# For enforcing reviewed changes, optionally specify the location of the
# p4tickets file if different from the default ($HOME/.p4tickets).
# Ensure this user is a member of a group with an 'unlimited' or very long
# timeout; then, manually login as this user from the Perforce server machine to
# set the ticket.
ADMIN_TICKET_FILE=
</programlisting>

      <para>
        Fill in the required <literal>SWARM_HOST</literal> and
        <literal>SWARM_TOKEN</literal> variables with the configuration from any
        previous Swarm trigger script, typically
        <filename>swarm-trigger.sh</filename>.
      </para>

      <note>
        <para>
          If you already have a <filename>swarm-trigger.conf</filename> file,
          no additional configuration is required.
        </para>
      </note>
    </listitem>

    <listitem>
      <para>
        For Linux systems, ensure that the script is executable:
      </para>

<programlisting>
$ <command>sudo chmod +x swarm-trigger-new.pl</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        Rename the new trigger script:
      </para>

<programlisting>
$ <command>mv swarm-trigger-new.pl swarm-trigger.pl</command>
</programlisting>

      <para>
        On Windows:
      </para>

<programlisting>
C:\&gt; <command>ren swarm-trigger-new.pl swarm-trigger.pl</command>
</programlisting>
    </listitem>

    <!-- vim: set ts=2 sw=2 tw=80 ai si: --><listitem version="5.0" xml:base="../common/listitem-update_triggers.xml">
  <para>
    Update the triggers in your Helix Versioning Engine.
  </para>

  <orderedlist>
    <listitem>
      <para>
        Run the Swarm trigger script to capture (using
        <keycombo action="simul"><keycap>Ctrl</keycap>
        <keycap>C</keycap></keycombo> on Windows and Linux,
        <keycombo action="simul"><keycap>Command</keycap>
        <keycap>C</keycap></keycombo> on Mac OSX) the trigger lines that should
        be included in the Perforce trigger table:
      </para>

<programlisting>
$ <command>./swarm-trigger.pl -o</command>
</programlisting>

      <para>
        On Windows:
      </para>

<programlisting>
C:\&gt; <command><replaceable>path/to/</replaceable>perl swarm-trigger.pl -o</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        As a Perforce user with <emphasis>super</emphasis> privileges, update
        the Perforce trigger table by running <command>p4 triggers</command>
        command and replacing any <literal>swarm.*</literal> lines with the
        previously captured trigger line output (using
        <keycombo action="simul"><keycap>Ctrl</keycap>
        <keycap>V</keycap></keycombo> on Windows and Linux,
        <keycombo action="simul"><keycap>Command</keycap>
        <keycap>V</keycap></keycombo> on Mac OSX).
      </para>
    </listitem>
  </orderedlist>

  <important>
    <para>
      If you previously customized the Swarm trigger lines, perhaps to apply
      various <xref linkend="admin.trigger"/>, be sure to repeat those
      customizations within the updated trigger lines.
    </para>
  </important>
</listitem>

    <listitem>
      <para>
        Replace the old Swarm with the new Swarm.
        <emphasis role="bold">Downtime occurs in this step.</emphasis>
      </para>

<programlisting language="bash">
$ <command>sudo apache2ctl stop; mv SWARM_ROOT to SWARM.old; mv SWARM_NEW SWARM_ROOT; sudo apache2ctl start</command>
</programlisting>
    </listitem>
  </orderedlist>

  <para>
    All done!
  </para>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="setup.upgrade.2015.3" xml:base="upgrade_2015.3.xml">
  <title>Upgrade Swarm 2015.3 to 2015.4</title>

  <para>
    This section covers the steps to upgrade from Swarm's 2015.3 release to the
    2015.4 release.
  </para>

  <orderedlist>
    <listitem>
      <para>
        Expand the new <filename>swarm.tgz</filename>:
      </para>

<programlisting language="bash">
$ <command>tar -zxf swarm.tgz</command>
</programlisting>

      <para>
        The contents of <filename>swarm.tgz</filename> are expanded into a
        top-level folder named
        <filename>swarm-<replaceable>version</replaceable></filename>, where
        <replaceable>version</replaceable> corresponds to the version
        downloaded. This directory is identified as <literal>SWARM_NEW</literal>
        below.
      </para>
    </listitem>

    <listitem>
      <para>
        Move <literal>SWARM_NEW</literal> to be a peer of
        <literal>SWARM_ROOT</literal>:
      </para>

<programlisting language="bash">
$ <command>mv SWARM_NEW SWARM_ROOT/../</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        Copy the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file from the old Swarm to the new Swarm:
      </para>

<programlisting language="bash">
$ <command>cp -p SWARM_ROOT/data/config.php SWARM_NEW/data/</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        Create the queue token directory:
      </para>

<programlisting language="bash">
$ <command>mkdir SWARM_NEW/data/queue</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        Copy the existing trigger token(s):
      </para>

<programlisting language="bash">
$ <command>sudo cp -pR SWARM_ROOT/data/queue/tokens SWARM_NEW/data/queue/</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        Assign correct ownership to the new Swarm's data directory:
      </para>

<programlisting language="bash">
$ <command>sudo chown -R <replaceable>www-data</replaceable> SWARM_NEW/data</command>
</programlisting>

      <note>
        <para>
          The <replaceable>www-data</replaceable> user above is an example of
          what the web server user name might be, and can vary based on
          distribution or customization. For example, the user is typically
          <literal>apache</literal> for Red Hat/Fedora/CentOS,
          <literal>www-data</literal> for Debian/Ubuntu,
          <literal>wwwrun</literal> for SuSE, <literal>_www</literal> for Mac
          OSX.
        </para>
      </note>
    </listitem>

    <listitem>
      <para>
        Copy the new Swarm trigger script to your Perforce server machine. The
        trigger script is
        <filename>SWARM_NEW/p4-bin/scripts/swarm-trigger.pl</filename>, and
        requires installation of Perl 5.08+ (use the latest available) on the
        Perforce server machine.
      </para>

      <warning>
        <para>
          Do not overwrite any existing trigger script at this time. Give the
          script a new name, for example:
          <filename>swarm-trigger-new.pl</filename>.
        </para>
      </warning>
    </listitem>

    <listitem>
      <para>
        Configure the Swarm trigger script by creating, in the same directory on
        the Perforce server machine, <filename>swarm-trigger.conf</filename>. It
        should contain:
      </para>

      <!-- vim: set ts=2 sw=2 tw=80 ai si: --><programlisting language="ini" version="5.0" xml:base="../common/swarm-trigger.conf.xml">
# SWARM_HOST (required)
# Hostname of your Swarm instance, with leading "http://" or "https://".
SWARM_HOST="<replaceable>http://my-swarm-host</replaceable>"

# SWARM_TOKEN (required)
# The token used when talking to Swarm to offer some security. To obtain the
# value, log in to Swarm as a super user and select 'About Swarm' to see the
# token value.
SWARM_TOKEN="<replaceable>MY-UUID-STYLE-TOKEN</replaceable>"

# ADMIN_USER (optional)
# For enforcing reviewed changes, optionally specify the normal Perforce user
# with admin privileges (to read keys); if not set, will use whatever Perforce
# user is set in environment.
ADMIN_USER=

# ADMIN_TICKET_FILE (optional)
# For enforcing reviewed changes, optionally specify the location of the
# p4tickets file if different from the default ($HOME/.p4tickets).
# Ensure this user is a member of a group with an 'unlimited' or very long
# timeout; then, manually login as this user from the Perforce server machine to
# set the ticket.
ADMIN_TICKET_FILE=
</programlisting>

      <para>
        Fill in the required <literal>SWARM_HOST</literal> and
        <literal>SWARM_TOKEN</literal> variables with the configuration from any
        previous Swarm trigger script, typically
        <filename>swarm-trigger.sh</filename>.
      </para>

      <note>
        <para>
          If you already have a <filename>swarm-trigger.conf</filename> file,
          no additional configuration is required.
        </para>
      </note>
    </listitem>

    <listitem>
      <para>
        For Linux systems, ensure that the script is executable:
      </para>

<programlisting>
$ <command>sudo chmod +x swarm-trigger-new.pl</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        Rename the new trigger script:
      </para>

<programlisting>
$ <command>mv swarm-trigger-new.pl swarm-trigger.pl</command>
</programlisting>

      <para>
        On Windows:
      </para>

<programlisting>
C:\&gt; <command>ren swarm-trigger-new.pl swarm-trigger.pl</command>
</programlisting>
    </listitem>

    <!-- vim: set ts=2 sw=2 tw=80 ai si: --><listitem version="5.0" xml:base="../common/listitem-update_triggers.xml">
  <para>
    Update the triggers in your Helix Versioning Engine.
  </para>

  <orderedlist>
    <listitem>
      <para>
        Run the Swarm trigger script to capture (using
        <keycombo action="simul"><keycap>Ctrl</keycap>
        <keycap>C</keycap></keycombo> on Windows and Linux,
        <keycombo action="simul"><keycap>Command</keycap>
        <keycap>C</keycap></keycombo> on Mac OSX) the trigger lines that should
        be included in the Perforce trigger table:
      </para>

<programlisting>
$ <command>./swarm-trigger.pl -o</command>
</programlisting>

      <para>
        On Windows:
      </para>

<programlisting>
C:\&gt; <command><replaceable>path/to/</replaceable>perl swarm-trigger.pl -o</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        As a Perforce user with <emphasis>super</emphasis> privileges, update
        the Perforce trigger table by running <command>p4 triggers</command>
        command and replacing any <literal>swarm.*</literal> lines with the
        previously captured trigger line output (using
        <keycombo action="simul"><keycap>Ctrl</keycap>
        <keycap>V</keycap></keycombo> on Windows and Linux,
        <keycombo action="simul"><keycap>Command</keycap>
        <keycap>V</keycap></keycombo> on Mac OSX).
      </para>
    </listitem>
  </orderedlist>

  <important>
    <para>
      If you previously customized the Swarm trigger lines, perhaps to apply
      various <xref linkend="admin.trigger"/>, be sure to repeat those
      customizations within the updated trigger lines.
    </para>
  </important>
</listitem>

    <listitem>
      <para>
        Replace the old Swarm with the new Swarm.
        <emphasis role="bold">Downtime occurs in this step.</emphasis>
      </para>

<programlisting language="bash">
$ <command>sudo apache2ctl stop; mv SWARM_ROOT to SWARM.old; mv SWARM_NEW SWARM_ROOT; sudo apache2ctl start</command>
</programlisting>
    </listitem>
  </orderedlist>

  <para>
    All done!
  </para>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="setup.upgrade.2015.2" xml:base="upgrade_2015.2.xml">
  <title>Upgrade Swarm 2015.2 to 2015.3</title>

  <para>
    This section covers the steps to upgrade from Swarm's 2015.2 release to the
    2015.3 release. 
  </para>

  <orderedlist>
    <listitem>
      <para>
        Expand the new <filename>swarm.tgz</filename>:
      </para>

<programlisting language="bash">
$ <command>tar -zxf swarm.tgz</command>
</programlisting>

      <para>
        The contents of <filename>swarm.tgz</filename> are expanded into a
        top-level folder named
        <filename>swarm-<replaceable>version</replaceable></filename>, where
        <replaceable>version</replaceable> corresponds to the version
        downloaded. This directory is identified as <literal>SWARM_NEW</literal>
        below.
      </para>
    </listitem>

    <listitem>
      <para>
        Move <literal>SWARM_NEW</literal> to be a peer of
        <literal>SWARM_ROOT</literal>:
      </para>

<programlisting language="bash">
$ <command>mv SWARM_NEW SWARM_ROOT/../</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        Copy the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file from the old Swarm to the new Swarm:
      </para>

<programlisting language="bash">
$ <command>cp -p SWARM_ROOT/data/config.php SWARM_NEW/data/</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        Create the queue token directory:
      </para>

<programlisting language="bash">
$ <command>mkdir SWARM_NEW/data/queue</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        Copy the existing trigger token(s):
      </para>

<programlisting language="bash">
$ <command>sudo cp -pR SWARM_ROOT/data/queue/tokens SWARM_NEW/data/queue/</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        Assign correct ownership to the new Swarm's data directory:
      </para>

<programlisting language="bash">
$ <command>sudo chown -R <replaceable>www-data</replaceable> SWARM_NEW/data</command>
</programlisting>

      <note>
        <para>
          The <replaceable>www-data</replaceable> user above is an example of
          what the web server user name might be, and can vary based on
          distribution or customization. For example, the user is typically
          <literal>apache</literal> for Red Hat/Fedora/CentOS,
          <literal>www-data</literal> for Debian/Ubuntu,
          <literal>wwwrun</literal> for SuSE, <literal>_www</literal> for Mac
          OSX.
        </para>
      </note>
    </listitem>

    <listitem>
      <para>
        Copy the new Swarm trigger script to your Perforce server machine. The
        trigger script is
        <filename>SWARM_NEW/p4-bin/scripts/swarm-trigger.pl</filename>, and
        requires installation of Perl 5.08+ (use the latest available) on the
        Perforce server machine.
      </para>

      <warning>
        <para>
          Do not overwrite any existing trigger script at this time. Give the
          script a new name, for example:
          <filename>swarm-trigger-new.pl</filename>.
        </para>
      </warning>
    </listitem>

    <listitem>
      <para>
        Configure the Swarm trigger script by creating, in the same directory on
        the Perforce server machine, <filename>swarm-trigger.conf</filename>. It
        should contain:
      </para>

      <!-- vim: set ts=2 sw=2 tw=80 ai si: --><programlisting language="ini" version="5.0" xml:base="../common/swarm-trigger.conf.xml">
# SWARM_HOST (required)
# Hostname of your Swarm instance, with leading "http://" or "https://".
SWARM_HOST="<replaceable>http://my-swarm-host</replaceable>"

# SWARM_TOKEN (required)
# The token used when talking to Swarm to offer some security. To obtain the
# value, log in to Swarm as a super user and select 'About Swarm' to see the
# token value.
SWARM_TOKEN="<replaceable>MY-UUID-STYLE-TOKEN</replaceable>"

# ADMIN_USER (optional)
# For enforcing reviewed changes, optionally specify the normal Perforce user
# with admin privileges (to read keys); if not set, will use whatever Perforce
# user is set in environment.
ADMIN_USER=

# ADMIN_TICKET_FILE (optional)
# For enforcing reviewed changes, optionally specify the location of the
# p4tickets file if different from the default ($HOME/.p4tickets).
# Ensure this user is a member of a group with an 'unlimited' or very long
# timeout; then, manually login as this user from the Perforce server machine to
# set the ticket.
ADMIN_TICKET_FILE=
</programlisting>

      <para>
        Fill in the required <literal>SWARM_HOST</literal> and
        <literal>SWARM_TOKEN</literal> variables with the configuration from any
        previous Swarm trigger script, typically
        <filename>swarm-trigger.sh</filename>.
      </para>

      <note>
        <para>
          If you already have a <filename>swarm-trigger.conf</filename> file,
          no additional configuration is required.
        </para>
      </note>
    </listitem>

    <listitem>
      <para>
        For Linux systems, ensure that the script is executable:
      </para>

<programlisting>
$ <command>sudo chmod +x swarm-trigger-new.pl</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        Rename the new trigger script:
      </para>

<programlisting>
$ <command>mv swarm-trigger-new.pl swarm-trigger.pl</command>
</programlisting>

      <para>
        On Windows:
      </para>

<programlisting>
C:\&gt; <command>ren swarm-trigger-new.pl swarm-trigger.pl</command>
</programlisting>
    </listitem>

    <!-- vim: set ts=2 sw=2 tw=80 ai si: --><listitem version="5.0" xml:base="../common/listitem-update_triggers.xml">
  <para>
    Update the triggers in your Helix Versioning Engine.
  </para>

  <orderedlist>
    <listitem>
      <para>
        Run the Swarm trigger script to capture (using
        <keycombo action="simul"><keycap>Ctrl</keycap>
        <keycap>C</keycap></keycombo> on Windows and Linux,
        <keycombo action="simul"><keycap>Command</keycap>
        <keycap>C</keycap></keycombo> on Mac OSX) the trigger lines that should
        be included in the Perforce trigger table:
      </para>

<programlisting>
$ <command>./swarm-trigger.pl -o</command>
</programlisting>

      <para>
        On Windows:
      </para>

<programlisting>
C:\&gt; <command><replaceable>path/to/</replaceable>perl swarm-trigger.pl -o</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        As a Perforce user with <emphasis>super</emphasis> privileges, update
        the Perforce trigger table by running <command>p4 triggers</command>
        command and replacing any <literal>swarm.*</literal> lines with the
        previously captured trigger line output (using
        <keycombo action="simul"><keycap>Ctrl</keycap>
        <keycap>V</keycap></keycombo> on Windows and Linux,
        <keycombo action="simul"><keycap>Command</keycap>
        <keycap>V</keycap></keycombo> on Mac OSX).
      </para>
    </listitem>
  </orderedlist>

  <important>
    <para>
      If you previously customized the Swarm trigger lines, perhaps to apply
      various <xref linkend="admin.trigger"/>, be sure to repeat those
      customizations within the updated trigger lines.
    </para>
  </important>
</listitem>

    <listitem>
      <para>
        Replace the old Swarm with the new Swarm.
        <emphasis role="bold">Downtime occurs in this step.</emphasis>
      </para>

<programlisting language="bash">
$ <command>sudo apache2ctl stop; mv SWARM_ROOT to SWARM.old; mv SWARM_NEW SWARM_ROOT; sudo apache2ctl start</command>
</programlisting>
    </listitem>
  </orderedlist>

  <para>
    All done!
  </para>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="setup.upgrade.2015.1" xml:base="upgrade_2015.1.xml">
  <title>Upgrade Swarm 2015.1 to 2015.2</title>

  <para>
    This section covers the steps to upgrade from Swarm's 2015.1 release to the
    2015.2 release.
  </para>

  <orderedlist>
    <listitem>
      <para>
        Expand the new <filename>swarm.tgz</filename>:
      </para>

<programlisting language="bash">
$ <command>tar -zxf swarm.tgz</command>
</programlisting>

      <para>
        The contents of <filename>swarm.tgz</filename> are expanded into a
        top-level folder named
        <filename>swarm-<replaceable>version</replaceable></filename>, where
        <replaceable>version</replaceable> corresponds to the version
        downloaded. This directory is identified as <literal>SWARM_NEW</literal>
        below.
      </para>
    </listitem>

    <listitem>
      <para>
        Move <literal>SWARM_NEW</literal> to be a peer of
        <literal>SWARM_ROOT</literal>:
      </para>

<programlisting language="bash">
$ <command>mv SWARM_NEW SWARM_ROOT/../</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        Copy the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file from the old Swarm to
        the new Swarm:
      </para>

<programlisting language="bash">
$ <command>cp -p SWARM_ROOT/data/config.php SWARM_NEW/data/</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        Create the queue token directory:
      </para>

<programlisting language="bash">
$ <command>mkdir SWARM_NEW/data/queue</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        Copy the existing trigger token(s):
      </para>

<programlisting language="bash">
$ <command>sudo cp -pR SWARM_ROOT/data/queue/tokens SWARM_NEW/data/queue/</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        Assign correct ownership to the new Swarm's data directory:
      </para>

<programlisting language="bash">
$ <command>sudo chown -R <replaceable>www-data</replaceable> SWARM_NEW/data</command>
</programlisting>

      <note>
        <para>
          The <replaceable>www-data</replaceable> user above is an example of
          what the web server user name might be, and can vary based on
          distribution or customization. For example, the user is typically
          <literal>apache</literal> for Red Hat/Fedora/CentOS,
          <literal>www-data</literal> for Debian/Ubuntu,
          <literal>wwwrun</literal> for SuSE, <literal>_www</literal> for Mac
          OSX.
        </para>
      </note>
    </listitem>

    <listitem>
      <para>
        Replace the old Swarm with the new Swarm.
        <emphasis role="bold">Downtime occurs in this step.</emphasis>
      </para>

<programlisting language="bash">
sudo apache2ctl stop; mv SWARM_ROOT to SWARM.old; mv SWARM_NEW SWARM_ROOT; sudo apache2ctl start
</programlisting>
    </listitem>

    <listitem>
      <para>
        If your Swarm is not hosted on Windows, update the trigger entries in
        the Helix Versioning Engine.
      </para>

      <para>
        Swarm 2015.2 includes a new trigger script written in Perl.
        See <xref linkend="setup.perforce.triggers.linux"/> for details.
      </para>
    </listitem>
  </orderedlist>

  <para>
    All done!
  </para>
</section>
</section>
</chapter>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><chapter version="5.0" xml:id="chapter.basics" xml:base="basics/index.xml">
  <title>Basics</title>

  <para>
    This chapter covers the basic operations provided by Swarm. These include:
  </para>

  <simplelist columns="2">
    <member><xref linkend="basics.activity_streams"/></member>
    <member><xref linkend="basics.files"/></member>
    <member><xref linkend="basics.changelists"/></member>
    <member><xref linkend="basics.commits"/></member>
    <member><xref linkend="basics.jobs"/></member>
    <member><xref linkend="basics.diffs"/></member>
    <member><xref linkend="basics.comments"/></member>
    <member><xref linkend="basics.users"/></member>
    <member><xref linkend="basics.groups"/></member>
    <member><xref linkend="basics.projects"/></member>
    <member><xref linkend="basics.notifications"/></member>
    <member><xref linkend="basics.login_logout"/></member>
    <member><xref linkend="basics.notable"/></member>
  </simplelist>

  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="basics.activity_streams" xml:base="basics/activity.xml">
  <title>Activity streams</title>

  <para>
    An activity stream displays a list of events that have occurred recently in
    the associated Helix Versioning Engine, whenever changelists are checked in,
    jobs are created, code reviews are updated, comments posted, etc.
  </para>

  <para>
    <inlinemediaobject>
      <imageobject>
        <imagedata fileref="../../assets/html/images/panel-activity_stream.png"/>
      </imageobject>

      <textobject>
        <phrase>Activity Stream</phrase>
      </textobject>
    </inlinemediaobject>
  </para>

  <para>
    <inlinemediaobject>
      <imageobject condition="thumb">
        <imagedata fileref="../../assets/html/images/dropdown-activity.png"/>
      </imageobject>

      <textobject>
        <phrase>Activity drop-down menu</phrase>
      </textobject>
    </inlinemediaobject>

    Activity streams are presented for global server activity, as well as for
    events occurring for projects and users. Logged-in users can click the
    <guimenu>Activity</guimenu> drop-down menu to choose between viewing all
    activity or just the activity of the projects and users that they are
    following.
  </para>

  <para>
    <inlinemediaobject>
      <imageobject condition="thumb">
        <imagedata fileref="../../assets/html/images/thumb-activity_filters.png"/>
      </imageobject>

      <textobject>
        <phrase>Activity filter links</phrase>
      </textobject>
    </inlinemediaobject>

    Activity streams can be filtered to only display events related to reviews,
    changes, comments, or jobs. Click a filter label to enable that filter.
    Click the label again to disable the filter, or click a different filter to
    change filters.
  </para>

  <para>
    <inlinemediaobject>
      <imageobject condition="thumb">
        <imagedata fileref="../../assets/html/images/thumb-activity_filters-active.png"/>
      </imageobject>

      <textobject>
        <phrase>Activity filter links</phrase>
      </textobject>
    </inlinemediaobject>

    When active, each filter label displays a distinct background color that
    matches the color stripe on the right side of each event in the activity
    stream, to help quickly identify each event's type.
  </para>

  <para>
    <inlinemediaobject>
      <imageobject condition="thumb">
        <imagedata fileref="../../assets/html/images/icon-rss.png"/>
      </imageobject>

      <textobject>
        <phrase>RSS icon</phrase>
      </textobject>
    </inlinemediaobject>

    Anyone can subscribe to an RSS (Really Simply Syndication) feed for a
    particular activity stream so that events can be monitored in your favorite
    feed reader.
  </para>

  <para>
    Events within an activity stream contain links to their respective
    resources. Click the links to visit users, changelists, projects, comments,
    and more.
  </para>

  <para>
    <inlinemediaobject>
      <imageobject>
        <imagedata fileref="../../assets/html/images/thumb-activity_entry.png"/>
      </imageobject>

      <textobject>
        <phrase>An activity entry</phrase>
      </textobject>
    </inlinemediaobject>
  </para>

  <para>
    Each activity stream starts with as many as 50 events. As you scroll down
    the page, Swarm fetches additional events in batches of 50 until the stream
    is exhausted. For a long-running server, or a server with significant
    activity, it could take quite a while to receive all of the events.
  </para>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="basics.files" xml:base="basics/files.xml">
  <title>Files</title>

  <para>
    The Helix Versioning Engine's primary task is to version files, so Swarm
    makes it easy to browse the <glossterm linkend="Depot">depot</glossterm>.
    Start browsing by clicking the <guibutton>Files</guibutton> link in the top
    toolbar.
  </para>

  <para>
    <inlinemediaobject>
      <imageobject condition="frame">
        <imagedata fileref="../../assets/html/images/page-files.png"/>
      </imageobject>

      <textobject>
        <phrase>The File Browser</phrase>
      </textobject>
    </inlinemediaobject>
  </para>

  <itemizedlist>
    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/thumb-breadcrumbs.png"/>
          </imageobject>

          <textobject>
            <phrase>breadcrumbs</phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <para>
        Swarm displays a list of breadcrumb links to help you quickly navigate
        to higher level directories quickly.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/icon-folder.png"/>
          </imageobject>

          <textobject>
            <phrase>folder icon</phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <para>
        Links with folder icons represent directories of files within the depot.
        Click a directory link to display the contents of that directory.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/icon-folder-parent.png"/>
          </imageobject>

          <textobject>
            <phrase>parent folder icon</phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <para>
        Click the <guibutton>..</guibutton> link with the up-arrow icon, when it
        appears, to navigate to the current directory's parent.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/icon-file.png"/>
          </imageobject>

          <textobject>
            <phrase>file icon</phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <para>
        Links with dog-eared page icons represent individual files within the
        depot. See <link linkend="basics.files.display">below</link> for more
        information.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/tabs-history-files.png"/>
          </imageobject>

          <textobject>
            <phrase>History tab</phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <para>
        Click the <guibutton>History</guibutton> tab to display the list of
        changes made to files in the current directory, or any directories it
        contains. See <xref linkend="basics.history"/> for more information.
      </para>
    </listitem>
  </itemizedlist>

  <para>
    <inlinemediaobject>
      <imageobject condition="thumb">
        <imagedata fileref="../../assets/html/images/thumb-folder_link.png"/>
      </imageobject>

      <textobject>
        <phrase>a linked folder</phrase>
      </textobject>
    </inlinemediaobject>
  </para>

  <para>
    Swarm creates links for files and directories wherever they appear in the
    Swarm UI.
  </para>

  <note>
    <para>
      Directories that start with a period, for example
      <filename>.git-fusion</filename>, are sorted to appear at the end of the
      list of directories. The <guibutton>..</guibutton> link, when it appears,
      always appears first.
    </para>

    <para>
      Similarly, files that start with a period, for example
      <filename>.htaccess</filename>, are sorted to appear at the end of the
      list of files.
    </para>
  </note>

  <section xml:id="basics.files.zip">
    <title>Downloading files as ZIP archive</title>

    <para>
      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/button-download_zip.png"/>
        </imageobject>

        <textobject>
          <phrase>The Downloads.zip button</phrase>
        </textobject>
      </inlinemediaobject>

      When the <command>zip</command> command-line tool is available, Swarm can
      provide a ZIP archive for a file or folder within the Helix Versioning
      Engine. This makes it easy to get a copy of files without having to setup
      a client.
    </para>

    <note>
      <para>
        The <guibutton>Download .zip</guibutton> button does not appear if the
        <command>zip</command> command-line tool is not available.
      </para>
    </note>

    <para>
      When you click the <guibutton>Download .zip</guibutton> button, Swarm
      performs the following steps:
    </para>

    <orderedlist>
      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/thumb-zip-initializing.png"/>
            </imageobject>

            <textobject>
              <phrase>Initializing a ZIP archive</phrase>
            </textobject>
          </inlinemediaobject>

          scan the selected file/folder, to determine if you have permission to
          access the contents (according to the Helix Versioning Engine
          protections), and if the file/folder is small enough to be processed
          by Swarm.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/thumb-zip-syncing.png"/>
            </imageobject>

            <textobject>
              <phrase>Syncing files for compression</phrase>
            </textobject>
          </inlinemediaobject>

          sync the file/folder contents to the Swarm server from the Helix
          Versioning Engine.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/thumb-zip-compressing.png"/>
            </imageobject>

            <textobject>
              <phrase>
                Creating the ZIP archive by compressing the file content
              </phrase>
            </textobject>
          </inlinemediaobject>

          create the ZIP archive by compressing the file content.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/thumb-zip-downloading.png"/>
            </imageobject>

            <textobject>
              <phrase>
                Downloading the ZIP archive
              </phrase>
            </textobject>
          </inlinemediaobject>

          start a download of the generated ZIP archive.
        </para>
      </listitem>
    </orderedlist>

    <para>
      You might not see all of the above steps; Swarm caches the resulting ZIP
      archives so that repeated requests to the same file/folder can skip the
      sync/compress steps whenever possible.
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/thumb-zip-error.png"/>
        </imageobject>

        <textobject>
          <phrase>
            An error was encountered while preparing the ZIP archive
          </phrase>
        </textobject>
      </inlinemediaobject>

      If an error occurs while scanning, syncing, or compressing, Swarm
      indicates the error.
    </para>

    <para>
      For information on the configuration for ZIP archives, see
      <xref linkend="admin.archives"/>.
    </para>
  </section>

  <section xml:id="basics.files.browse_deleted">
    <title>Browsing deleted files and folders</title>

    <para>
      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/button-show_deleted_files.png"/>
        </imageobject>

        <textobject>
          <phrase>The Show Deleted Files button</phrase>
        </textobject>
      </inlinemediaobject>
    </para>

    <para>
      When the <guibutton>Show Deleted Files</guibutton> button is clicked,
      Swarm toggles the inclusion of deleted folders and files in the file
      display.
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/thumb-deleted_folder_and_file.png"/>
        </imageobject>

        <textobject>
          <phrase>A file listing with a deleted folder and file.</phrase>
        </textobject>
      </inlinemediaobject>
    </para>

    <para>
      Deleted folders and files are presented slightly muted compared to
      non-deleted entries.
    </para>
  </section>

  <section xml:id="basics.files.display">
    <title>File display</title>

    <para>
      When Swarm is asked to display a file, if the file is a type that Swarm
      can display, Swarm presents the file's contents. Clicking the
      <guibutton>Open</guibutton> button displays the file content with no
      surrounding page markup. Clicking the <guibutton>Download</guibutton>
      button causes the file to be downloaded.
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/thumb-file_versions.png"/>
        </imageobject>

        <textobject>
          <phrase>Version 2 of logo-lg.png</phrase>
        </textobject>
      </inlinemediaobject>
    </para>

    <para>
      Along with the file's name, Swarm displays the version number for the
      currently displayed file. For example, this heading indicates that version
      <literal>2</literal> of <filename>logo-lg.png</filename> is being
      displayed. Every version of a file is available on the
      <xref linkend="basics.history"/> tab.
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/thumb-file_versions-deleted.png"/>
        </imageobject>

        <textobject>
          <phrase>A deleted version number</phrase>
        </textobject>
      </inlinemediaobject>
    </para>

    <para>
      If the version of a file being previewed has been deleted, the
      version number appears in red:
    </para>

    <section xml:id="basics.files.text-files">
      <title>Text Files</title>

      <para>
        Swarm displays the contents of text files (include the Perforce
        filetypes <literal>unicode</literal> and <literal>UTF16</literal>) with
        line numbers. When possible, syntax highlighting is applied to make
        identification of various elements within the file easier.
      </para>

      <tip>
        <para>
          For more information on Perforce filetypes, see
          <link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/cmdref/o.ftypes.html#1040647">Perforce
          Command Reference: File Types</link>
        </para>
      </tip>

      <para>
        <inlinemediaobject>
          <imageobject condition="frame">
            <imagedata fileref="../../assets/html/images/page-file-display.png"/>
          </imageobject>

          <textobject>
            <phrase>a displayed text file</phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/button-blame.png"/>
          </imageobject>

          <textobject>
            <phrase>The Blame button</phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <para>
        Click <guibutton>Blame</guibutton> to add a column to the display that
        identifies the userid responsible for each line of the file.
      </para>

      <para>
        <inlinemediaobject>
          <imageobject condition="frame">
            <imagedata fileref="../../assets/html/images/page-file-display-blame.png"/>
          </imageobject>

          <textobject>
            <phrase>A displayed text file with blame</phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <para>
        Each userid presented is a link that, when clicked, displays the
        changelist that provided the associated text. Muted userids indicate
        that the associated text is from the same changelist as the line above.
        For example, the userid <emphasis>gnicol</emphasis> is responsible for
        lines 1 through 9 in the screenshot above.
      </para>

      <para>
        When you hover your pointer over a userid in the blame column, a tooltip
        appears displaying the associated changelist description.
      </para>

      <para>
        <inlinemediaobject>
          <imageobject>
            <imagedata fileref="../../assets/html/images/thumb-blame-changelist.png"/>
          </imageobject>

          <textobject>
            <phrase>The changelist associated with the current line</phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <para>
        When there are no lines displayed, for example when you are viewing
        empty or shelved files, the <guibutton>Blame</guibutton> button is
        disabled.
      </para>
    </section>

    <section xml:id="basics.files.images">
      <title>Images</title>

      <para>
        Swarm displays web-safe images.
      </para>

      <para>
        <inlinemediaobject>
          <imageobject condition="frame">
            <imagedata fileref="../../assets/html/images/page-file-display-image.png"/>
          </imageobject>

          <textobject>
            <phrase>a displayed image</phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <para>
        The checkerboard background in this example is not part of the
        logo; it helps identify where transparency exists.
      </para>

      <para>
        Many browsers can display <literal>SVG</literal> images with no
        additional plugins, so Swarm attempts to display <literal>SVG</literal>
        images rather than displaying the image's definition. When you use a
        browser that cannot natively display <literal>SVG</literal> images, you
        see the <emphasis>broken image</emphasis> icon.
      </para>

      <para>
        When <literal>imagick</literal> (an optional module that integrates
        ImageMagick into PHP) is installed, Swarm can also display the following
        image formats: <glossterm linkend="BMP"><literal>BMP</literal></glossterm>,
        <glossterm linkend="EPS"><literal>EPS</literal></glossterm>,
        <glossterm linkend="PSD"><literal>PSD</literal></glossterm>,
        <glossterm linkend="TGA"><literal>TGA</literal></glossterm>,
        <glossterm linkend="TIFF"><literal>TIFF</literal></glossterm>.
      </para>
    </section>

    <section xml:id="basics.files.3d">
      <title>3D models</title>

      <para>
        Swarm 2014.1 includes support for displaying select 3D model file types
        in the browser:
      </para>

      <para>
        <inlinemediaobject>
          <imageobject condition="frame">
            <imagedata fileref="../../assets/html/images/panel-3d_model.png"/>
          </imageobject>

          <textobject>
            <phrase>a 3D model rendered in Swarm</phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <para>
        Supported file types include:
      </para>

      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">DAE</emphasis> - including any referenced
            web-safe texture images.
          </para>
        </listitem>

        <listitem>
          <para>
            <emphasis role="bold">STL</emphasis> - both binary and ASCII versions
            of the format.
          </para>
        </listitem>

        <listitem>
          <para>
            <emphasis role="bold">OBJ</emphasis> - including any referenced
            <literal>MTL</literal> files, and web-safe texture images.
          </para>
        </listitem>
      </itemizedlist>

      <para>
        When Swarm can display a 3D model, it renders a generic grid
        <emphasis>stage</emphasis> and places the model in the center, scaled to
        make viewing straightforward. A toggle control appears in the top right:
        when enabled, you can control the view with the mouse, and when not
        enabled, permits auto-rotation to occur (when possible).
      </para>

      <orderedlist>
        <listitem>
          <para>
            Click and hold the <emphasis role="bold">left mouse
            button</emphasis> to begin rotating the view. Drag
            while holding the left mouse button to rotate the view.
          </para>
        </listitem>

        <listitem>
          <para>
            Click and hold the <emphasis role="bold">right mouse
            button</emphasis> to begin panning the view. Drag while holding the
            right mouse button to pan the view.
          </para>
        </listitem>

        <listitem>
          <para>
            Roll the <emphasis role="bold">mouse wheel</emphasis> up or down to
            adjust the magnification of the view.
          </para>
        </listitem>
      </orderedlist>

      <para>
        When possible, a second control appears allowing you to toggle between
        showing the model with surfaces, or just showing the model's wireframe.
      </para>

      <note>
        <para>
          For systems with hardware acceleration, if your browser supports WebGL
          and hardware acceleration is enabled, Swarm renders the model and
          enables auto-rotation.
        </para>

        <para>
          For systems without hardware acceleration or WebGL, but your browser
          supports HTML5 canvas elements and JavaScript TypedArrays, Swarm
          renders the model but auto-rotation is disabled. Rendering is likely
          to be slow and rendering quality is likely to be low.
        </para>

        <para>
          For browsers without HTML5 canvas elements and JavaScript TypedArrays,
          no rendering is attempted; instead, users see a message indicating
          that the browser is not supported.
        </para>
      </note>
    </section>

    <section xml:id="basics.files.other-file-types">
      <title>Other file types</title>

      <para>
        It is possible to view other file types in Swarm, through the addition
        of additional modules, or by installing
        <xref linkend="integrations.libreoffice"/> on the Swarm host.
      </para>

      <para>
        When the file is a type that Swarm cannot display, Swarm presents the
        file's <link linkend="basics.history">history</link>, along with the
        <guibutton>Download</guibutton> button.
      </para>

      <para>
        <inlinemediaobject>
          <imageobject condition="frame">
            <imagedata fileref="../../assets/html/images/page-file-no_display.png"/>
          </imageobject>

          <textobject>
            <phrase>a file that cannot be displayed</phrase>
          </textobject>
        </inlinemediaobject>
      </para>
    </section>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="basics.commits" xml:base="basics/commits.xml">
  <title>Commits</title>

  <para xml:id="basics.history">
    Whenever a new version of a file is checked into the Helix Versioning
    Engine, a commit record is created. Begin browsing the history of commits by
    clicking the <guibutton>Commits</guibutton> link in the main toolbar.
  </para>

  <para>
    <inlinemediaobject>
      <imageobject condition="frame">
        <imagedata fileref="../../assets/html/images/page-commits.png"/>
      </imageobject>

      <textobject>
        <phrase>The Commits page</phrase>
      </textobject>
    </inlinemediaobject>
  </para>

  <para>
    When you are viewing a particular file or directory, clicking the
    <guibutton>Commits</guibutton> tab displays the commits for that location in
    the depot.
  </para>

  <para>
    <inlinemediaobject>
      <imageobject condition="frame">
        <imagedata fileref="../../assets/html/images/page-commits-location.png"/>
      </imageobject>

      <textobject>
        <phrase>The Commits page for a specific depot location</phrase>
      </textobject>
    </inlinemediaobject>
  </para>

  <section xml:id="basics.commits.range">
    <title>Range filter</title>

    <para>
      <inlinemediaobject>
        <imageobject condition="popup">
          <imagedata fileref="../../assets/html/images/dropdown-history_range.png"/>
        </imageobject>

        <textobject>
          <phrase>The Range field's syntax summary dropdown.</phrase>
        </textobject>
      </inlinemediaobject>

      The <guilabel>Range</guilabel> field lets you filter the list of changes
      for the depot path being viewed. When you click the
      <guilabel>Range</guilabel> field, a dropdown syntax guide appears
      providing sample commit filtering expressions.
    </para>

    <para>
      The expressions that can be used within the <guilabel>Range</guilabel>
      field include:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <literal>@0,@now</literal> (the default): displays all commits
          for the current depot path.
        </para>
      </listitem>

      <listitem>
        <para>
          <literal>@80,@90</literal>: displays all changes between 80 and 90.
        </para>
      </listitem>

      <listitem>
        <para>
          <literal>@80</literal>: displays all changes up to change 80.
        </para>
      </listitem>

      <listitem>
        <para>
          <literal>@=80</literal>: displays only change 80. Change 80 might not
          involve the current depot path, so there may be no commits to
          display.
        </para>
      </listitem>

      <listitem>
        <para>
          <literal>@<replaceable>label-name</replaceable></literal>: any changes
          represented by label <replaceable>label-name</replaceable>.
        </para>
      </listitem>

      <listitem>
        <para>
          <literal>@2014/11/30</literal>: displays all changes up to November
          30, 2014.
        </para>
      </listitem>

      <listitem>
        <para>
          <literal>@2014/11/30,@now</literal>: displays all changes from
          November 30, 2014 to now.
        </para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="basics.commits.file">
    <title>File Commits</title>

    <para>
      A file's commit history presents each version of a file that the Helix
      Versioning Engine knows about, including the change number, userid, change
      description, time ago, along with <guibutton>Open</guibutton> and
      <guibutton>Download</guibutton> buttons.
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="frame">
          <imagedata fileref="../../assets/html/images/page-file-history.png"/>
        </imageobject>

        <textobject>
          <phrase>The Commits page for a file</phrase>
        </textobject>
      </inlinemediaobject>
    </para>

    <para>
      Swarm also displays <emphasis>contributing commits</emphasis> when
      available, such as when a file has been renamed, or integrated from another
      location in the Helix Versioning Engine.
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/icon-trashcan.png"/>
        </imageobject>

        <textobject>
          <phrase>The trashcan icon represents a deleted version</phrase>
        </textobject>
      </inlinemediaobject>
    </para>

    <para>
      If a commit represents a deleted revision, the <guibutton>Open</guibutton>
      and <guibutton>Download</guibutton> links are replaced with a trashcan
      icon to indicate that this version is no longer available.
    </para>
  </section>

  <section xml:id="basics.commits.remote-depot-commits">
    <title>Remote depot commits</title>

    <para>
      When your Helix Versioning Engine has a
      <glossterm linkend="Remote_Depot">remote depot</glossterm> configured, you
      can browse the contents of the remote depot, but remote depots do not
      share their commit history. If you attempt to view the commits of a file
      provided by a remote depot, Swarm displays:
    </para>

    <para>
      <inlinemediaobject>
        <imageobject>
          <imagedata fileref="../../assets/html/images/page-remote_depot.png"/>
        </imageobject>
      </inlinemediaobject>
    </para>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="basics.jobs" xml:base="basics/jobs.xml">
  <title>Jobs</title>

  <para>
    <glossterm linkend="job">Jobs</glossterm> are a component of Perforce's
    defect tracking system and a record of bugs found or improvement requests.
    Jobs can be associated with
    <link linkend="basics.changelists">changelists</link> to create
    <emphasis>fix</emphasis> records, indicating the work that solved the
    problem or provided the requested feature. Begin browsing jobs by clicking
    the <guibutton>Jobs</guibutton> link in the main toolbar.
  </para>

  <para>
    <inlinemediaobject>
      <imageobject condition="frame">
        <imagedata fileref="../../assets/html/images/page-jobs.png"/>
      </imageobject>

      <textobject>
        <phrase>The Jobs page</phrase>
      </textobject>
    </inlinemediaobject>
  </para>

  <para>
    You can search available jobs by entering a job filter in the search
    box. Words, phrases, and
    <parameter><replaceable>field</replaceable>=<replaceable>value</replaceable></parameter>
    pairs can be entered. For example, entering <literal>reportedby=slord
    swarm</literal> displays jobs that the user <emphasis>slord</emphasis> has
    reported that also contain the word <literal>swarm</literal> in its
    description.
  </para>

  <para>
    <inlinemediaobject>
      <imageobject condition="frame">
        <imagedata fileref="../../assets/html/images/page-jobs-search.png"/>
      </imageobject>

      <textobject>
        <phrase>Searching Jobs</phrase>
      </textobject>
    </inlinemediaobject>
  </para>

  <para>
    The fields you can search for depend on the
    <glossterm linkend="jobspec">jobspec</glossterm> defined in your Helix
    Versioning Engine.
  </para>

  <section xml:id="basics.jobs.adjust_columns">
    <title>Adjusting Jobs columns</title>

    <para>
      You can configure the columns that are displayed:
    </para>

    <orderedlist>
      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/button-jobs_columns.png"/>
            </imageobject>

            <textobject>
              <phrase>Button to configure Jobs columns</phrase>
            </textobject>
          </inlinemediaobject>

          Click the button beside the search field to display a tooltip menu
          showing all of the available
          <glossterm linkend="jobspec">jobspec</glossterm> fields.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="popup">
              <imagedata fileref="../../assets/html/images/tooltip-job_columns.png"/>
            </imageobject>

            <textobject>
              <phrase>
                Selecting <glossterm linkend="jobspec">jobspec</glossterm>
                fields to display
              </phrase>
            </textobject>
          </inlinemediaobject>
        </para>

        <para>
          While the tooltip menu is displayed, check or uncheck the columns to
          configure which columns to display.
        </para>
      </listitem>

      <listitem>
        <para>
          Click the button again, or a blank portion of the page, to hide the
          tooltip.
        </para>
      </listitem>
    </orderedlist>

    <para>
      <inlinemediaobject>
        <imageobject condition="frame">
          <imagedata fileref="../../assets/html/images/page-jobs-extra_columns.png"/>
        </imageobject>

        <textobject>
          <phrase>Additional columns in the Jobs display</phrase>
        </textobject>
      </inlinemediaobject>
    </para>

    <para>
      You can also adjust the order of the columns, in one of two ways:
    </para>

    <orderedlist>
      <listitem>
        <para>
          With the tooltip menu displayed, click and drag column labels up or
          down to adjust their position.
        </para>
      </listitem>

      <listitem>
        <para>
          When the tooltip menu is not displayed, click a column heading
          and drag it to the left or right to move the column to a new
          position.
        </para>
      </listitem>
    </orderedlist>

    <para>
      The column display updates as columns are rearranged:
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="frame">
          <imagedata fileref="../../assets/html/images/page-jobs-reordered.png"/>
        </imageobject>

        <textobject>
          <phrase>Reordered Jobs columns</phrase>
        </textobject>
      </inlinemediaobject>
    </para>

    <tip>
      <para>
        For more information on customizing jobspecs, see:
        <link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4sag/05_jobspec.html">Perforce
        System Administrator's Guide: Job Specifications</link>
      </para>
    </tip>
  </section>

  <section xml:id="basics.jobs.display">
    <title>Job display</title>

    <para>
      Jobs are typically identified with the word job followed by six
      digits, e.g. <literal>job000123</literal>.
    </para>

    <para>
      View a specific job by clicking on a linked job identifier, or by visiting
      the URL:
    </para>

<programlisting>
https://<replaceable>myswarm.url</replaceable>/<replaceable role="bold">jobs</replaceable>/<replaceable>jobid</replaceable>
</programlisting>

    <para>
      When Swarm displays a job, the presentation is similar to:
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="frame">
          <imagedata fileref="../../assets/html/images/page-job.png"/>
        </imageobject>

        <textobject>
          <phrase>A Job</phrase>
        </textobject>
      </inlinemediaobject>
    </para>

    <para>
      The upper portion of the job presentation includes:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          The avatar and userid of the user that created the job
        </para>
      </listitem>

      <listitem>
        <para>
          The job's <link linkend="basics.notable.time">creation time</link>
        </para>
      </listitem>

      <listitem>
        <para>
          If changes have been made to the job, the modifying userid and
          <link linkend="basics.notable.time">time</link>
        </para>
      </listitem>

      <listitem>
        <para>
          A status indicator
        </para>
      </listitem>
      <listitem>
        <para>
          The job's description
        </para>
      </listitem>
      <listitem>
        <para>
          If

          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/icon-pending.png"/>
            </imageobject>

            <textobject>
              <phrase>A pending changelist</phrase>
            </textobject>
          </inlinemediaobject>

          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/icon-committed.png"/>
            </imageobject>

            <textobject>
              <phrase>A committed changelist</phrase>
            </textobject>
          </inlinemediaobject>

          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/icon-review.png"/>
            </imageobject>

            <textobject>
              <phrase>A changelist in a review</phrase>
            </textobject>
          </inlinemediaobject>

          any changelists have been submitted that <emphasis>fix</emphasis>
          the job, a list of those changelists and their descriptions. Each
          associated changelist includes an icon to represent their type
        </para>
      </listitem>
    </itemizedlist>

    <para>
      The lower portion of the job presentation lists all of the keys
      configured in your Helix Versioning Engine's
      <glossterm linkend="jobspec">jobspec</glossterm>. Swarm inspects the
      jobspec and enhances the presentation of fields it recognizes. For
      example, date fields display as <emphasis>time ago</emphasis>, and links
      are created for userids.
    </para>

    <para>
      Click 

      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/tab-job-comments-tooltip.png"/>
        </imageobject>

        <textobject>
          <phrase>Drop-down menu for flagging a comment as a task.</phrase>
        </textobject>
      </inlinemediaobject>

      the <link linkend="basics.comments">Comments</link> tab to view any
      comments added to the job, or to add a comment. Adding a comment sends a
      <link linkend="basics.notifications">notification</link>. The
      <guilabel>Comments</guilabel> tab display the number of open comments
      associated with the job. If you hover your mouse over the comment count, a
      tooltip is displayed showing how many comments are archived.
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="frame">
          <imagedata fileref="../../assets/html/images/panel-job_comments.png"/>
        </imageobject>

        <textobject>
          <phrase>A comment on a job</phrase>
        </textobject>
      </inlinemediaobject>
    </para>

    <tip>
      <para>
        For more information on customizing job specifications, see:
        <link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4sag/05_jobspec.html">Perforce
        System Administrator's Guide: Job Specifications</link>
      </para>
    </tip>

    <note>
      <para>
        The default Perforce job specification contains very few fields. Adding
        fields to record additional information, such as the modification time
        and userid, reporting time and userid, can assist Swarm use appropriate
        terminology when describing the current disposition of a job.
      </para>
    </note>
  </section>

  <section xml:id="basics.jobs.add">
    <title>Adding jobs</title>

    <para>
      Swarm does not provide the ability to create new jobs in the Helix
      Versioning Engine, but jobs can be added to changelists or reviews:
    </para>

    <orderedlist>
      <listitem>
        <para>
          Navigate to a changelist or review.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/button-add_job.png"/>
            </imageobject>

            <textobject>
              <phrase>The Add Job link </phrase>
            </textobject>
          </inlinemediaobject>

          Click the <literal>Add Job</literal> link.
        </para>
      </listitem>

      <listitem>
        <para>
          Scroll through the available jobs, or enter job search
          criteria to search available jobs.
        </para>

        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/dialog-job_search.png"/>
            </imageobject>

            <textobject>
              <phrase>The Job Search dialog </phrase>
            </textobject>
          </inlinemediaobject>
        </para>

        <tip>
          <para>
            For more information on job search criteria, see
            <link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4guide/08_jobs.html">Perforce
            User's Guide: Jobs</link>.
          </para>
        </tip>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/button-select.png"/>
            </imageobject>

            <textobject>
              <phrase>The Job Search Select button </phrase>
            </textobject>
          </inlinemediaobject>

          If you find the job you want to add, click its row to highlight it and
          then click <guibutton>Select</guibutton>. Or, double-click the desired
          job to add it.
        </para>

        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/button-cancel.png"/>
            </imageobject>

            <textobject>
              <phrase>The Job Search Cancel button </phrase>
            </textobject>
          </inlinemediaobject>

          If you do not find the appropriate job, click
          <guibutton>Cancel</guibutton>.
        </para>
      </listitem>
    </orderedlist>

    <note>
      <para>
        If you attempt to add a job to a review that affects a single project,
        Swarm applies the project's job view filter to display only jobs that
        affect the project. It is not currently possible to expand the filter to
        include jobs outside of the project.
      </para>
    </note>
  </section>

  <section xml:id="basics.jobs.unlink">
    <title>Unlinking jobs</title>

    <para>
      Swarm does not provide the ability to delete jobs from the Helix
      Versioning Engine, but jobs can be unlinked from changelists or reviews:
    </para>

    <orderedlist>
      <listitem>
        <para>
          Navigate to a changelist or review that has an associated job.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/button-unlink_job.png"/>
            </imageobject>

            <textobject>
              <phrase>The Unlink Job button </phrase>
            </textobject>
          </inlinemediaobject>

          Click the <guibutton>X</guibutton> button beside the job.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/tooltip-unlink_job.png"/>
            </imageobject>

            <textobject>
              <phrase>The Unlink Job tooltip </phrase>
            </textobject>
          </inlinemediaobject>

          A confirmation tooltip appears. Click <guibutton>Unlink</guibutton>
          in the tooltip to unlink the job.
        </para>
      </listitem>
    </orderedlist>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="basics.changelists" xml:base="basics/changelists.xml">
  <title>Changelists</title>

  <para>
    Changelists are the basic unit of versioning work in Perforce. A changelist
    is a list of files, their revision numbers, and the changes made to those
    files. Commits is a shorter synonym used throughout Swarm.
  </para>
  
  <tip>
<literallayout>More information is available about:
<link linkend="basics.history">Browsing changelists</link>.
<link linkend="basics.users">Browsing a user's shelved changelists</link>.
<link linkend="code_reviews.model.internal">Swarm's internal use of changelists</link> to facilitate code reviews.
</literallayout>
  </tip>

  <section xml:id="basics.changelists.display">
    <title>Changelist Display</title>

    <para>
      View a specific <glossterm linkend="Changelist">changelist</glossterm> by
      clicking on a linked changelist number, or by visiting the URL:
    </para>

<programlisting>
https://<replaceable>myswarm.url</replaceable>/<replaceable role="bold">changes</replaceable>/<replaceable>changelist number</replaceable>
</programlisting>

    <para>
      When Swarm displays a change, the presentation is similar to:
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="frame">
          <imagedata fileref="../../assets/html/images/page-change.png"/>
        </imageobject>

        <textobject>
          <phrase>The Change page</phrase>
        </textobject>
      </inlinemediaobject>
    </para>

    <para>
      The changelist display includes:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          The avatar and userid of the user who made the change
        </para>
      </listitem>

      <listitem>
        <para>
          The time the change was made
        </para>
      </listitem>

      <listitem>
        <para>
          The common depot location containing all the files included in the
          change
        </para>
      </listitem>

      <listitem>
        <para>
          The description of the change
        </para>
      </listitem>

      <listitem>
        <para>
          A list of jobs that this change <emphasis>fixes</emphasis>, if
          any. You can <link linkend="basics.jobs.add">add jobs</link> and
          <link linkend="basics.jobs.unlink">unlink jobs</link> here.
        </para>
      </listitem>

      <listitem>
        <para>
          The list of files included in the change, including any folders
          between the common depot location and the file, and the file's version
          number.
        </para>
      </listitem>

      <listitem>
        <para>
          A tab to review any comments made regarding the change, or any of its
          files.
        </para>
      </listitem>
    </itemizedlist>

    <para>
      Each file is presented in a diff display, showing you whether the file was
      added, modified, or deleted. For text-based and image files, Swarm can
      display any changes made within the file. For changes with only a single
      file, the diff display is the default; otherwise each file is listed.
      Click the filename to see the diff display. See
      <xref linkend="basics.diffs"/> for more information.
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/button-request_review.png"/>
        </imageobject>

        <textobject>
          <phrase>The Request Review button</phrase>
        </textobject>
      </inlinemediaobject>
    </para>

    <para>
      The <guibutton>Request Review</guibutton> button indicates the current
      state of this change; no Review record has been created. Clicking on
      <guibutton>Request Review</guibutton> starts a code review for this
      change. For more information, see:
      <xref linkend="code_reviews.activities.start"/>.
    </para>

    <!-- vim: set ts=2 sw=2 tw=80 ai si: --><important version="5.0" xml:base="../common/important-start_review_on_edge.xml">
  <para>
    If your Helix Versioning Engine is configured as a commit-edge deployment,
    and your normal connection is to an edge server, Swarm refuses to start
    reviews for shelved changes that have not been promoted to the commit
    server.
  </para>

  <para>
    Within Swarm, this means that the <guilabel>Request Review</guilabel> button
    does not appear for unpromoted shelved changes. Outside of Swarm, attempts
    to start reviews for unpromoted shelved changelists appear to do nothing.
    Ask your Helix Versioning Engine administrator for assistance if you cannot
    start a review.
  </para>

  <para>
    An administrator of the Helix Versioning Engine can automatically promote
    shelved changes to the commit server by setting the configurable
    <literal>dm.shelve.promote</literal> to <literal>1</literal>.
  </para>
</important>

    <para>
      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/icon-comments_exist.png"/>
        </imageobject>

        <textobject>
          <phrase>The Comments Exist icon</phrase>
        </textobject>
      </inlinemediaobject>
    </para>

    <para>
      When a file in a changelist has one or more associated comments, an icon
      appears near the far right of the file's entry.
    </para>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="basics.diffs" xml:base="basics/diffs.xml">
  <title>Diffs</title>

  <para>
    When you view a changelist or code review, the associated files are
    presented as <emphasis>diffs</emphasis>, short for differences,
    showing you how they have changed.
  </para>

  <mediaobject>
    <imageobject condition="frame">
      <imagedata fileref="../../assets/html/images/panel-diffs.png"/>
    </imageobject>

    <textobject>
      <phrase>initial Diff display</phrase>
    </textobject>
  </mediaobject>

  <para>
    <inlinemediaobject>
      <imageobject condition="thumb">
        <imagedata fileref="../../assets/html/images/buttons-diff-global.png"/>
      </imageobject>

        <textobject>
          <phrase>Diff buttons for all files</phrase>
        </textobject>
    </inlinemediaobject>

    The first row of buttons above the files allow you to (left to right):
  </para>

  <itemizedlist>
    <listitem>
      <para>
        Toggle the display of comments
      </para>
    </listitem>

    <listitem>
      <para>
        Show all diffs as inline
      </para>
    </listitem>

    <listitem>
      <para>
        Show all diffs as side-by-side
      </para>
    </listitem>

    <listitem>
      <para>
        Collapse all files
      </para>
    </listitem>

    <listitem>
      <para>
        Expand all files
      </para>
    </listitem>
  </itemizedlist>

  <para>
    Each file is presented with an icon indicating whether the file was:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="inline">
            <imagedata fileref="../../assets/html/images/icon-add.png"/>
          </imageobject>

          <textobject>
            <phrase>File Added icon</phrase>
          </textobject>
        </inlinemediaobject>
        
        Added/branched/imported
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="inline">
            <imagedata fileref="../../assets/html/images/icon-edit.png"/>
          </imageobject>

          <textobject>
            <phrase>File Edited/Integrated icon</phrase>
          </textobject>
        </inlinemediaobject>
        
        Edited/integrated
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="inline">
            <imagedata fileref="../../assets/html/images/icon-delete.png"/>
          </imageobject>

          <textobject>
            <phrase>File Deleted icon</phrase>
          </textobject>
        </inlinemediaobject>
        
        Deleted
      </para>
    </listitem>
  </itemizedlist>

  <para>
    <inlinemediaobject>
      <imageobject condition="thumb">
        <imagedata fileref="../../assets/html/images/buttons-diff-local.png"/>
      </imageobject>

      <textobject>
        <phrase>Diff buttons for a single file</phrase>
      </textobject>
    </inlinemediaobject>
  </para>

  <para>
    The file's presentation can be controlled with (left to right):
  </para>

  <itemizedlist>
    <listitem>
      <para>
        <guibutton>Show In-line</guibutton> button, which highlights line
        additions, modifications, and removals in a single pane.
      </para>
    </listitem>

    <listitem>
      <para>
        <guibutton>Show Side-by-Side</guibutton> button, which highlights
        additions, modifications, and removals in two panes, with the older
        version of the file on the left, and the newer version on the right.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="popup">
            <imagedata fileref="../../assets/html/images/panel-diff-2up-whitespace.png"/>
          </imageobject>

          <textobject>
            <phrase>Show Whitespace enabled</phrase>
          </textobject>
        </inlinemediaobject><guibutton>Show Whitespace</guibutton> button, which
        makes whitespace characters more visible; spaces show up as dots, and
        tabs show up as arrows that point to a bar.
      </para>
    </listitem>

    <listitem>
      <para>
        <guibutton>Ignore Whitespace</guibutton> button, which toggles the
        highlighting of whitespace changes in a file, making it easier to
        identify non-formatting changes.
      </para>
    </listitem>

    <listitem>
      <para>
        <guibutton>Show Full Context</guibutton> button toggles between
        displaying only the portions of the file that have changed and the full
        file (edited and integrated files only).
      </para>
    </listitem>

    <listitem>
      <para>
        <guibutton>Show File</guibutton> button, displayed only for edited or
        integrated files, opens a new browser tab/window display the full file
        (where possible), provide access to its history, and a button to
        download the file.
      </para>
    </listitem>

    <listitem>
      <para>
        <guibutton>Mark as Read</guibutton> button, displayed only for code
        reviews, helps you (and others) keep track of which files have been
        reviewed. This is particularly useful when a code review consists of
        many files.
      </para>

      <para>
        When clicked, the button's colors invert and the associated file is
        visually muted, to make it easy to distinguish read files from unread
        files:
      </para>

      <para>
        <inlinemediaobject>
          <imageobject>
            <imagedata fileref="../../assets/html/images/panel-diffs-marked_read.png"/>
          </imageobject>

          <textobject>
            <phrase>A file marked as read.</phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <para>
        If a file has been marked as read, click the button a second time to
        reset the status to unread.
      </para>
    </listitem>
  </itemizedlist>

  <para>
    <inlinemediaobject>
      <imageobject condition="thumb">
        <imagedata fileref="../../assets/html/images/icon-comments_exist.png"/>
      </imageobject>

      <textobject>
        <phrase>The Comments Exist icon</phrase>
      </textobject>
    </inlinemediaobject>
  </para>

  <para>
    If the file has comments associated, its entry shows a <emphasis>comments
    exist</emphasis> icon.
  </para>

  <section xml:id="basics.diffs.view">
    <title>Viewing a diff</title>

    <para>
      When you view a diff, the changes are highlighted:
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="frame">
          <imagedata fileref="../../assets/html/images/panel-diff-2up.png"/>
        </imageobject>

        <textobject>
          <phrase>Side-by-Side Diff with an add, edit, and delete</phrase>
        </textobject>
      </inlinemediaobject>
    </para>

    <itemizedlist>
      <listitem>
        <para>
          Red indicates lines that have been removed
        </para>
      </listitem>

      <listitem>
        <para>
          Blue indicates lines that have been modified
        </para>
      </listitem>

      <listitem>
        <para>
          Green indicates lines that have been added
        </para>
      </listitem>
    </itemizedlist>

    <para>
      The diff presentation displays a concise view of where changes are made
      within a file, showing the changed lines and only a few lines before and
      after each revision. Sometimes, this concise view is insufficient to
      understand the context of the change. The <guibutton>Show Full
      Context</guibutton> displays the entire file, but this can be too much
      detail.
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/panel-diff-more_context.png"/>
        </imageobject>

        <textobject>
          <phrase>The "Show More Context" row.</phrase>
        </textobject>
      </inlinemediaobject>

      When there are more lines in a file, either above or below the currently
      displayed diff, a <guibutton>Show More Context</guibutton> row appears.
    </para>

    <para>
      Clicking this row attempts to display 10 additional lines adjacent to the
      row (which may appear between two modifications), allowing up to 20 lines
      of additional context to be displayed. The row disappears when no
      additional content is available.
    </para>

    <para>
      Comments may be presented within the body of a file and appear immediately
      below the line the commenter targeted for comment. See <xref linkend="basics.comments"/> for more details.
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="frame">
          <imagedata fileref="../../assets/html/images/panel-diff-2up-comment.png"/>
        </imageobject>

        <textobject>
          <phrase>Side-by-Side Diff with a comment displayed</phrase>
        </textobject>
      </inlinemediaobject>
    </para>

    <note>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/icon-comments_exist-here.png"/>
          </imageobject>

          <textobject>
            <phrase>The Comment Exists Here icon</phrase>
          </textobject>
        </inlinemediaobject>

        The <emphasis>comment(s) exist here</emphasis> icon appears in the line
        number column whenever comments exist. This is useful when the comment
        display is toggled off.
      </para>
    </note>

    <para>
      When viewing a diff in-line, the line numbers for the old version are
      first, and the line numbers for the new version are second, followed by
      the file content. Some users find this view easier to use when locating an
      area that has changed, but then switch to side-by-side view to help them
      understand the change better. Swarm maintains the scroll position; you do
      not lose your place in the file after toggling the diff view.
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="frame">
          <imagedata fileref="../../assets/html/images/panel-diff-1up.png"/>
        </imageobject>

        <textobject>
          <phrase>Inline Diff</phrase>
        </textobject>
      </inlinemediaobject>
    </para>

    <note>
      <para>
        Press <keycap>n</keycap> on your keyboard to scroll to the next changed
        area within a file. Press <keycap>p</keycap> to scroll to the previous
        change.
      </para>
    </note>

    <para>
      When a diff contains multiple files, the changes may be taller than your
      browser window. Swarm keeps the per-file toolbar in view for each file as
      you scroll, so that you can continue to identify the file at the top of
      the screen and control its presentation.
    </para>

    <para>
      <inlinemediaobject>
        <imageobject>
          <imagedata fileref="../../assets/html/images/page-diff_with_affix.png"/>
        </imageobject>

        <textobject>
          <phrase>The per-file toolbars stay in view as you scroll</phrase>
        </textobject>
      </inlinemediaobject>
    </para>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="basics.comments" xml:base="basics/comments.xml">
  <title>Comments</title>

  <para>
    Comments are the primary feedback mechanism provided by Swarm. Comments can
    be made on files in a review, on any lines of any text file in a review, and
    on jobs.
  </para>

  <para>
    <inlinemediaobject>
      <imageobject condition="thumb">
        <imagedata fileref="../../assets/html/images/tab-comments.png"/>
      </imageobject>

      <textobject>
        <phrase>Drop-down menu for flagging a comment as a task.</phrase>
      </textobject>
    </inlinemediaobject>

    Access the comments for a review, or job, by clicking on the
    <guilabel>Comments</guilabel> tab. The number of open (non-archived
    comments) is displayed in the tab.
  </para>

  <para>
    <inlinemediaobject>
      <imageobject condition="thumb">
        <imagedata fileref="../../assets/html/images/tab-comments-tooltip.png"/>
      </imageobject>

      <textobject>
        <phrase>Drop-down menu for flagging a comment as a task.</phrase>
      </textobject>
    </inlinemediaobject>

    If you hover your mouse over the comment count, a tooltip is displayed
    showing how many comments are archived. See
    <xref linkend="basics.comments.archiving"/> for details.
  </para>


  <section xml:id="basics.comments.tasks">
    <title>Tasks</title>

    <para>
      Flagging comments as <emphasis>tasks</emphasis> is a lightweight workflow
      within a review that helps authors and reviewers prioritize review
      feedback. Any comment on a code review can be flagged as a task,
      indicating to a code review's author that the described issue needs to be
      addressed, and that the review is unlikely to be approved without a fix.
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/dropdown-task-not_a_task.png"/>
        </imageobject>

        <textobject>
          <phrase>Drop-down menu for flagging a comment as a task.</phrase>
        </textobject>
      </inlinemediaobject>

      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/checkbox-flag_as_task.png"/>
        </imageobject>

        <textobject>
          <phrase>The Flag as Task checkbox.</phrase>
        </textobject>
      </inlinemediaobject>

      To flag a comment as a task, check the <guilabel>Flag as
      Task</guilabel> checkbox when posting a comment, or click the flag icon in
      the upper right of an existing comment and select <guilabel>Flag as
      Task</guilabel> in the drop-down menu.
    </para>

    <note>
      <para>
        If you do not have permission to archive comments, you do not have
        permission to flag comments as tasks. Anonymous users never have
        permission to archive comments, and can only view current task states.
      </para>
    </note>

    <para condition="clear">
      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/dropdown-task-open.png"/>
        </imageobject>

        <textobject>
          <phrase>Drop-down menu for open tasks.</phrase>
        </textobject>
      </inlinemediaobject>

      Once a comment is flagged as a task, it is considered to be an <emphasis>open
      task</emphasis>. Clicking the red flag icon displays a drop-down menu with
      the following options:
    </para>
    
    <itemizedlist>
      <listitem>
        <para>
          <guilabel>Task Addressed</guilabel>: usually used by the review's
          author to indicate that the noted issue has been fixed.
        </para>
      </listitem>

      <listitem>
        <para>
          <guilabel>Not a Task</guilabel>: used to correct comments that have
          inappropriately been flagged as tasks.
        </para>
      </listitem>
    </itemizedlist>

    <para condition="clear">
      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/dropdown-task-addressed.png"/>
        </imageobject>

        <textobject>
          <phrase>Drop-down menu for addressed tasks.</phrase>
        </textobject>
      </inlinemediaobject>

      A comment with a green check indicates that the task has been addressed.
      Clicking the green check displays a drop-down menu with the following
      options:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <guilabel>Verify</guilabel>: usually used by the comment author,
          or other reviewer, after checking that the issue is indeed fixed.
        </para>
      </listitem>

      <listitem>
        <para>
          <guilabel>Verify and Archive</guilabel>: used to both indicate that the
          issue has been fixed, and to archive the comment so it is hidden from
          view. Archived tasks, whether they are open, addressed, or verified,
          are not included in the task counts for the code review.
        </para>
      </listitem>

      <listitem>
        <para>
          <guilabel>Reopen task</guilabel>: used when an update to the review does
          not resolve the noted issue, or to correct an inadvertent task
          verification.
        </para>
      </listitem>
    </itemizedlist>

    <para condition="clear">
      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/dropdown-task-verified.png"/>
        </imageobject>

        <textobject>
          <phrase>Drop-down menu for verified tasks.</phrase>
        </textobject>
      </inlinemediaobject>

      A comment with a blue double-check indicates that the task has been
      verified. Clicking the blue double-check displays a drop-down menu with
      the following option:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <guilabel>Reopen Task</guilabel>: used if the issue needs further work
          post-verification, or if verification was made inadvertently.
        </para>
      </listitem>
    </itemizedlist>

    <para>
      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/panel-task_counts.png"/>
        </imageobject>

        <textobject>
          <phrase>Task counts/status summary.</phrase>
        </textobject>
      </inlinemediaobject>

      A summary of comments flagged as tasks and their various states appears
      below the code review's description, beside the reviewers area. Archived
      comments that are flagged as tasks are not included in the summary.
    </para>

    <para>
      Like many of Swarm's features, tasks are merely advisory. Flagging a
      comment as a task provides visual indication that there is an identified
      issue, but Swarm does not restrict any operations for tasks in any state.
      A warning is displayed should you attempt to approve or commit a review
      via the Swarm UI that has any open tasks (that are not archived):
    </para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="../../assets/html/images/dialog-update_review_with_tasks.png"/>
      </imageobject>

      <textobject>
        <phrase>A warning about open tasks when approving a review.</phrase>
      </textobject>
    </mediaobject>
  </section>

  <section xml:id="basics.comments.features">
    <title>Comment features</title>

    <section xml:id="basics.comments.features.emoji">
      <title>Emoji</title>

      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/icon-emoji-smile-tooltip.png"/>
          </imageobject>

          <textobject>
            <phrase>Emoji smile tooltip</phrase>
          </textobject>
        </inlinemediaobject>
        
        Swarm comments support <glossterm linkend="Emoji">Emoji</glossterm>
        short-hand; when you save a comment, emoticon text like
        <literal>:smile:</literal> is displayed as:
        
        <inlinemediaobject>
          <imageobject>
            <imagedata fileref="../../assets/html/images/icon-emoji-smile.png"/>
          </imageobject>

          <textobject>
            <phrase>Emoji smile</phrase>
          </textobject>
        </inlinemediaobject>.
        
        Hover your mouse over an Emoji emoticon to see a tooltip displaying the
        text short-hand for the emoticon.
      </para>

      <tip>
        <para>
          For more information on Emoji, see
          <link xlink:href="http://en.wikipedia.org/wiki/Emoji">Emoji</link> at
          Wikipedia. Emoji emoticons are listed in the
          <link xlink:href="http://www.emoji-cheat-sheet.com/">Emoji Cheat
          Sheet</link>.
        </para>
      </tip>
    </section>

    <section xml:id="basics.comments.features.links">
      <title>Links in comments</title>

      <para>
        <inlinemediaobject>
          <imageobject condition="popup">
            <imagedata fileref="../../assets/html/images/comments_with_links.png"/>
          </imageobject>

            <textobject>
              <phrase>Links appearing in comments</phrase>
            </textobject>
        </inlinemediaobject>
        
        Whenever you include a URL in a comment, it is automatically made into a
        link. If the link points to an image, or a YouTube video, that resource
        is displayed at the end of the comment.
      </para>
    </section>

    <section xml:id="basics.comments.features.like">
      <title>Liking comments</title>

      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/thumb-comment-not_yet_liked.png"/>
          </imageobject>

            <textobject>
              <phrase>A comment that you have not yet liked</phrase>
            </textobject>
        </inlinemediaobject>

        As an authenticated user, you can <emphasis>like</emphasis> a comment by
        clicking the muted heart icon beneath a comment.
      </para>

      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/thumb-comment-liked.png"/>
          </imageobject>

            <textobject>
              <phrase>A comment that you have liked</phrase>
            </textobject>
        </inlinemediaobject>

        When you like a comment, a
        <link linkend="basics.notifications">notification</link> is sent to the
        comment's author, and the heart icon becomes red to indicate that you
        have liked the comment.
      </para>

      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/thumb-comment-like_count.png"/>
          </imageobject>

            <textobject>
              <phrase>A comment that has been liked by two people</phrase>
            </textobject>
        </inlinemediaobject>

        If a comment has one or more likes, a count of the likes appears
        before the heart icon. A tooltip appears when you hover the mouse over
        the like count displaying the usernames of everyone that has liked the
        comment.
      </para>

      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/thumb-comment-unlike.png"/>
          </imageobject>

            <textobject>
              <phrase>A comment about to be unliked</phrase>
            </textobject>
        </inlinemediaobject>

        Click the heart icon again to unlike a comment.
      </para>

      <note>
        <para>
          You cannot like/unlike a comment that has been archived.
        </para>
      </note>
    </section>

    <section xml:id="basics.comments.features.attachments">
      <title>Comment attachments</title>

      <para>
        Arbitrary files can be attached to comments. This is useful for sharing
        documents that are helpful in code review, such as screenshots of error
        conditions, reference code, etc.
      </para>

      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/review-comment_area.png"/>
          </imageobject>

          <textobject>
            <phrase>The Comment area when attachments are enabled.</phrase>
          </textobject>
        </inlinemediaobject>

        Swarm must be <link linkend="admin.comment_attachments">configured to
        enable comment attachments</link>. Once the configuration is complete,
        the comment area adds a note <guilabel>Drop files here to attach
        them</guilabel>.
      </para>

      <para>
        To attach a file, simply drag it from your desktop or file browser and
        drop the file onto the comment area. Multiple files can be attached to a
        comment, either one at a time, or by dragging a group of files in one
        go. However, uploading a folder of files is not supported.
      </para>

      <para>
        When you let go of the file (or files), the upload to Swarm starts
        immediately, and a progress bar for each file is displayed below the
        comment area with green bars indicating completed uploads and blue bars
        indicating uploads in progress:
      </para>

      <para>
        <inlinemediaobject>
          <imageobject>
            <imagedata fileref="../../assets/html/images/review-comment_area_attachments.png"/>
          </imageobject>

          <textobject>
            <phrase>The Comment area with attachments progress bars.</phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <para>
        Before you post your comment, if any files already attached should be
        removed, click the <guibutton>X</guibutton> to the right of the attached
        file you wish to remove.
      </para>

      <para>
        After you post your comment, a list of attached files appears below the
        comment text. The list includes the filename and file sizes for each
        attached file. When you view your comment on the Comments tab, Swarm
        displays an image preview for any attached images.
      </para>

      <para>
        <inlinemediaobject>
          <imageobject>
            <imagedata fileref="../../assets/html/images/review-comment_with_attachments.jpg"/>
          </imageobject>

          <textobject>
            <phrase>A comment with its attached files.</phrase>
          </textobject>
        </inlinemediaobject>
      </para>
    </section>

    <section xml:id="basics.comments.features.context">
      <title>Comment context</title>

      <para>
        When comments are added to files in a review, on lines that have been
        changed, Swarm records several lines of context before the line
        receiving the comment. This helps makes sense of the comments should
        later changes remove those lines.
      </para>

      <para>
        <inlinemediaobject>
          <imageobject>
            <imagedata fileref="../../assets/html/images/thumb-comments_with_context.png"/>
          </imageobject>

          <textobject>
            <phrase>Commentary on a change, showing its context.</phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <para>
        Each comment associated with that line has a record of the context, but only
        the first comment displays that context.
      </para>
    </section>

    <section xml:id="basics.comments.features.delayed_notifications">
      <title>Delayed notifications</title>

      <para>
        Delayed notifications allow reviewers to add or edit comments as they
        progress through a review, but prevent notifications from being sent
        until their review effort is complete. Any delayed notifications are
        rolled up into a single email notification when the reviewer turns off
        delayed notifications.
      </para>

      <para>
        Whenever <guilabel>Delay Notification</guilabel> is checked,
        <emphasis>batch</emphasis> mode is enabled and the notification for any
        new or edited comment is delayed; no email is sent. Swarm remembers that
        you have clicked <guilabel>Delay Notification</guilabel>; you do not
        need to click it for each comment you post.
      </para>
        
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/review-delay_notification-count.png"/>
          </imageobject>

          <textobject>
            <phrase>
              The count of delayed notifications.
            </phrase>
          </textobject>
        </inlinemediaobject>

        When there are delayed notifications, Swarm displays their count.
      </para>

      <para>
        Batch mode ends when a new or edited comment is saved with
        <guilabel>Delay Notification</guilabel> unchecked. Swarm then sends a
        single email notification containing all previously delayed comment
        notifications plus the most recent new or edited comment.
      </para>

      <note>
        <para>
          There is no <emphasis>expiry</emphasis> mechanism; delayed
          notifications are delayed indefinitely until <guilabel>Delay
          Notification</guilabel> is unchecked.
        </para>
      </note>

      <para>
        <inlinemediaobject>
          <imageobject condition="popup">
            <imagedata fileref="../../assets/html/images/review-delay_notification-checked.png"/>
          </imageobject>

          <textobject>
            <phrase>
              The <guilabel>Delay Notification</guilabel> checkbox checked.
            </phrase>
          </textobject>
        </inlinemediaobject>

        <inlinemediaobject>
          <imageobject condition="popup">
            <imagedata fileref="../../assets/html/images/review-delay_notification-unchecked.png"/>
          </imageobject>

          <textobject>
            <phrase>
              The <guilabel>Delay Notification</guilabel> checkbox unchecked.
            </phrase>
          </textobject>
        </inlinemediaobject>

        Hover your mouse over <guilabel>Delay Notification</guilabel> to see a
        tooltip that indicates the current state.
      </para>

      <note>
        <para>
          Delayed notifications are available only for comments on reviews;
          comments on commits or jobs produce notifications immediately.
        </para>
      </note>
    </section>
  </section>

  <section xml:id="basics.comments.changelist">
    <title>Commenting on a changelist or review</title>

    <orderedlist>
      <listitem>
        <para>
          Visit the changelist's or review's page.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/tabs-review_files_comments_history-comments.png"/>
            </imageobject>

            <textobject>
              <phrase>Comments tab on Reviews page</phrase>
            </textobject>
          </inlinemediaobject>

          Click <guibutton>Comments</guibutton> to view the comments tab.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/review-comment_area.png"/>
            </imageobject>

            <textobject>
              <phrase>Comment area for a review</phrase>
            </textobject>
          </inlinemediaobject>

          Add your comment in the provided text area.
        </para>
        
        <para>
          Also see <xref linkend="basics.comments.features.attachments"/> above.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/button-post.png"/>
            </imageobject>

            <textobject>
              <phrase>Post button</phrase>
            </textobject>
          </inlinemediaobject>

          Click <guibutton>Post</guibutton>.
        </para>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="basics.comments.line">
    <title>Commenting on a specific line in a file</title>

    <orderedlist>
      <listitem>
        <para>
          Visit the changelist's or review's page.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/tabs-review_files_comments_history-files.png"/>
            </imageobject>

            <textobject>
              <phrase>Files tab</phrase>
            </textobject>
          </inlinemediaobject>

          Click <guibutton>Files</guibutton> to view the file tab.
        </para>
      </listitem>

      <listitem>
        <para>
          Click a line you want to comment on. The comment text area appears.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="popup">
              <imagedata fileref="../../assets/html/images/diff-comment_area.png"/>
            </imageobject>

            <textobject>
              <phrase>Comment area in a diff</phrase>
            </textobject>
          </inlinemediaobject>

          Add your comment in the provided text area.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/button-post.png"/>
            </imageobject>

            <textobject>
              <phrase>Post button for Comments</phrase>
            </textobject>
          </inlinemediaobject>

          Click <guibutton>Post</guibutton>.
        </para>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="basics.comments.file">
    <title>Commenting on a file in a changelist or code review</title>

    <orderedlist>
      <listitem>
        <para>
          Visit the changelist's or review's page.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/tabs-review_files_comments_history-files.png"/>
            </imageobject>

            <textobject>
              <phrase>Files tab</phrase>
            </textobject>
          </inlinemediaobject>

          Click <guibutton>Files</guibutton> to view the file tab.
        </para>
      </listitem>

      <listitem>
        <para>
          If there are multiple files, click the file you want to comment on to
          expand its view.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/link-add_comment.png"/>
            </imageobject>

            <textobject>
              <phrase>The link to add a comment to a file.</phrase>
            </textobject>
          </inlinemediaobject>

          Click the <guibutton>Add a Comment</guibutton> link in the footer of
          the file's display.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="popup">
              <imagedata fileref="../../assets/html/images/diff-comment_area.png"/>
            </imageobject>

            <textobject>
              <phrase>Comment area in a diff</phrase>
            </textobject>
          </inlinemediaobject>

          Add your comment in the provided text area.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/button-post.png"/>
            </imageobject>

            <textobject>
              <phrase>Post button for Comments</phrase>
            </textobject>
          </inlinemediaobject>

          Click <guibutton>Post</guibutton>.
        </para>
      </listitem>
    </orderedlist>

    <note>
      <para>
        You can use <xref linkend="basics.notable.mentions"/> in comments. An
        @mention includes the specified user in the review, and they will
        receive a notification whenever there is an update to the review.
      </para>
    </note>
  </section>

  <section xml:id="basics.comments.editing">
    <title>Editing comments</title>

    <para>
      For any comment that you have created, you can edit its contents:
    </para>

    <orderedlist>
      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/review-comment_edit_link.png"/>
            </imageobject>

            <textobject>
              <phrase>Edit link for Comments</phrase>
            </textobject>
          </inlinemediaobject>

          Click the <guilabel>Edit</guilabel> link.
        </para>
      </listitem>

      <listitem>
        <para>
          Adjust the comment content, including adding new attachments or
          removing existing attachments.
        </para>

        <mediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/review-comment-edit.png"/>
          </imageobject>

          <textobject>
            <phrase>Editing a comment</phrase>
          </textobject>
        </mediaobject>

        <para>
          When you attempt to remove an attachment, it is not immediately
          removed but marked for removal; the attachment's presentation becomes
          muted and the removal <guilabel>X</guilabel> icon is replaced with a
          <guilabel>Restore</guilabel> icon.
        </para>

        <mediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/review-comment-attachment_removed.png"/>
          </imageobject>

          <textobject>
            <phrase>A comment attachment marked for removal</phrase>
          </textobject>
        </mediaobject>

        <para>
          Before completing your edits to the comment, if you do not wish to
          remove attachments that are marked for removal, click the
          <guilabel>Restore</guilabel> icon; the <guilabel>Restore</guilabel>
          icon is replaced with the removal <guilabel>X</guilabel> icon, and
          the attachment's presentation is no longer muted.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/button-save.png"/>
            </imageobject>

            <textobject>
              <phrase>Save button for Comments</phrase>
            </textobject>
          </inlinemediaobject>

          Click <guibutton>Save</guibutton>. The edits to the comment text are
          saved, any new attachments are saved, and any attachments marked for
          removal are removed. Swarm also adds <literal>(edited)</literal> to
          the comment's timestamp.
        </para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="../../assets/html/images/review-comment-edited.png"/>
          </imageobject>

          <textobject>
            <phrase>The "(edited)" indicator for a comment</phrase>
          </textobject>
        </mediaobject>

        <para>
          At any time, you can click the <guilabel>Cancel</guilabel> to cancel
          editing of the comment. The original comment text is reinstated and
          any existing attachments are retained. Any text edits or uploaded
          attachments are lost.
        </para>
      </listitem>
    </orderedlist>

    <para>
      Whenever a comment is edited, Swarm sends a notification to everyone
      involved in the review, including the author and reviewers, but not to the
      editor of the comment.
    </para>

    <note>
      <para>
        Swarm does not provide a mechanism to see older versions of edited
        comments.
      </para>
    </note>
  </section>

  <section xml:id="basics.comments.archiving">
    <title>Archiving comments</title>

    <para>
      As a code review progresses, comments made on earlier versions of a file
      may no longer be pertinent. If left unattended, comments may accumulate
      until it is difficult to determine which comments are still relevant and
      which comments have been addressed.
    </para>

    <orderedlist>
      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/button-comment-archive.png"/>
            </imageobject>

            <textobject>
              <phrase>The Comment Archive button</phrase>
            </textobject>
          </inlinemediaobject>

          Click the <emphasis>file drawer</emphasis> icon at the top
          right of a posted comment to archive it.
        </para>
      </listitem>
    </orderedlist>

    <para>
      Archived comments are normally hidden from view. When archived comments
      exist, a box appears showing the number of archived comments. Click the
      box to toggle the presentation of all archived comments.
    </para>

    <para>
      <inlinemediaobject>
        <imageobject>
          <imagedata fileref="../../assets/html/images/panel-archived_comments.png"/>
        </imageobject>

        <textobject>
          <phrase>The Archived Comments box</phrase>
        </textobject>
      </inlinemediaobject>
    </para>
  </section>

  <section xml:id="basics.comments.restore">
    <title>Restore comments</title>

    <para>
      A closed comment may be <emphasis>restored</emphasis>.
    </para>

    <orderedlist>
      <listitem>
        <para>
          Click the <emphasis>archived comments</emphasis> box to display all
          archived comments.
        </para>
      </listitem>

      <listitem>
        <para>
          Locate the comment you want to restore
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/button-comment-restore.png"/>
            </imageobject>

            <textobject>
              <phrase>The Comment Restore button</phrase>
            </textobject>
          </inlinemediaobject>

          Click the <emphasis>arrow</emphasis> icon in the top right of the
          comment to restore it.
        </para>
      </listitem>
    </orderedlist>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="basics.users" xml:base="basics/users.xml">
  <title>Users</title>

  <para condition="popup">
    <inlinemediaobject>
      <imageobject condition="popup">
        <imagedata fileref="../../assets/html/images/dropdown-userid-open-profile.png"/>
      </imageobject>

      <textobject>
        <phrase>Selecting Profile on userid drop-down menu</phrase>
      </textobject>
    </inlinemediaobject>

    Swarm's users are based on the users configured in the Helix Versioning
    Engine. Display your own user profile when you are logged in by clicking on
    your userid at the top-right of the main toolbar and selecting
    <guimenuitem>Profile</guimenuitem>.
  </para>

  <para>
    <inlinemediaobject>
      <imageobject condition="frame">
        <imagedata fileref="../../assets/html/images/page-user.png"/>
      </imageobject>

      <textobject>
        <phrase>The User page</phrase>
      </textobject>
    </inlinemediaobject>
  </para>

  <para>
    The user profile page displays your
    <link linkend="basics.notable.avatars">avatar</link>, the list of users
    following your activity, the users or
    <link linkend="basics.projects">projects</link> that you are following, and
    the list of projects of which you are a member. An
    <link linkend="basics.activity_streams">activity stream</link> for events
    you have created is also presented.
  </para>

  <para>
    <inlinemediaobject>
      <imageobject condition="thumb">
        <imagedata fileref="../../assets/html/images/button-shelves.png"/>
      </imageobject>

      <textobject>
        <phrase>The Shelves tab</phrase>
      </textobject>
    </inlinemediaobject>

    Click the <guilabel>Shelves</guilabel> tab to display a list of the user's
    shelved changelists:
  </para>

  <para>
    <inlinemediaobject>
      <imageobject condition="frame">
        <imagedata fileref="../../assets/html/images/page-user-shelves.png"/>
      </imageobject>

      <textobject>
        <phrase>The User page</phrase>
      </textobject>
    </inlinemediaobject>
  </para>

  <para>
    A <emphasis>shelved</emphasis> changelist is a pending changelist that has a
    copy of one or more files from within the changelist stored on the server.
    Shelved files are not versioned: if you update the shelved files, the update
    replaces any existing files on the changelist's shelf.
  </para>

  <note>
    <para>
      Swarm can use multiple shelved changes to record the history of reviews.
      See <xref linkend="code_reviews.model.internal"/> for details.
    </para>
  </note>

  <para>
    Swarm uses shelved changelists as the basis of its code review feature.
    However, not all shelved changelists are reviews. Users may shelve files for
    other reasons, including ensuring that the Helix Versioning Engine has a
    copy of work in progress, or as a way to move temporary work from one
    workspace to another.
  </para>

  <para>
    <inlinemediaobject>
      <imageobject condition="thumb">
        <imagedata fileref="../../assets/html/images/button-request_review-shelf.png"/>
      </imageobject>

      <textobject>
        <phrase>The Request Review button for a shelved changelist</phrase>
      </textobject>
    </inlinemediaobject>

    Click the <guibutton>Request Review</guibutton> to start a Swarm review for
    any shelved changelist that is not already involved in a review.
  </para>

  <para>
    <inlinemediaobject>
      <imageobject condition="thumb">
        <imagedata fileref="../../assets/html/images/button-view_review.png"/>
      </imageobject>

      <textobject>
        <phrase>The Request Review button for a shelved changelist</phrase>
      </textobject>
    </inlinemediaobject>

    Click the <guibutton>View Review</guibutton> to view the Swarm review
    associated with shelved changelists when a review has already started.
  </para>

  <section xml:id="basics.users.view">
    <title>Viewing users</title>

    <para>
      View the profile pages of other users displayed anywhere by Swarm by
      clicking on their avatar or userid, or by visiting the URL:
    </para>

<programlisting>
https://<replaceable>myswarm.url</replaceable>/<replaceable role="bold">users</replaceable>/<replaceable>userid</replaceable>
</programlisting>

    <note>
      <para>
        Currently, Swarm does not provide an overall list of users.
      </para>
    </note>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="basics.groups" xml:base="basics/groups.xml">
  <title>Groups</title>

  <para>
    <emphasis>Groups</emphasis> are a feature of the Helix Versioning Engine
    that makes it easier to manage permissions for users.
  </para>

  <para>
    It is important to be aware of certain aspects of Helix groups:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        Groups can can have both users and sub-groups. A user that is a member
        of a sub-group is also a member of the parent group.
      </para>
    </listitem>

    <listitem>
      <para>
        Groups have owners, but owners are not members of their groups. A group
        owner can be added as a member of a group.
      </para>
    </listitem>

    <listitem>
      <para>
        Groups can be created by users with <emphasis>super</emphasis>
        privileges in the Helix Versioning Engine (<command>p4d</command>). If
        <command>p4d</command> is at version 2012.1 or newer, users with
        <emphasis>admin</emphasis> privileges can also add groups.
      </para>
    </listitem>

    <listitem>
      <para>
        Groups can be edited by their owners, or by users with
        <emphasis>super</emphasis> privileges in the Helix Versioning Engine.
      </para>
    </listitem>

    <listitem>
      <para>
        Groups have a separate namespace from users; you can have a user named
        <literal>fish</literal> that is a member of a group named
        <literal>fish</literal>.
      </para>
    </listitem>

    <listitem>
      <para>
        Groups cannot be project owners, or moderators.
      </para>
    </listitem>

    <listitem>
      <para>
        While you can <link linkend="basics.notable.mentions">@mention</link> a
        group, which creates a link that displays the group's details when
        clicked, doing so does not send notifications to the group's members.
        Similarly, you cannot you designate a group as a
        <link linkend="code_reviews.responsibility.required">required
        reviewer</link>.
      </para>
    </listitem>
  </itemizedlist>

  <para>
    More information on adding, editing, and removing groups is included in the
    <xref linkend="chapter.groups"/> chapter.
  </para>

  <section xml:id="basics.groups.list">
    <title>Listing groups</title>

    <para>
      Begin browsing groups by clicking the <guibutton>Groups</guibutton> link
      in the main toolbar.
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="frame">
          <imagedata fileref="../../assets/html/images/page-groups.png"/>
        </imageobject>

        <textobject>
          <phrase>The Groups page</phrase>
        </textobject>
      </inlinemediaobject>
    </para>

    <para>
      For each group, the group's name, description, list of owner avatars,
      membership count (which has a darker background when you are a member),
      and a bell icon when the group has notification enabled (all group members
      could receive notifications for new reviews, or commits). Click on a group
      name to display details for that group.
    </para>

    <para>
      The groups listing is sorted by multiple criteria:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          Groups that you own, or belong to, are listed first. A thicker row
          border indicates where your group ownership/membership ends; you are
          not an owner/member of any group below the thicker border.
        </para>
      </listitem>

      <listitem>
        <para>
          Groups that have configuration for notification are listed earlier
          than other groups.
        </para>
      </listitem>

      <listitem>
        <para>
          Groups are then sorted by name.
        </para>
      </listitem>
    </itemizedlist>

    <para>
      You can search available groups by entering some text in the
      <guilabel>Search</guilabel> and clicking <guibutton>Search</guibutton>.
      Any group names or descriptions that match the entered text are displayed.
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="frame">
          <imagedata fileref="../../assets/html/images/page-groups-search.png"/>
        </imageobject>

        <textobject>
          <phrase>A specific Group page</phrase>
        </textobject>
      </inlinemediaobject>
    </para>

    <para>
      If you have <emphasis>super</emphasis> privileges in the Helix Versioning
      Engine (<command>p4d</command>), or have <emphasis>admin</emphasis>
      privileges in <command>p4d</command> version 2012.1 or newer, Swarm
      displays the <guibutton>Add Group</guibutton> button. Click <guibutton>Add
      Group</guibutton> to add a new group.
    </para>

    <note>
      <para>
        If your Helix Versioning Engine has a large number of groups, the time
        required to display the list of groups might be notable.
      </para>
    </note>
  </section>

  <section xml:id="basics.groups.display">
    <title>Viewing a group</title>

    <para>
      View a specific group by clicking on a linked group name, or by visiting
      the URL:
    </para>

<programlisting>
https://<replaceable>myswarm.url</replaceable>/<replaceable role="bold">groups</replaceable>/<replaceable>group-id</replaceable>
</programlisting>

    <para>
      When Swarm displays a group, the presentation is similar to:
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="frame">
          <imagedata fileref="../../assets/html/images/page-group.png"/>
        </imageobject>

        <textobject>
          <phrase>A specific Group page</phrase>
        </textobject>
      </inlinemediaobject>
    </para>

    <para>
      The information presented in the group display includes:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          In the left sidebar:
        </para>

        <itemizedlist>
          <listitem>
            <para>
              The group's name.
            </para>
          </listitem>

          <listitem>
            <para>
              The group's description, if it has one.
            </para>
          </listitem>

          <listitem>
            <para>
              The count of the group's owners and members.
            </para>
          </listitem>

          <listitem>
            <para>
              The avatars of the group's owners.
            </para>
          </listitem>

          <listitem>
            <para>
              The avatars of the group's members.
            </para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>
          Any events generated by a group member is associated with the group,
          and appears in the right-hand area as an
          <link linkend="basics.activity_streams">activity stream</link>.
        </para>
      </listitem>
    </itemizedlist>

    <para>
      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/button-reviews.png"/>
        </imageobject>

        <textobject>
          <phrase>The Reviews button appearing in the groups toolbar</phrase>
        </textobject>
      </inlinemediaobject>

      Click the <guilabel>Reviews</guilabel> link in the group toolbar to
      display the <link linkend="code_reviews.queues">review queue</link>
      associated with the group, which includes all reviews authored by any of
      the group's members.
    </para>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="basics.projects" xml:base="basics/projects.xml">
  <title>Projects</title>

  <para>
    A Swarm project is a group of Perforce
    <link linkend="basics.users">users</link> who are working together on one or
    more codelines within the Helix Versioning Engine. A project's definition
    includes one or more <glossterm linkend="branch">branches</glossterm> of
    code, and optionally a <glossterm linkend="job">job</glossterm> filter,
    <link linkend="quickstart.integrate_test_suite">automated test
    integration</link>, or
    <link linkend="quickstart.review_deployment">automated deployment</link>.
    This section provides an introduction to the interactions users have with
    projects. See the <xref linkend="chapter.projects"/> chapter for details on
    managing projects.
  </para>

  <para>
    Projects are listed on the Swarm home page. Anonymous users see a list of
    all public projects:
  </para>

  <para>
    <inlinemediaobject>
      <imageobject>
        <imagedata fileref="../../assets/html/images/panel-all_projects.png"/>
      </imageobject>

      <textobject>
        <phrase>The All Projects panel</phrase>
      </textobject>
    </inlinemediaobject>
  </para>

  <para>
    Logged-in users can choose to display all projects or just the
    projects in which they are a member:
  </para>

  <para>
    <inlinemediaobject>
      <imageobject condition="clear block">
        <imagedata fileref="../../assets/html/images/dropdown-projects-my_projects.png"/>
      </imageobject>

      <textobject>
        <phrase>Projects drop-down menu</phrase>
      </textobject>
    </inlinemediaobject>
  </para>

  <para>
    <inlinemediaobject>
      <imageobject condition="clear block">
        <imagedata fileref="../../assets/html/images/panel-my_projects.png"/>
      </imageobject>

      <textobject>
        <phrase>The Projects panel</phrase>
      </textobject>
    </inlinemediaobject>
  </para>

  <para>
    <inlinemediaobject>
      <imageobject condition="thumb">
        <imagedata fileref="../../assets/html/images/thumb-project_count-tooltip.png"/>
      </imageobject>

      <textobject>
        <phrase>The project count tooltip.</phrase>
      </textobject>
    </inlinemediaobject>

    The head icon with following number represents how many members and
    followers exist for each project. Hover your mouse over the project
    count to display a tooltip with the number of members and followers.
  </para>

  <section xml:id="basics.projects.view">
    <title>Viewing a project</title>

    <para>
      View a project by clicking on its project name or branch identifier in an
      <link linkend="basics.activity_streams">activity stream</link>, or by
      visiting the URL:
    </para>

<programlisting>
https://<replaceable>myswarm.url</replaceable>/<replaceable role="bold">projects</replaceable>/<replaceable>project-name</replaceable>
</programlisting>

    <para>
      <inlinemediaobject>
        <imageobject condition="frame">
          <imagedata fileref="../../assets/html/images/page-project.png"/>
        </imageobject>

        <textobject>
          <phrase>The Project page</phrase>
        </textobject>
      </inlinemediaobject>
    </para>

    <para>
      A project's <guibutton>Overview</guibutton> page provides the following
      information:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          A description of the project
        </para>
      </listitem>

      <listitem>
        <para>
          A list of members
        </para>
      </listitem>

      <listitem>
        <para>
          A list of the project's followers
        </para>
      </listitem>

      <listitem>
        <para>
          A list of the branches defined for the project
        </para>
      </listitem>

      <listitem>
        <para>
          The project's activity stream
        </para>
      </listitem>
    </itemizedlist>

    <section xml:id="basics.projects.reviews">
      <title>Reviews</title>

      <para>
        The project's <guibutton>Reviews</guibutton> tab shows a list of code
        reviews specific to the project.
      </para>

      <para>
        <inlinemediaobject>
          <imageobject condition="frame">
            <imagedata fileref="../../assets/html/images/page-project_reviews.png"/>
          </imageobject>

          <textobject>
            <phrase>The project's review queue.</phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <para>
        For more details on browsing, filtering, and searching reviews,
        see <xref linkend="code_reviews.queues"/>.
      </para>
    </section>

    <section xml:id="basics.projects.files">
      <title>Files</title>

      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/icon-branch.png"/>
          </imageobject>

          <textobject>
            <phrase>The branch icon</phrase>
          </textobject>
        </inlinemediaobject>

        The project's <guibutton>Files</guibutton> tab shows a list of the
        project's files, starting with a folder view representing each branch.
        Branches are designated with the <emphasis>branch</emphasis> icon.
      </para>

      <para>
        <inlinemediaobject>
          <imageobject condition="frame">
            <imagedata fileref="../../assets/html/images/page-project_files.png"/>
          </imageobject>

          <textobject>
            <phrase>The initial files listing for a project.</phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <para>
        The project's <emphasis>main</emphasis> branch, identified by using a
        name such as <emphasis>main</emphasis>, <emphasis>mainline</emphasis>,
        <emphasis>master</emphasis>, <emphasis>trunk</emphasis>, is sorted to
        the top of the list of branches and appears in bold. The list of names
        can be configured; see <xref linkend="admin.mainline"/> for details.
      </para>

      <para>
        For more information on browsing files, see
        <xref linkend="basics.files"/>.
      </para>
    </section>

    <section xml:id="basics.projects.commits">
      <title>Commits</title>

      <para>
        The project's <guibutton>Commits</guibutton> tab shows a list of changes
        made to the project.
      </para>

      <para>
        <inlinemediaobject>
          <imageobject condition="frame">
            <imagedata fileref="../../assets/html/images/page-project_commits.png"/>
          </imageobject>

          <textobject>
            <phrase>The project's commits.</phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <para>
        For more details on history browsing, see
        <xref linkend="basics.history"/>.
      </para>
    </section>

    <section xml:id="basics.projects.jobs">
      <title>Jobs</title>

      <para>
        The project's <guibutton>Jobs</guibutton> tab shows a list of jobs
        associated with the project. This only works properly when the project
        configuration includes a <emphasis>job filter</emphasis>. See
        <xref linkend="projects.add"/> for details.
      </para>

      <para>
        <inlinemediaobject>
          <imageobject condition="frame">
            <imagedata fileref="../../assets/html/images/page-project_jobs.png"/>
          </imageobject>

          <textobject>
            <phrase>The project's jobs.</phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <para>
        For more details on browsing and searching jobs, see
        <xref linkend="basics.jobs"/>.
      </para>
    </section>
  </section>

  <section xml:id="basics.projects.private">
    <title>Private projects</title>

    <para>
      Private projects, introduced in Swarm 2016.2, provide a way to make
      specific projects and their activity less visible to Swarm users. When a
      project is made private, only the projects owners, moderators, and
      members, plus users with <emphasis>admin</emphasis> or
      <emphasis>super</emphasis> privileges in the Helix Versioning Engine,
      can see the project, its activity streams and ongoing reviews.
    </para>

    <para>
      If you are logged in as an owner, moderator, or member of a private Swarm
      project, that project appears on the Swarm home page with an
      <emphasis>eye</emphasis> icon to indicate that it is private and has
      limited visibility:
    </para>

    <para>
      <inlinemediaobject>
        <imageobject>
          <imagedata fileref="../../assets/html/images/panel-private_project.png"/>
        </imageobject>

        <textobject>
          <phrase>A private project in the Projects panel</phrase>
        </textobject>
      </inlinemediaobject>
    </para>

    <para>
      Similarly, the <emphasis>eye</emphasis> icon appears beside the project's
      title when viewing the project:
    </para>

    <para>
      <inlinemediaobject>
        <imageobject>
          <imagedata fileref="../../assets/html/images/heading-private_project.png"/>
        </imageobject>

        <textobject>
          <phrase>The heading for a private project</phrase>
        </textobject>
      </inlinemediaobject>
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/tooltip-private_project.png"/>
        </imageobject>

        <textobject>
          <phrase>The private project tooltip</phrase>
        </textobject>
      </inlinemediaobject>

      When you hover your mouse over the <emphasis>eye</emphasis> icon, a tooltip
      appears indicating that this project is indeed private.
    </para>

    <section xml:id="basics.projects.private.important">
      <title>Caveats</title>

      <para>
        The following are important caveats regarding private projects:
      </para>

      <itemizedlist>
        <listitem>
          <para>
            While Swarm can mask the existence of projects, their activity, and
            reviews, Swarm honors each user's access to files within the Helix
            Versioning Engine. This means that have access to the files in a
            private project's branches can browse to those branch paths within
            the depot and see the files and any committed changes.
          </para>

          <para>
            If you need to prevent access to important files, your Helix
            Versioning Engine administrator is required to manage the
            protections table accordingly. For more information, see the section
            <link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4sag/chapter.security.html#security.authorizing">Authorizing
            Access</link> in the <citetitle><link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4sag/index.html">Helix
            Versioning Engine Administrator Guide:
            Fundamentals</link></citetitle>.
          </para>
        </listitem>

        <listitem>
          <para>
            It is possible for a user to start a review that touches files that
            belong to a private project. If the user is not a member, owner, or
            moderator of the private project, or does not have
            <emphasis>admin</emphasis> or <emphasis>super</emphasis> privileges
            in the Helix Versioning Engine, they cannot participate in the
            review.
          </para>
        </listitem>

        <listitem>
          <para>
            If a user is not a member, owner, or moderator of a private project,
            or does not have <emphasis>admin</emphasis> or
            <emphasis>super</emphasis> privileges in the Helix Versioning
            Engine, and they are added as a review participant (via an
            <xref linkend="basics.notable.mentions"/> or by editing a review's
            participants) to a review containing files within the private
            project's branches, that user cannot participate in the review: the
            user cannot see the review, its files, or comments. Due to
            limitations in how Swarm sends email notifications, such users could
            still receive notifications for reviews they cannot participate in.
          </para>
        </listitem>

        <listitem>
          <para>
            Notifications usually include links and mentions of the associated
            projects. Notifications involving private projects are filtered to
            remove any references to those private projects.
          </para>
        </listitem>
      </itemizedlist>
    </section>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="basics.notifications" xml:base="basics/notifications.xml">
  <title>Notifications</title>

  <para>
    Provided you have entered a working email address for your userid in the
    Helix Versioning Engine, Swarm sends email notifications to you when various
    events take place:
  </para>

  <para>
    Legend:<literallayout>
</literallayout>
    <simplelist columns="3">
      <member><emphasis role="bold">A</emphasis> = Author</member>
      <member><emphasis role="bold">R</emphasis> = Reviewer</member>
      <member><emphasis role="bold">M</emphasis> = Moderator</member>
      <member><emphasis role="bold">GM</emphasis> = Group member</member>
      <member><emphasis role="bold">PM</emphasis> = Project member</member>
      <member><emphasis role="bold">PF</emphasis> = Project follower</member>
      <member><emphasis role="bold">AF</emphasis> = Author follower</member>
      <member><emphasis role="bold">CA</emphasis> = Comment author</member>
      <member><?Yea?> = role user receives notification</member>
      <member><?Nay?> = role user does not receive notification</member>
      <member><?Wha?> = role not included for this event.</member>
    </simplelist>
  </para>

  <informaltable xml:id="basics-notifications-events_table">
    <tgroup cols="2">
      <colspec colname="event" colwidth="*" align="left"/>
      <colspec colname="byyou" colwidth="2*" align="left"/>
      <colspec colname="author" colwidth="*" align="left"/>
      <colspec colname="reviewer" colwidth="*" align="left"/>
      <colspec colname="moderator" colwidth="*" align="left"/>
      <colspec colname="gmember" colwidth="*" align="left"/>
      <colspec colname="pmember" colwidth="*" align="left"/>
      <colspec colname="pfollower" colwidth="*" align="left"/>
      <colspec colname="afollower" colwidth="*" align="left"/>
      <colspec colname="cauthor" colwidth="*" align="left"/>

      <thead>
        <row>
          <entry role="noborder"/>

          <entry namest="byyou" nameend="cauthor" role="noborder">
            Notification sent to one of these roles...
          </entry>
        </row>

        <row>
          <entry>Event</entry>
          <entry>Event by you?</entry>
          <entry><abbrev><alt>Author</alt>A</abbrev></entry>
          <entry><abbrev><alt>Reviewer</alt>R</abbrev></entry>
          <entry><abbrev><alt>Moderator</alt>M</abbrev></entry>
          <entry><abbrev><alt>Group member</alt>GM</abbrev></entry>
          <entry><abbrev><alt>Project member</alt>PM</abbrev></entry>
          <entry><abbrev><alt>Project follower</alt>PF</abbrev></entry>
          <entry><abbrev><alt>Author follower</alt>AF</abbrev></entry>
          <entry><abbrev><alt>Comment author</alt>CA</abbrev></entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry>A review is committed in Swarm</entry>
          <entry><?Yea?></entry>
          <entry><?Yea?></entry>
          <entry><?Yea?></entry>
          <entry><?Yea?><link linkend="basics.notifications.moderators">***</link></entry>
          <entry><?Yea?><link linkend="basics.notifications.groups">****</link></entry>
          <entry><?Yea?><link linkend="basics.notifications.commit">*</link></entry>
          <entry><?Yea?><link linkend="basics.notifications.commit">*</link></entry>
          <entry><?Yea?></entry>
          <entry><?Wha?></entry>
        </row>

        <row>
          <entry>A review is committed outside of Swarm</entry>
          <entry><?Yea?></entry>
          <entry><?Yea?></entry>
          <entry><?Yea?></entry>
          <entry><?Yea?><link linkend="basics.notifications.moderators">***</link></entry>
          <entry><?Yea?><link linkend="basics.notifications.groups">****</link></entry>
          <entry><?Yea?><link linkend="basics.notifications.commit">*</link></entry>
          <entry><?Yea?><link linkend="basics.notifications.commit">*</link></entry>
          <entry><?Yea?></entry>
          <entry><?Wha?></entry>
        </row>

        <row>
          <entry>
            A change is committed outside of Swarm
            (see <link linkend="basics.notifications.commit">below</link>)
          </entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Wha?></entry>
          <entry><?Yea?><link linkend="basics.notifications.moderators">***</link></entry>
          <entry><?Yea?><link linkend="basics.notifications.groups">****</link></entry>
          <entry><?Yea?><link linkend="basics.notifications.commit">*</link></entry>
          <entry><?Yea?><link linkend="basics.notifications.commit">*</link></entry>
          <entry><?Yea?><link linkend="basics.notifications.commit">*</link></entry>
          <entry><?Wha?></entry>
        </row>

        <row>
          <entry>A review is started</entry>
          <entry><?Yea?></entry>
          <entry><?Yea?></entry>
          <entry><?Yea?></entry>
          <entry><?Yea?><link linkend="basics.notifications.moderators">***</link></entry>
          <entry><?Yea?><link linkend="basics.notifications.groups">****</link></entry>
          <entry><?Yea?><link linkend="basics.notifications.review">**</link></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Wha?></entry>
        </row>

        <row>
          <entry>A reviewer casts a vote</entry>
          <entry><?Nay?></entry>
          <entry><?Yea?></entry>
          <entry><?Yea?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Wha?></entry>
        </row>

        <row>
          <entry>A review's state changes</entry>
          <entry><?Nay?></entry>
          <entry><?Yea?></entry>
          <entry><?Yea?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Wha?></entry>
        </row>

        <row>
          <entry>A review's reviewers are changed</entry>
          <entry><?Nay?></entry>
          <entry><?Yea?></entry>
          <entry><?Yea?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Wha?></entry>
        </row>

        <row>
          <entry>A review's files are updated</entry>
          <entry><?Yea?></entry>
          <entry><?Yea?></entry>
          <entry><?Yea?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Wha?></entry>
        </row>

        <row>
          <entry>A review's description is changed</entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Wha?></entry>
        </row>

        <row>
          <entry>A review comment is created</entry>
          <entry><?Nay?></entry>
          <entry><?Yea?></entry>
          <entry><?Yea?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
        </row>

        <row>
          <entry>A review comment is edited</entry>
          <entry><?Nay?></entry>
          <entry><?Yea?></entry>
          <entry><?Yea?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
        </row>

        <row>
          <entry>A committed change comment is created</entry>
          <entry><?Nay?></entry>
          <entry><?Yea?></entry>
          <entry><?Wha?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Wha?></entry>
        </row>

        <row>
          <entry>A committed change comment is edited</entry>
          <entry><?Nay?></entry>
          <entry><?Yea?></entry>
          <entry><?Wha?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Wha?></entry>
        </row>

        <row>
          <entry>Someone joins or leaves a review</entry>
          <entry><?Nay?></entry>
          <entry><?Yea?></entry>
          <entry><?Yea?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Wha?></entry>
        </row>

        <row>
          <entry>Someone likes a comment you wrote</entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Yea?></entry>
        </row>

        <row>
          <entry>You like a comment you wrote</entry>
          <entry><?Yea?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
          <entry><?Nay?></entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>

  <para>
    Any custom modules added to Swarm may also send notifications.
  </para>

  <important>
    <para>
      Email delivery for events related to restricted changes is disabled by
      default. See <xref linkend="admin.security.restricted_changes"/> for
      details on how to enable restricted change notifications.
    </para>
  </important>

  <section xml:id="basics.notifications.mentions">
    <title>@mention notifications</title>

    <para>
      Using an <link linkend="basics.notable.mentions">@mention</link> in a
      review, changelist, or comment causes the referenced userid to receive a
      notification and be included in any future notifications regarding the
      associated file or review.
    </para>

    <para>
      When a comment is added to a job, Swarm sends a notification to users
      listed in <emphasis>user</emphasis> fields in the job, users @mentioned in
      the job description, and the authors of any associated changes.
    </para>

    <note>
      <para>
        Typically, you would not receive a notification when you @mention
        yourself. @mentions themselves do not trigger notifications; they inform
        who receives notifications.
      </para>
    </note>
  </section>

  <section xml:id="basics.notifications.commit">
    <title>Committed change notifications (*)</title>

    <para>
      Notifications for committed changes are sent by default, but can be
      disabled or require users to opt-in. Please see the
      <link linkend="admin.notifications">notification configuration</link> and
      <link linkend="projects.add">adding a project</link>
      for more details.
    </para>

    <para>
      When committed change notifications are configured for opt-in, you need to
      copy the configuration's special depot path to the
      <literal>Reviews:</literal> field in your user spec within the Helix
      Versioning Engine. Once you have done so, Swarm can send you committed
      change notifications for any change that matches a depot path specified in
      the <literal>Reviews:</literal> field.
    </para>

    <section xml:id="basics.notifications.commit.via_p4">
      <title>Update Reviews with p4</title>

      <orderedlist>
        <listitem>
          <para>
            Begin editing your user spec:
          </para>

<programlisting>
$ <command>p4 user</command>
</programlisting>
        </listitem>

        <listitem>
          <para>
            Edit the <literal>Reviews:</literal> field to include the special
            depot path, plus any other paths you want to receive notifications
            for.
          </para>
        </listitem>

        <listitem>
          <para>
            Save the spec.
          </para>
        </listitem>
      </orderedlist>
    </section>

    <section xml:id="basics.notifications.commit.via_p4v">
      <title>Update Reviews with P4V</title>

      <orderedlist>
        <listitem>
          <para>
            Select <guimenuitem>Connection &gt; Edit Current
            User...</guimenuitem>.
          </para>
        </listitem>

        <listitem>
          <para>
            Edit the <literal>Reviews:</literal> field to include the special
            depot path, plus any other paths you want to receive notifications
            for.
          </para>
        </listitem>

        <listitem>
          <para>
            Click <guibutton>OK</guibutton>.
          </para>
        </listitem>
      </orderedlist>
    </section>
  </section>

  <section xml:id="basics.notifications.review">
    <title>Review start notifications (**)</title>

    <para>
      By default, notifications are sent when a review is started, but can be
      disabled for a project. See <xref linkend="projects.add"/> for details.
    </para>
  </section>

  <section xml:id="basics.notifications.moderators">
    <title>Moderator notifications (***)</title>

    <para>
      Moderators are associated with specific project branches. Moderators
      receive notifications for reviews and commits against the branches they
      are associated with.
    </para>
  </section>

  <section xml:id="basics.notifications.groups">
    <title>Group member notifications (****)</title>

    <para>
      By default, notifications are not sent to group members for started review
      and committed changes, but can be selectively enabled. See
      <xref linkend="groups.add"/> for details.
    </para>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="basics.login_logout" xml:base="basics/login_logout.xml">
  <title>Log in / Log out</title>

  <para>
    When you are not logged into Swarm, certain features are unavailable to you,
    such as providing comments to changes or reviews, adding projects, and more.
  </para>

  <section xml:id="basics.login_logout.login">
    <title>To log in</title>

    <orderedlist>
      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/link-login.png"/>
            </imageobject>
          </inlinemediaobject>

          Click the <guibutton>Log in</guibutton> link found at the right of the
          main toolbar:
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="popup">
              <imagedata fileref="../../assets/html/images/dialog-login.png"/>
            </imageobject>
          </inlinemediaobject>

          Type in your username and password, appropriate for the Helix
          Versioning Engine that Swarm is configured to use.
        </para>
      </listitem>

      <listitem>
        <para>
          Check <guibutton>Remember Me</guibutton> if you prefer to stay logged
          in between browser restarts.
        </para>

        <note>
          <para>
            The Helix Versioning Engine can enforce maximum login times. You may
            become logged out even if <guibutton>Remember Me</guibutton> is
            checked.
          </para>
        </note>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/button-login.png"/>
            </imageobject>
          </inlinemediaobject>

          Click the <guibutton>Login</guibutton> button.
        </para>
      </listitem>
    </orderedlist>

    <note>
      <para>
        Whenever you log in, Swarm continues displaying the same page. Any
        features available to logged-in users appear automatically.
      </para>
    </note>
  </section>

  <section xml:id="basics.login_logout.logout">
    <title>To log out</title>

    <orderedlist>
      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="popup">
              <imagedata fileref="../../assets/html/images/dropdown-userid-closed.png"/>
            </imageobject>

            <textobject>
              <phrase>userid in toolbar</phrase>
            </textobject>
          </inlinemediaobject>

          Click your userid, found at the right of the main toolbar.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="popup">
              <imagedata fileref="../../assets/html/images/dropdown-userid-open-logout.png"/>
            </imageobject>

            <textobject>
              <phrase>Logout selected</phrase>
            </textobject>
          </inlinemediaobject>

          Select <guimenuitem>Log out</guimenuitem> from the drop-down menu.
        </para>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="basics.login_logout.require_login">
    <title>require_login</title>

    <para>
      By default, Swarm requires users to login, which prevents anonymous users
      from accessing a Helix Versioning Engine via Swarm. Users who have not
      logged in see a login page immediately when visiting Swarm:
    </para>

    <para condition="popup">
      <inlinemediaobject>
        <imageobject condition="popup">
          <imagedata fileref="../../assets/html/images/page-login.png"/>
        </imageobject>

        <textobject>
          <phrase>The Login page</phrase>
        </textobject>
      </inlinemediaobject>
      
      The steps to log in are identical to using the Login dialog.
    </para>

    <para>
      Swarm administrators can disable
      <link linkend="admin.security.require_login">require_login</link> to
      allow anonymous users to see commits, reviews, etc.
    </para>

    <note>
      <para>
        <emphasis>service</emphasis> and <emphasis>operator</emphasis> users are
        not permitted to login.
      </para>

      <para>
        For more information on these user types, see the
        <citetitle><link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4sag/">Perforce 
        System Administrator's Guide</link></citetitle>.
      </para>
    </note>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="basics.notable" xml:base="basics/notable.xml">
  <title>Notable minor features</title>

  <section xml:id="basics.notable.quick_urls">
    <title>Quick URLs</title>

    <para>
      Many developers like to type the least amount of information to
      locate the data they're looking for. Swarm tries to assist by
      handling URLs intelligently. If you visit a URL like:
    </para>

<programlisting>
https://<emphasis>myswarm.url</emphasis>/<replaceable>identifier</replaceable>
</programlisting>
    
    <para>
      Swarm attempts to locate <replaceable>identifier</replaceable> as a
      <link linkend="chapter.code_reviews">review</link>,
      <link linkend="basics.changelists">changelist</link>,
      <link linkend="basics.files">depot path</link>,
      <link linkend="basics.projects">project</link>,
      <link linkend="basics.jobs">job</link>,
      <link linkend="basics.users">user</link>,
      <link linkend="basics.groups">group</link>, depot name, and Git Fusion
      SHA1 (or fragment). If you visit the URL
      <code>https://<replaceable>myswarm.url</replaceable>/123</code>, Swarm
      redirects to
      <code>https://<replaceable>myswarm.url</replaceable>/changes/123</code>,
      provided that changelist <literal>123</literal> exists. If you visit the
      URL <code>https://<replaceable>myswarm.url</replaceable>/bob</code>, Swarm
      tries each of the following URLs and redirects to the first match:
    </para>

<programlisting>
https://<emphasis>myswarm.url</emphasis>/changes/<replaceable>bob</replaceable>
https://<emphasis>myswarm.url</emphasis>/files/<replaceable>bob</replaceable>
https://<emphasis>myswarm.url</emphasis>/projects/<replaceable>bob</replaceable>
https://<emphasis>myswarm.url</emphasis>/jobs/<replaceable>bob</replaceable>
https://<emphasis>myswarm.url</emphasis>/users/<replaceable>bob</replaceable>
https://<emphasis>myswarm.url</emphasis>/groups/<replaceable>bob</replaceable>
</programlisting>
    
    <para>
      If you enter an identifier that does not exist for any type of resource,
      Swarm displays a <literal>Page Not Found</literal> error.
    </para>

    <note>
      <para>
        Note that changelist identifiers must be numeric, so there could never
        be a changelist called <literal>bob</literal>.
      </para>
    </note>

    <note>
      <para>
        Git Fusion SHA1 identifiers (or a fragment of one) work when the SHA1
        refers to a single changelist. If the SHA1 refers to more than one
        changelist, which can occur for Git branches, Swarm reports a 404 error.
      </para>
    </note>
  </section>

  <section xml:id="basics.notable.mentions">
    <title>@mentions</title>

    <para>
      Whenever you write a changelist description, job description, comment, or
      review, use an <emphasis>@mention</emphasis> to refer to projects,
      changelists, jobs, and users. Swarm automatically creates a link for each
      @mention, so it's easy to navigate to the specified resource. For example,
      when you include <literal>@job12345</literal> in a comment, Swarm turns
      that text into a link that, when clicked, displays the
      <xref linkend="basics.jobs"/> page for <literal>job12345</literal>.
    </para>

    <note>
      <para>
        For jobs, the <literal>@</literal> character is optional: Swarm creates
        job links for any text that looks like a job identifier, such as
        <literal>job012345</literal>.
      </para>

      <para>
        Similarly, Swarm creates change links for
        <literal>change 1234</literal>, or review links for
        <literal>review 2345</literal>.
      </para>
    </note>

    <para>
      When you start a code review, any users included as @mentions in the
      changelist description automatically become reviewers for that code
      review. During a code review, including a user @mention in a
      <link linkend="basics.comments">comment</link> also causes the mentioned
      user to receive <link linkend="basics.notifications">notifications</link>
      of code review events, even if they are not a member of your project or
      following you or your project. Including an asterisk
      (<literal>*</literal>) before the userid in an @mention, for example
      <literal>@*<replaceable>userid</replaceable></literal>, that user becomes
      a <emphasis>required</emphasis> reviewer. See
      <xref linkend="code_reviews.responsibility.required"/> for details.
    </para>
  </section>

  <section xml:id="basics.notable.search">
    <title>Search</title>

    <para>
      <inlinemediaobject>
        <imageobject condition="popup">
          <imagedata fileref="../../assets/html/images/panel-search.png"/>
        </imageobject>

        <textobject>
          <phrase>Searching with Swarm</phrase>
        </textobject>
      </inlinemediaobject>

      Swarm can search for users, groups, projects, and file paths. Enter
      keywords or path elements into the search field, which appears at the
      right of the Swarm toolbar, to display any matching results.
    </para>

    <para>
      Navigate the results with the <keycap function="up"/> (up arrow) or
      <keycap function="down"/> (down arrow) keys, and display the
      details for the result by pressing <keycap function="enter"/>. Or, click a
      search result with your mouse.
    </para>

    <para>
      Full-content searching is only available if your Swarm administrator
      installs the Helix Search Tool. See <xref linkend="admin.search"/> for
      details.
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="popup">
          <imagedata fileref="../../assets/html/images/panel-search-no_results_yet.png"/>
        </imageobject>

        <textobject>
          <phrase>No search results, yet...</phrase>
        </textobject>
      </inlinemediaobject>

      Swarm updates the search results as you type. Some results should appear
      within a second or two. You may have to wait a few seconds for final
      results to be incorporated into the results list. When Swarm does not yet
      have any results, it indicates such.
    </para>
  </section>

  <section xml:id="basics.notable.jira">
    <title>JIRA integration</title>

    <para>
      Swarm ships with a JIRA module that can:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          create links to JIRA when Swarm displays JIRA issue identifiers in
          changelists, comments, jobs, reviews, etc.
        </para>
      </listitem>

      <listitem>
        <para>
          add links within JIRA back to Swarm, for JIRA issues associated with
          reviews or committed changes. These links reflect the current status
          of associated code reviews.
        </para>
      </listitem>
    </itemizedlist>

    <para>
      By default, the JIRA module is disabled. To enable JIRA integration, see
      <xref linkend="integrations.jira.enable"/>.
    </para>
  </section>

  <section xml:id="basics.notable.avatars">
    <title>Avatars</title>

    <para>
      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/thumb-avatar.png"/>
        </imageobject>

        <textobject>
          <phrase>An Avatar in an activity stream</phrase>
        </textobject>
      </inlinemediaobject>

      Each event in an activity stream includes an <emphasis>avatar</emphasis>,
      an image that represents the user responsible for the event. Avatars help
      to visually tie together various events and personalize the history
      presented in the stream.
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/thumb-avatars.png"/>
        </imageobject>

        <textobject>
          <phrase>Avatar variations</phrase>
        </textobject>
      </inlinemediaobject>

      Based on the email address entered in a user's Perforce account, Swarm
      attempts to fetch an avatar from
      <link xlink:href="http://gravatar.com/">gravatar.com</link>. Otherwise,
      Swarm selects from its collection of default avatars and color palettes to
      provide pleasing variations.
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/thumb-avatar-tooltip.png"/>
        </imageobject>

        <textobject>
          <phrase>An Avatar tooltip</phrase>
        </textobject>
      </inlinemediaobject>

      Hover your mouse over an avatar to display a tooltip with the user's full
      name.
    </para>
  </section>

  <section xml:id="basics.notable.follow">
    <title>Following</title>

    <para>
      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/button-follow.png"/>
        </imageobject>

        <textobject>
          <phrase>The Follow button</phrase>
        </textobject>
      </inlinemediaobject>

      Whenever you see a <guibutton>Follow</guibutton> button, for example when
      you are viewing a project page or user profile, clicking the button causes
      Swarm to send you notifications whenever there is activity generated by
      the current resource.
    </para>

    <para>
      This is useful if, in the case of a project, you are not a project member
      but want to know what's happening in the project. Or, in the case of a
      user, you want to see what activity that user generates.
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/button-unfollow.png"/>
        </imageobject>

        <textobject>
          <phrase>The Unfollow button</phrase>
        </textobject>
      </inlinemediaobject>

      To stop receiving notifications, visit the project page or user
      profile and click the <guibutton>Unfollow</guibutton> button.
    </para>
  </section>

  <section xml:id="basics.notable.time">
    <title>Time</title>

    <para>
      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/tooltip-timeago.png"/>
        </imageobject>

        <textobject>
          <phrase>The timeago tooltip</phrase>
        </textobject>
      </inlinemediaobject>

      Swarm typically displays the time of an event, such as when a file was
      created, as <emphasis>about X units ago</emphasis>. Hover your mouse
      pointer over a time display to see a tooltip displaying the exact date and
      time of the event.
    </para>
  </section>

  <section xml:id="basics.notable.shortcuts">
    <title>Keyboard shortcuts</title>

    <para>
      Swarm provides the following keyboard shortcuts:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <keycap>n</keycap> - While viewing <xref linkend="basics.diffs"/>,
          pressing <keycap>n</keycap> scrolls to the next difference.
        </para>
      </listitem>

      <listitem>
        <para>
          <keycap>p</keycap> - While viewing <xref linkend="basics.diffs"/>,
          pressing <keycap>p</keycap> scrolls to the previous difference.
        </para>
      </listitem>

      <listitem>
        <para>
          <keycap>ESC</keycap> - While viewing a dialog, pressing
          <keycap>ESC</keycap> closes the dialog.
        </para>

        <para>
          While entering text into a textarea, pressing <keycap>ESC</keycap>
          stops text entry.
        </para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="basics.notable.about">
    <title>About Swarm</title>

    <para>
      You can discover the version of Swarm you are using:
    </para>

    <orderedlist>
      <listitem>
        <para>
          <link linkend="basics.login_logout">Log in</link> to Swarm.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="popup">
              <imagedata fileref="../../assets/html/images/dropdown-userid-closed.png"/>
            </imageobject>

            <textobject>
              <phrase>userid in toolbar</phrase>
            </textobject>
          </inlinemediaobject>

          Click your userid, found at the right of the main toolbar.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="popup">
              <imagedata fileref="../../assets/html/images/dropdown-userid-open-about.png"/>
            </imageobject>

            <textobject>
              <phrase>userid drop-down menu</phrase>
            </textobject>
          </inlinemediaobject>

          <inlinemediaobject>
            <imageobject condition="popup">
              <imagedata fileref="../../assets/html/images/dialog-about_swarm.png"/>
            </imageobject>

            <textobject>
              <phrase>About Swarm dialog</phrase>
            </textobject>
          </inlinemediaobject>

          Select <guimenuitem>About Swarm</guimenuitem>. A dialog appears
          displaying Swarm's version:
        </para>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="basics.notable.custom_error_pages">
    <title>Custom error pages</title>

    <para condition="popup">
      <inlinemediaobject>
        <imageobject condition="popup">
          <imagedata fileref="../../assets/html/images/error-404.jpg"/>
        </imageobject>

        <textobject>
          <phrase>Custom 404 Page featuring Bizzy Heisenbug</phrase>
        </textobject>
      </inlinemediaobject>
      
      <inlinemediaobject>
        <imageobject condition="popup">
          <imagedata fileref="../../assets/html/images/anim-bee_swarm.gif"/>
        </imageobject>

        <textobject>
          <phrase>Bees swarm your mouse pointer on error pages.</phrase>
        </textobject>
      </inlinemediaobject>

      If Swarm encounters an error during processing, such as when a
      <link linkend="basics.notable.quick_urls">Quick URL</link> is used that
      points to a non-existent resource, Swarm presents a custom error page
      featuring its mascot, Bizzy Heisenbug. Bizzy's friends swarm your mouse
      pointer while you are moving it.
    </para>
  </section>

  <section xml:id="basics.notable.short_links">
    <title>Short links</title>

    <para>
      Swarm provides a <emphasis>short link</emphasis> feature that creates
      shorter URLs than normal to make sharing specific views within Swarm
      easier. It is also possible to register or configure an alternate, shorter
      hostname to have even shorter URLs. See
      <xref linkend="admin.short_links"/> for details.
    </para>

    <para>
      Conceptually, this is identical to
      <link xlink:href="http://tinyurl.com/"/>, or Twitter's
      <link xlink:href="http://t.co/"/>, but is restricted to Swarm URLs on a
      hostname you control.
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/button-short_link.png"/>
        </imageobject>

        <textobject>
          <phrase>The short links "bookmark" button.</phrase>
        </textobject>
      </inlinemediaobject>
    </para>

    <para>
      Swarm displays a <emphasis>bookmark</emphasis> button when viewing files
      or folders in the depot.
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/tooltip-short_link.png"/>
        </imageobject>

        <textobject>
          <phrase>The short links "bookmark" button.</phrase>
        </textobject>
      </inlinemediaobject>
    </para>

    <para>
      Click the button to display a popup containing the short link. Press
      <keycombo action="simul"><keycap>CTRL</keycap><keycap>C</keycap></keycombo>
      (on Windows and Linux), or <keycombo action="simul"><keycap>Command</keycap>
      <keycap>C</keycap></keycombo> (on Mac OSX), to copy the short link. You can
      then paste the short link anywhere you'd like to share the current file
      or folder view in Swarm.
    </para>
  </section>

  <section xml:id="basics.notable.mobile_browser_compatibility">
    <title>Mobile browser compatibility</title>

    <para>
      Swarm is intended to be used from any modern browser, including most
      mobile device browsers. For our initial release, mobile browser testing
      has been quite limited. We anticipate that you may encounter various
      issues, but we certainly look forward to hearing about your mobile device
      experiences using Swarm.
    </para>
  </section>
</section>
</chapter>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><chapter version="5.0" xml:id="chapter.groups" xml:base="groups/index.xml">
  <title>Groups</title>

  <para>
    <emphasis>Groups</emphasis> are a feature of the Helix Versioning Engine
    that makes it easier to manage permissions for users. Swarm can use groups
    to coordinate review activities and responsibilities. This chapter covers
    how to manage groups in Swarm.
  </para>

  <itemizedlist>
   <listitem>
    <para>
      <xref linkend="groups.add"/>
    </para>
   </listitem>

   <listitem>
    <para>
      <xref linkend="groups.edit"/>
    </para>
   </listitem>

   <listitem>
    <para>
      <xref linkend="groups.remove"/>
    </para>
   </listitem>
  </itemizedlist>

  <para>
    See <xref linkend="basics.groups"/> for an introduction to Swarm
    groups.
  </para>

  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="groups.add" xml:base="groups/add.xml">
  <title>Add a group</title>

  <important>
    <para>
      You must have <emphasis>super</emphasis> privileges in the Helix
      Versioning Engine (<command>p4d</command>), or have <emphasis>admin</emphasis>
      privileges in <command>p4d</command> version 2012.1 or newer, to create a
      group. If you do not have sufficient permissions, Swarm does not display
      the <guibutton>Add Group</guibutton> button.
    </para>
  </important>

  <orderedlist>
    <listitem>
      <para>
        Click the <guilabel>Groups</guilabel> link in the main toolbar to
        display the groups listing page.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/button-add_group.png"/>
          </imageobject>

          <textobject>
            <phrase>The Add Group button</phrase>
          </textobject>
        </inlinemediaobject>

        Click the <guibutton>Add Group</guibutton> button.
      </para>

      <para>
        The <guilabel>Add Group</guilabel> page appears:
      </para>

      <para>
        <inlinemediaobject>
          <imageobject>
            <imagedata fileref="../../assets/html/images/page-add_group.png"/>
          </imageobject>

          <textobject>
            <phrase>The Add Group page</phrase>
          </textobject>
        </inlinemediaobject>
      </para>
    </listitem>

    <listitem>
      <para>
        Provide a name for the group.
      </para>
    </listitem>

    <listitem>
      <para>
        Optionally provide a description.
      </para>
    </listitem>

    <listitem>
      <para>
        Optionally specify an owner. This field auto-suggests users within the
        Helix Versioning Engine as you type.
      </para>

      <para>
        <inlinemediaobject>
          <imageobject>
            <imagedata fileref="../../assets/html/images/thumb-add_group_owner.png"/>
          </imageobject>

          <textobject>
            <phrase>The Add Owner field</phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <para>
        Once specified, modifying the group's definition is restricted to
        group owners and users with <emphasis>super</emphasis> privileges in
        the Helix Versioning Engine.
      </para>
      
      <para>
        If you do not specify an owner, you must specify at least one member
        (below).
      </para>
    </listitem>

    <listitem>
      <para>
        Optionally specify group members. This field auto-suggests projects,
        groups, and users within the Helix Versioning Engine as you type (up to
        a combined limit of 20 entries).
      </para>

      <para>
        <inlinemediaobject>
          <imageobject>
            <imagedata fileref="../../assets/html/images/dropdown-group_member-complete.png"/>
          </imageobject>

          <textobject>
            <phrase>
              Auto-suggesting group members
            </phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <para>
        If you specify a project, the project's members become members of the
        group. If you specify a group, that group becomes a sub-group of your
        new group, and all of its members (and members of any of its sub-groups)
        become members of your new group.
      </para>

      <para>
        If you do not specify any members, you must specify at least one owner
        (above).
      </para>
    </listitem>

    <listitem>
      <para>
        Optional enable notification whenever a group member starts a review, or
        when a group member commits a change.
      </para>

      <note>
        <para>
          Members of your group may receive notification emails even if group
          notifications are disabled as they may be members of a project, or
          follow a project or user, or Swarm's review daemon functionality may
          be enabled. See the <link linkend="basics.notifications">notifications
          overview</link> for details.
        </para>
      </note>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/button-save.png"/>
          </imageobject>

          <textobject>
            <phrase>Save button for Group configuration</phrase>
          </textobject>
        </inlinemediaobject>

        Click <guibutton>Save</guibutton>.
      </para>

      <note>
        <para>
          The <guibutton>Save</guibutton> button is disabled if any required
          fields are empty.
        </para>
      </note>
    </listitem>
  </orderedlist>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="groups.edit" xml:base="groups/edit.xml">
  <title>Edit a group</title>

  <important>
    <para>
      You must be an owner of a group, or be a user with
      <emphasis>super</emphasis> privileges in the Helix Versioning Engine, to
      edit a group.
    </para>
  </important>

  <orderedlist>
    <listitem>
      <para>
        Visit the group page you want to edit.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/button-settings.png"/>
          </imageobject>

          <textobject>
            <phrase>Group Settings button</phrase>
          </textobject>
        </inlinemediaobject>

        Click <guibutton>Settings</guibutton> in the group's toolbar. If you do
        not have permission to edit a group, this button does not appear.
      </para>
    </listitem>

    <listitem>
      <para>
        Adjust the group's details as required. See
        <xref linkend="groups.add"/> for more details.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/button-save.png"/>
          </imageobject>

          <textobject>
            <phrase>Save button for Group configuration</phrase>
          </textobject>
        </inlinemediaobject>

        Click <guibutton>Save</guibutton>.
      </para>
    </listitem>
  </orderedlist>

  <note>
    <para>
      When a group is edited, the list of associated reviews is not immediately
      updated to match any changes in membership. The association with a review
      does not change until the review is updated.
    </para>
  </note>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="groups.remove" xml:base="groups/remove.xml">
  <title>Remove a group</title>

  <important>
    <para>
      To remove a group, you must either have <emphasis>super</emphasis>
      privileges in the Helix Versioning Engine, or be the group owner.
    </para>
  </important>

  <orderedlist>
    <listitem>
      <para>
        Visit the group page you want to remove.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/button-settings.png"/>
          </imageobject>

          <textobject>
            <phrase>Group Settings button</phrase>
          </textobject>
        </inlinemediaobject>

        Click <guibutton>Settings</guibutton> in the group's toolbar. If you do
        not have permission to edit a group, this button does not appear.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/button-delete.png"/>
          </imageobject>

          <textobject>
            <phrase>Group Delete button</phrase>
          </textobject>
        </inlinemediaobject>

        Click <guibutton>Delete</guibutton>.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/thumb-group_delete_tooltip.png"/>
          </imageobject>

          <textobject>
            <phrase>Group delete confirmation tooltip</phrase>
          </textobject>
        </inlinemediaobject>

        A tooltip appears to confirm whether you want to delete this group.
        Click the tooltip's <guibutton>Delete</guibutton> button.
      </para>
    </listitem>
  </orderedlist>
</section>
</chapter>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><chapter version="5.0" xml:id="chapter.projects" xml:base="projects/index.xml">
  <title>Projects</title>

  <para>
    A Swarm project is a group of Perforce users who are working together
    on a specific codebase, defined by one or more
    <glossterm linkend="branch">branches</glossterm> of code, along with a
    <glossterm linkend="job">job</glossterm> filter, and automated test
    integration. This chapter covers Swarm's project management capabilities.
  </para>

  <itemizedlist>
   <listitem>
    <para>
      <xref linkend="projects.add"/>
    </para>
   </listitem>

   <listitem>
    <para>
      <xref linkend="projects.edit"/>
    </para>
   </listitem>

   <listitem>
    <para>
      <xref linkend="projects.membership"/>
    </para>
   </listitem>

   <listitem>
    <para>
      <xref linkend="projects.remove"/>
    </para>
   </listitem>
  </itemizedlist>

  <para>
    See <xref linkend="basics.projects"/> for an introduction to Swarm
    projects.
  </para>

  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="projects.add" xml:base="projects/add.xml">
  <title>Add a project</title>

  <orderedlist>
    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/button-add_project.png"/>
          </imageobject>

          <textobject>
            <phrase>The Add Project button</phrase>
          </textobject>
        </inlinemediaobject>

        On the Swarm home page, click the <guibutton>+</guibutton> icon at the
        top-right of the projects sidebar.
      </para>

      <note>
        <para>
          The ability to add projects can be
          <link linkend="admin.projects.limit_project_add_admin">limited to
          administrators only</link>, or
          <link linkend="admin.projects.limit_project_add_group">limited to
          members of specific groups</link>. When limited, users who are not
          administrators, or a member of the specified group, will not see the
          <guibutton>+</guibutton> icon at the top-right of the projects
          sidebar.
        </para>
      </note>

      <para>
        The <guilabel>Add Project</guilabel> page appears:
      </para>

      <para>
        <inlinemediaobject>
          <imageobject>
            <imagedata fileref="../../assets/html/images/page-add_project.png"/>
          </imageobject>

          <textobject>
            <phrase>The Add Project page</phrase>
          </textobject>
        </inlinemediaobject>
      </para>
    </listitem>

    <listitem>
      <para>
        Provide a name for the project.
      </para>
    </listitem>

    <listitem>
      <para>
        Optionally provide a description.
      </para>
    </listitem>

    <listitem>
      <para>
        Optionally click the <guibutton>Only Owners and Administrators can edit
        the project</guibutton> checkbox. When checked, a field is displayed
        allowing you to add a new owner. The field auto-suggests users within the
        Helix Versioning Engine as you type.
      </para>

      <para>
        <inlinemediaobject>
          <imageobject>
            <imagedata fileref="../../assets/html/images/thumb-add_owner.png"/>
          </imageobject>

          <textobject>
            <phrase>The Add Owner field</phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <note>
        <para>
          You cannot specify a <link linkend="basics.groups">group</link> as
          an owner.
        </para>
      </note>

      <para>
        Once specified, modifying the project's definition is restricted to
        project owners and administrators (users with
        <emphasis>admin</emphasis>-level or <emphasis>super</emphasis>-level
        privileges in the Helix Versioning Engine).
      </para>
    </listitem>

    <listitem>
      <para>
        Specify at least one team member. This field auto-suggests projects,
        groups, and users within the Helix Versioning Engine as you type (up to
        a combined limit of 20 entries).
      </para>

      <para>
        <inlinemediaobject>
          <imageobject>
            <imagedata fileref="../../assets/html/images/dropdown-project_member-complete.png"/>
          </imageobject>

          <textobject>
            <phrase>
              Auto-suggesting members
            </phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <important>
        <para>
          During project creation, if you do not have <emphasis>admin</emphasis>
          privileges and you do not add yourself as a member or as an owner, you
          cannot edit this project's configuration later.
        </para>
      </important>

      <para>
        See <xref linkend="projects.membership"/> for more details.
      </para>
    </listitem>

    <listitem>
      <para>
        Optionally click the <guibutton>Private</guibutton> checkbox to make
        this project private. Private projects and their associated reviews are
        only visible to project owners, moderators, and members, plus users with
        <emphasis>admin</emphasis> or <emphasis>super</emphasis> privileges in
        the Helix Versioning Engine.
      </para>

      <para>
        For more information, see <xref linkend="basics.projects.private"/>.
      </para>
    </listitem>

    <listitem>
      <para>
        Optionally click the <guibutton>Add Branch</guibutton> link to display
        the branch drop-down dialog:

        <inlinemediaobject>
          <imageobject>
            <imagedata fileref="../../assets/html/images/link-add_branch.png"/>
          </imageobject>

          <textobject>
            <phrase>The Add Branch link</phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <para>
        <inlinemediaobject>
          <imageobject>
            <imagedata fileref="../../assets/html/images/dropdown-branch.png"/>
          </imageobject>

        <textobject>
          <phrase>The branch drop-down dialog</phrase>
        </textobject>
        </inlinemediaobject>
      </para>

      <orderedlist numeration="loweralpha">
        <listitem>
          <para>
            Enter a short <guilabel>Name</guilabel> for the branch.
          </para>
        </listitem>

        <listitem>
          <para>
            Enter one or more branch paths, one per line.
          </para>

          <note>
            <para>
              Each branch path should be expressed in depot syntax. Wildcards
              should not be used; the only exception is that the branch path can
              end with the Perforce wildcard <literal>...</literal>
            </para>

            <para>
              For more information, see
              <link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/cmdref/o.fspecs.html">Command
              Reference: File Specifications</link>.
            </para>
          </note>
        </listitem>

        <listitem xml:id="projects.add.moderators">
          <para>
            Optionally check the <guibutton>Only Moderators can approve or
            reject reviews</guibutton> checkbox. When checked, a field is
            displayed allowing you to add a new moderator. The field auto-suggests
            users within the Helix Versioning Engine as you type.
          </para>

          <para>
            <inlinemediaobject>
              <imageobject>
                <imagedata fileref="../../assets/html/images/thumb-add_moderator.png"/>
              </imageobject>

              <textobject>
                <phrase>The Add Moderator field</phrase>
              </textobject>
            </inlinemediaobject>
          </para>

          <note>
            <para>
              You cannot specify a <link linkend="basics.groups">group</link> as
              a moderator.
            </para>
          </note>

          <para>
            Once the branch specification is complete and the project has been
            saved, changing the state of any review associated with
            this moderated branch is restricted as follows:
          </para>

          <!-- vim: set ts=2 sw=2 tw=80 ai si: --><itemizedlist version="5.0" xml:base="../common/list-state_transition_restrictions.xml">
  <listitem>
    <para>
      Only moderators can approve or reject the review. Moderators can also
      transition a review to any other state.
    </para>
  </listitem>

  <listitem>
    <para>
      The review's author, when she is not a moderator, can change the review's
      state to <guilabel>Needs Review</guilabel>, <guilabel>Needs
      Revision</guilabel>, <guilabel>Archived</guilabel>, and can attach
      committed changelists.
    </para>
    
    <para>
      Normally, the review's author cannot change the review's state to
      <guilabel>Approved</guilabel> or <guilabel>Rejected</guilabel> on
      moderated branches. However, authors that are also moderators have
      moderator privileges, and may approve or reject their own review.
    </para>

    <para>
      When <link linkend="admin.reviews.disable_self_approve"><literal>disable_self_approve</literal></link>
      is enabled, authors who are moderators (or even users with
      <emphasis>admin</emphasis> privileges) cannot approve their own reviews.
    </para>
  </listitem>

  <listitem>
    <para>
      Project members can change the review's state to <guilabel>Needs
      Review</guilabel> or <guilabel>Needs Revision</guilabel>, and can attach
      committed changelists. Project members cannot change the review's state to
      <guilabel>Approved</guilabel>, <guilabel>Rejected</guilabel>, or
      <guilabel>Archived</guilabel>.
    </para>
  </listitem>

  <listitem>
    <para>
      Users that are not project members, moderators, or the review's author
      cannot transition the review's state.
    </para>
  </listitem>

  <listitem>
    <para>
      For the review's author and project members, if a review is not in one of
      their permitted states, for example if the review's state is
      <guilabel>Rejected</guilabel>, they cannot transition the review to
      another state.
    </para>

    <para>
      These restrictions have no effect on who can start a review.
    </para>
  </listitem>
</itemizedlist>
        </listitem>

        <listitem>
          <para>
            <inlinemediaobject>
              <imageobject condition="thumb">
                <imagedata fileref="../../assets/html/images/button-done.png"/>
              </imageobject>

              <textobject>
                <phrase>The Done button</phrase>
              </textobject>
            </inlinemediaobject>

            Click the <guibutton>Done</guibutton> button to accept your branch
            specification.
          </para>
        </listitem>
      </orderedlist>

      <para>
        Once the branch definition has completed, if any moderators were
        specified, the number of moderators for that branch is displayed in the
        list of branches:
      </para>

      <para>
        <inlinemediaobject>
          <imageobject>
            <imagedata fileref="../../assets/html/images/thumb-branch_moderators.png"/>
          </imageobject>

          <textobject>
            <phrase>Branch moderators count.</phrase>
          </textobject>
        </inlinemediaobject>
      </para>
    </listitem>

    <listitem>
      <para>
        Optionally specify a job filter. The job filter allows you to specify
        criteria that are used to associate jobs with projects. For example,
        entering <literal>Subsystem=ProjectA</literal> associates jobs whose
        <guilabel>subsystem</guilabel> field is set to
        <literal>ProjectA</literal> with the current project.
      </para>

      <note>
        <para>
          This job filter is simpler than the filters available in other
          Perforce clients. The filter must be expressed as
          <literal><replaceable>field</replaceable>=<replaceable>value</replaceable></literal>
          pairs; bare keywords are not permitted. The asterisk for wildcard
          matching is permitted, but no other filter expression syntax is
          permitted.
        </para>
      </note>
    </listitem>

    <listitem>
      <para>
        Optionally disable notification emails for new reviews, or committed
        reviews. These notifications are enabled by default, but some teams
        prefer fewer messages in their inboxes. Note that any <link linkend="basics.notable.mentions">@mentioned</link> users, or users who
        are explicitly added to a review or changelist, will receive
        notifications even if new review/committed review notifications are
        disabled.
      </para>

      <para>
        <inlinemediaobject>
          <imageobject>
            <imagedata fileref="../../assets/html/images/thumb-email_notifications.png"/>
          </imageobject>

          <textobject>
            <phrase>Checkboxes to control email notifications.</phrase>
          </textobject>
        </inlinemediaobject>
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/checkbox-automated_tests.png"/>
          </imageobject>

          <textobject>
            <phrase>The checkbox indicating automated test activation status</phrase>
          </textobject>
        </inlinemediaobject>

        Optionally click the <guibutton>Enable</guibutton> checkbox beside
        <guilabel>Automated Tests</guilabel> to display the automated tests
        configuration fields.
      </para>

      <para>
        <inlinemediaobject>
          <imageobject condition="popup">
            <imagedata fileref="../../assets/html/images/fields-automated_tests.png"/>
          </imageobject>

          <textobject>
            <phrase>The Automated Tests drop-down dialog</phrase>
          </textobject>
        </inlinemediaobject>

        Specify a URL that triggers a test execution. Use the special arguments
        described in the dialog to help compose a URL that informs your test
        suite with important details. For more details, see
        <xref linkend="quickstart.integrate_test_suite"/>.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/checkbox-automated_deployment.png"/>
          </imageobject>

        <textobject>
          <phrase>The checkbox indicating automated deployment activation status</phrase>
        </textobject>
        </inlinemediaobject>

        Optionally click the <guibutton>Enable</guibutton> checkbox beside
        <guilabel>Automated Deployment</guilabel> to display the automated
        deployment configuration fields:
      </para>

      <para>
        <inlinemediaobject>
          <imageobject condition="popup">
            <imagedata fileref="../../assets/html/images/fields-automated_deployment.png"/>
          </imageobject>

          <textobject>
            <phrase>The Automated Deployment drop-down dialog</phrase>
          </textobject>
        </inlinemediaobject>

        Specify a URL that triggers a deployment of the project's code. Use the
        special arguments described in the dialog to help compose a URL that
        informs your deployment program with important details. For more
        details, see <xref linkend="quickstart.review_deployment"/>.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/button-save.png"/>
          </imageobject>

          <textobject>
            <phrase>Save button for Project configuration</phrase>
          </textobject>
        </inlinemediaobject>

        Click <guibutton>Save</guibutton>.
      </para>

      <note>
        <para>
          The <guibutton>Save</guibutton> button is disabled if any required
          fields are empty.
        </para>
      </note>

      <important>
        <para>
          It is possible to create a project that you cannot edit. This can
          happen if you have specified owners but not yourself as an owner, or if
          you have not specified yourself as a member. Swarm can detect some
          (but not all) such situations when you save a project; when it does
          detect such a situation a warning dialog is displayed:
        </para>

        <para>
          <inlinemediaobject>
            <imageobject>
              <imagedata fileref="../../assets/html/images/tooltip-project_save-non_member.png"/>
            </imageobject>

            <textobject>
              <phrase>Dialog warning about lack of membership</phrase>
            </textobject>
          </inlinemediaobject>
        </para>

        <para>
          If you see this dialog, click <guibutton>Continue</guibutton> to save
          the project without your ownership/membership, or click
          <guibutton>Cancel</guibutton> within the dialog to continue editing
          the project. The project page's <guibutton>Save</guibutton> and
          <guibutton>Cancel</guibutton> buttons are disabled while this dialog
          is visible.
        </para>
      </important>
    </listitem>
  </orderedlist>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="projects.edit" xml:base="projects/edit.xml">
  <title>Edit a project</title>

  <orderedlist>
    <listitem>
      <para>
        Visit the project page you want to edit.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/button-settings.png"/>
          </imageobject>

          <textobject>
            <phrase>Project Settings button</phrase>
          </textobject>
        </inlinemediaobject>

        Click <guibutton>Settings</guibutton> in the project's toolbar.
      </para>
    </listitem>

    <listitem>
      <para>
        Adjust the project's details as required. See
        <xref linkend="projects.add"/> for more details.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/button-save.png"/>
          </imageobject>

          <textobject>
            <phrase>Save button for Project configuration</phrase>
          </textobject>
        </inlinemediaobject>

        Click <guibutton>Save</guibutton>.
      </para>
    </listitem>
  </orderedlist>

  <note>
    <para>
      By default, any member of a project can edit the project's configuration.
      Administrators can configure Swarm to prevent changes to the project's name
      and branch definition(s). See <xref linkend="admin.projects"/> for details.
    </para>
  </note>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="projects.membership" xml:base="projects/membership.xml">
  <title>Membership</title>

  <para>
    Membership in a Swarm project identifies users as belonging to the project,
    making them part of the team.
  </para>

  <para>
    The are only a few notable differences between project members and
    non-members:
  </para>
  
  <informaltable>
    <tgroup cols="4">
      <colspec colname="" colwidth="1.6*"/>
      <colspec colname="" colwidth="1*"/>
      <colspec colname="" colwidth="1.75*"/>
      <colspec colname="" colwidth="8*"/>

      <thead>
        <row>
          <entry>Difference</entry>
          <entry>Member</entry>
          <entry>Non-Member</entry>
          <entry>Description</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry><xref linkend="basics.notifications"/></entry>
          <entry><?Yea?></entry>
          <entry><?Nay?></entry>
          <entry>
            <para>
              Members receive project notifications; non-members do not.
            </para>
          </entry>
        </row>

        <row>
          <entry><xref linkend="basics.notable.avatars"/></entry>
          <entry><?Yea?></entry>
          <entry><?Nay?></entry>
          <entry>
            <para>
              The project's home page features member's avatars.
            </para>
          </entry>
        </row>

        <row>
          <entry><xref linkend="code_reviews.states"/></entry>
          <entry><?Yea?></entry>
          <entry><?Nay?></entry>
          <entry>
            <para>
              Members can transition code review states; non-members cannot.
            </para>
          </entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>

  <para>
    There are two ways to become a member of a project in Swarm:
  </para>

  <orderedlist>
    <listitem>
      <para>
        Add a project and make yourself a member.
      </para>
    </listitem>

    <listitem>
      <para>
        Ask a member of an existing project to add you as a member.
      </para>

      <note>
        <para>
          If the project has any
          <link linkend="projects.membership.owners">owners</link> specified,
          you need to ask a project owner to add you as a member.
        </para>
      </note>
    </listitem>
  </orderedlist>

  <note>
    <para>
      Users with <emphasis>admin</emphasis> privileges in the Helix Versioning
      Engine can always adjust the settings for any project, including adjusting
      membership.
    </para>
  </note>

  <section xml:id="projects.membership.add">
    <title>Add a member</title>

    <para>
      If you are an owner of a project, or a member of a project without
      specified owners:
    </para>

    <orderedlist>
      <listitem>
        <para>
          Visit the project page that needs the new member.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/button-settings.png"/>
            </imageobject>

            <textobject>
              <phrase>Project Settings button</phrase>
            </textobject>
          </inlinemediaobject>

          Click <guibutton>Settings</guibutton> in the project's toolbar.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/dropdown-project_member-complete.png"/>
            </imageobject>

            <textobject>
              <phrase>Auto-suggesting members</phrase>
            </textobject>
          </inlinemediaobject>

          The <guilabel>Members</guilabel> text field lets you specify a
          Swarm project, Perforce group, or Perforce user to add to the members
          for this project. The field auto-suggests project ids, group ids, and
          userids by matching what you have typed so far against the list of
          users in the Helix Versioning Engine.
        </para>

        <para>
          When you specify a project or group, all of the members of that
          project or group become members of this project. Swarm does not
          display all of the individual users, but it does provide a visual
          separation: project or group names are displayed first, with a darker
          blue background.
        </para>

        <para>
          <inlinemediaobject>
            <imageobject>
              <imagedata fileref="../../assets/html/images/panel-project_members_with_group.png"/>
            </imageobject>

            <textobject>
              <phrase>
                The project membership showing an included project
              </phrase>
            </textobject>
          </inlinemediaobject>
        </para>

        <para>
          When you hover your mouse over a member project or group, a tooltip
          appears displaying up to 100 of the userids of the project's or
          group's users:
        </para>

        <para>
          <inlinemediaobject>
            <imageobject>
              <imagedata fileref="../../assets/html/images/tooltip-project_member-project.png"/>
            </imageobject>

            <textobject>
              <phrase>
                The tooltip showing the membership of an included project
              </phrase>
            </textobject>
          </inlinemediaobject>
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/button-save.png"/>
            </imageobject>

            <textobject>
              <phrase>Save button for Project configuration</phrase>
            </textobject>
          </inlinemediaobject>

          Click <guibutton>Save</guibutton>.
        </para>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="projects.membership.remove">
    <title>Remove a member</title>

    <para>
      If you are an owner of a project, or a member of a project without
      specified owners:
    </para>

    <orderedlist>
      <listitem>
        <para>
          Visit the project page that has a member you want to remove.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/button-settings.png"/>
            </imageobject>

            <textobject>
              <phrase>Project Settings button</phrase>
            </textobject>
          </inlinemediaobject>

          Click <guibutton>Settings</guibutton> in the project's toolbar.
        </para>
      </listitem>

      <listitem>
        <para>
          Known members of the project are displayed beneath the
          <guilabel>Members</guilabel> text field, with a medium blue button
          representing projects or groups, and a light blue button representing
          individual users. Click the <guibutton>X</guibutton> next to the
          project id, group id, or userid you want to remove.
        </para>

        <para>
          <inlinemediaobject>
            <imageobject>
              <imagedata fileref="../../assets/html/images/panel-project_members_with_group.png"/>
            </imageobject>

            <textobject>
              <phrase>
                The project membership showing an included project
              </phrase>
            </textobject>
          </inlinemediaobject>
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/button-save.png"/>
            </imageobject>

            <textobject>
              <phrase>Save button for Project configuration</phrase>
            </textobject>
          </inlinemediaobject>

          Click <guibutton>Save</guibutton>.
        </para>
      </listitem>
    </orderedlist>

    <caution>
      <para>
        You are able to remove your own membership or ownership. Doing so could
        prevent you from managing the project.
      </para>
    </caution>
  </section>

  <section xml:id="projects.membership.owners">
    <title>Owners</title>

    <para>
      A project <emphasis>owner</emphasis> is a Perforce user that controls the
      configuration for a project. An owner does not need to be a member of a
      project, but once <guilabel>Only Owners and Administrators can edit the
      project</guilabel> has been set, only an owner or user with
      <emphasis>admin</emphasis> privileges in the Helix Versioning Engine can
      edit any project settings.
    </para>
  </section>

  <section xml:id="projects.membership.moderators">
    <title>Moderators</title>

    <para>
      A project <emphasis>moderator</emphasis> is a user assigned to moderate
      reviews for a specific branch associated with a project. See how to
      <link linkend="projects.add.moderators">specify moderators</link>.
    </para>
    
    <para>
      When <guilabel>Only Moderators can approve or reject reviews</guilabel> is
      set for a project branch, changing the state of any review associated with
      the moderated branch is restricted as follows:
    </para>

    <!-- vim: set ts=2 sw=2 tw=80 ai si: --><itemizedlist version="5.0" xml:base="../common/list-state_transition_restrictions.xml">
  <listitem>
    <para>
      Only moderators can approve or reject the review. Moderators can also
      transition a review to any other state.
    </para>
  </listitem>

  <listitem>
    <para>
      The review's author, when she is not a moderator, can change the review's
      state to <guilabel>Needs Review</guilabel>, <guilabel>Needs
      Revision</guilabel>, <guilabel>Archived</guilabel>, and can attach
      committed changelists.
    </para>
    
    <para>
      Normally, the review's author cannot change the review's state to
      <guilabel>Approved</guilabel> or <guilabel>Rejected</guilabel> on
      moderated branches. However, authors that are also moderators have
      moderator privileges, and may approve or reject their own review.
    </para>

    <para>
      When <link linkend="admin.reviews.disable_self_approve"><literal>disable_self_approve</literal></link>
      is enabled, authors who are moderators (or even users with
      <emphasis>admin</emphasis> privileges) cannot approve their own reviews.
    </para>
  </listitem>

  <listitem>
    <para>
      Project members can change the review's state to <guilabel>Needs
      Review</guilabel> or <guilabel>Needs Revision</guilabel>, and can attach
      committed changelists. Project members cannot change the review's state to
      <guilabel>Approved</guilabel>, <guilabel>Rejected</guilabel>, or
      <guilabel>Archived</guilabel>.
    </para>
  </listitem>

  <listitem>
    <para>
      Users that are not project members, moderators, or the review's author
      cannot transition the review's state.
    </para>
  </listitem>

  <listitem>
    <para>
      For the review's author and project members, if a review is not in one of
      their permitted states, for example if the review's state is
      <guilabel>Rejected</guilabel>, they cannot transition the review to
      another state.
    </para>

    <para>
      These restrictions have no effect on who can start a review.
    </para>
  </listitem>
</itemizedlist>
  </section>


</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="projects.remove" xml:base="projects/remove.xml">
  <title>Remove a project</title>

  <note>
    <para>
      Users with <emphasis>super</emphasis> or <emphasis>admin</emphasis>
      privileges in the Helix Versioning Engine can always remove projects.
    </para>
    
    <para>
      When a project has
      <link linkend="projects.membership.owners">owners</link> assigned, owners
      can remove any projects they own. Projects without assigned owners can be
      removed by any of their members.
    </para>
  </note>

  <para>
    Use the following steps to remove a project:
  </para>

  <orderedlist>
    <listitem>
      <para>
        Visit the project page you want to remove.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/button-settings.png"/>
          </imageobject>

          <textobject>
            <phrase>Project Settings button</phrase>
          </textobject>
        </inlinemediaobject>

        Click <guibutton>Settings</guibutton> in the project's toolbar.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/button-delete.png"/>
          </imageobject>

          <textobject>
            <phrase>Project Delete button</phrase>
          </textobject>
        </inlinemediaobject>

        Click <guibutton>Delete</guibutton>.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/thumb-project_delete_tooltip.png"/>
          </imageobject>

          <textobject>
            <phrase>Project Delete confirmation tooltip</phrase>
          </textobject>
        </inlinemediaobject>

        A tooltip appears to confirm whether you want to delete this project.
        Click the tooltip's <guibutton>Delete</guibutton> button.
      </para>
    </listitem>
  </orderedlist>
</section>
</chapter>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><chapter version="5.0" xml:id="chapter.code_reviews" xml:base="code_reviews/index.xml">
  <title>Code reviews</title>

  <para>
    A code review is a process in which other developers can see your code and
    provide feedback that can suggest ways to improve the code's structure,
    performance, maintainability, and interaction with other code.
  </para>

  <bridgehead xml:id="code_reviews.index.benefits">Benefits</bridgehead>

  <para>
    Some of the benefits of code review are:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        Enforcing coding standards: code reviews can catch code that does not
        meet your team's coding standards. This improves the readability and
        consistency of your codebase.
      </para>
    </listitem>

    <listitem>
      <para>
        Knowledge and experience sharing: your team can help you learn to code
        better. This is particularly useful for developers new to the team.
      </para>
    </listitem>

    <listitem>
      <para>
        Early defect detection: small errors can be caught before they become
        problems later on.
      </para>
    </listitem>

    <listitem>
      <para>
        Code sharing: code reviews spread knowledge of the current codebase,
        which helps both with maintaining a mental model of the overall
        project, as well as defending against developer absences.
      </para>
    </listitem>

    <listitem>
      <para>
        Better personal review: knowing that someone might catch a simple
        coding error often increases the review developers perform of their
        own code.
      </para>
    </listitem>
  </itemizedlist>

  <para>
    Swarm attempts to provide these benefits without adding onerous overhead
    for developers.
  </para>

  <bridgehead xml:id="code_reviews.index.facilities">Facilities</bridgehead>

  <para>
    Swarm provides the following code review facilities. In the list, the term
    <emphasis>author</emphasis> refers to the person who creates a change to
    be reviewed, <emphasis>reviewer</emphasis> refers to any authenticated
    Swarm user performing code review tasks, and <emphasis>required
    reviewer</emphasis> refers to a reviewer whose up-vote is required before a
    review can be approved.
  </para>

  <itemizedlist>
    <listitem>
      <para>
        Authors can request reviews, and can designate reviewers and required
        reviewers.
      </para>
    </listitem>

    <listitem>
      <para>
        Reviewers can start a code review on existing changes.
      </para>
    </listitem>

    <listitem>
      <para>
        Reviewers can add themselves a review to indicate that they are
        participating in the review and sharing responsibility for the review.
      </para>
    </listitem>

    <listitem>
      <para>
        Reviewers can provide comments to overall changes or specific lines of
        files.
      </para>
    </listitem>

    <listitem>
      <para>
        Reviewers can vote on a review, to indicate their approval or
        disapproval.
      </para>
    </listitem>

    <listitem>
      <para>
        Required reviewers can prevent a review from becoming approved until
        they up-vote the review.
      </para>
    </listitem>

    <listitem>
      <para>
        Projects with assigned moderators limit review approval to one of the
        moderators.
      </para>
    </listitem>

    <listitem>
      <para>
        Reviewers can mark changes as needing revision, approved, rejected, or
        to be archived for future consideration.
      </para>
    </listitem>

    <listitem>
      <para>
        Reviewers can commit approved changes if necessary.
      </para>
    </listitem>
  </itemizedlist>

  <bridgehead xml:id="code_reviews.index.advisory">Advisory nature</bridgehead>

  <para>
    Currently, Swarm's default code review workflow would best be described as
    <emphasis>advisory</emphasis>. Swarm provides only a few mechanisms to
    structure or restrict code review workflows, such as:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        A required reviewer, which is any user designated by a review author, project
        member or moderator, or is any authenticated user that joins a review
        and makes their vote required, can prevent reviews from being approved
        until they up-vote the review. See
        <xref linkend="code_reviews.responsibility.required"/> for details.
      </para>
    </listitem>

    <listitem>
      <para>
        Branch moderators, when configured for one or more branches in a
        project, prevent reviews from being approved (or rejected) without their
        involvement. See <xref linkend="projects.add"/> for details.
      </para>
    </listitem>

    <listitem>
      <para>
        Administrators can optionally enable triggers in the Helix Versioning
        Engine that can <emphasis>enforce</emphasis> that submitted changes are
        associated with approved reviews, and can enable
        <emphasis>strict</emphasis> matching of the contents of a changelist to
        the contents of an associated, approved code review. See
        <xref linkend="setup.perforce"/> and <xref linkend="admin.trigger"/> for
        details.
      </para>
    </listitem>
  </itemizedlist>

  <para>
    Agile development teams should find sufficient capability within Swarm to
    make code reviews a regular part of their workflow. Swarm's development team
    has been using it regularly during development of Swarm. If you have ideas
    and suggestions for improvement, please <link linkend="contact">contact
    us</link>.
  </para>

  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="code_reviews.model" xml:base="code_reviews/model.xml">
  <title>Models</title>

  <para>
    There are three code review models: pre-commit, post-commit, and the Git
    Fusion model. Which model you use for code reviews with Swarm is up to you.
  </para>

  <section xml:id="code_reviews.model.precommit">
    <title>Pre-commit model</title>

    <para>
      The pre-commit model is possible due to the Helix Versioning Engine's
      <emphasis>shelving</emphasis> feature. Shelving enables you to temporarily
      make copies of your files available to other users without committing the
      changes into the depot. Shelving can be a very handy way for developers to
      create a backup, or to handle local workspace changes that might otherwise
      lose work in progress, without having to commit code that might
      destabilize a codebase.
    </para>

    <para>
      Swarm uses the shelving feature in the Helix Versioning Engine to manage
      code reviews. Shelving allows reviewers to easily acquire a copy of the
      code to be reviewed, and allows updates to the reviewed code prior to
      submission.
    </para>

    <tip>
      <para>
        For more information on shelving, see:
        <link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4guide/04_files.html#1072439">P4
        User's Guide: Shelving work in progress</link>.
      </para>
    </tip>
  </section>

  <section xml:id="code_reviews.model.postcommit">
    <title>Post-commit model</title>

    <para>
      The post-commit model can be used if your team's development processes
      preclude the use of shelving. Code must be committed to the Helix
      Versioning Engine before code review can begin, which reduces the
      opportunity to fix problems before, for example, a continuous integration
      system notices problems. However, code reviews can be started for any
      existing code regardless of how long it has been committed.
    </para>
  </section>

  <section xml:id="code_reviews.model.git_fusion">
    <title>Git Fusion model</title>

    <para>
      Perforce Git Fusion provides repo management for Git repositories, and
      provides workflows that enable Git and Perforce users to collaborate on
      the same projects using their preferred tools.
    </para>

    <para>
      The Git Fusion model is similar to the pre-commit model; changes in your
      local repo can be pushed for review to a named Perforce branch in the
      Git fusion repo configuration, making your proposed changes available so
      that others can review and comment on them prior to committing them to
      the target branch. Git Fusion and Swarm work together to create a review
      branch and container for the pre-commit collaboration. 
    </para>

    <para>
      The Git Fusion model has several limitations that you should be aware of:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          The target branch for Git Fusion-created reviews must be a fully
          populated branch, and must be listed in the repo-specific Git Fusion
          configuration.
        </para>

        <para>
          See
          <link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/git-fusion/chapter_dyn_ngj_3l.html">"Setting
          up Repos"</link> in the
          <link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/git-fusion/">Git
          Fusion Guide</link> for details on
          <link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/git-fusion/chapter_dyn_ngj_3l.html#section_kkz_gqv_rl">converting
          a lightweight branch into a fully populated Perforce branch</link>.
        </para>
      </listitem>

      <listitem>
        <para>
          Reviews created with Git Fusion can only be updated from Git Fusion.
        </para>
      </listitem>

      <listitem>
        <para>
          You cannot clean up history and then push your changes to the same
          review. If you perform a Git rebase, you should push your changes as a
          new review.
        </para>
      </listitem>

      <listitem>
        <para>
          A Git Fusion review does not currently display the individual task
          branch commits that make up the review. Only the merged commit diffs
          are shown.
        </para>
      </listitem>
    </itemizedlist>

    <tip>
      <para>
        For more information on Git Fusion, see the
        <link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/git-fusion/">Git Fusion Guide</link>
      </para>
    </tip>
  </section>

  <section xml:id="code_reviews.model.internal">
    <title>Internal representation</title>


    <section xml:id="code_reviews.model.internal.changelists">
      <title>Swarm-managed changelists</title>

      <para>
        A code review consists of one or more shelved changelists that Swarm
        manages. A shelved changelist is a pending changelist that has a
        snapshot of its files on a <emphasis>shelf</emphasis> associated with
        the changelist.
      </para>

      <para>
        When a review is started, Swarm creates a new changelist that becomes
        the review changelist. What happens afterwards varies:
      </para>

      <itemizedlist>
        <listitem>
          <para>
            If the review contains uncommitted work (the pre-commit model),
            Swarm copies the shelved files from the user's changelist that
            initiated the review into the review's changelist.
          </para>
        </listitem>

        <listitem>
          <para>
            Any time that a user's changelist associated with the review has its
            shelved files updated, Swarm copies the shelved files into its
            review changelist and creates an <emphasis>archive</emphasis>
            changelist. An archive changelist is no different from any other
            pending changelist with shelved files, but it allows Swarm to
            provide versioning and diffs within a review.
          </para>
        </listitem>

        <listitem>
          <para>
            If the head version of a review is committed (the post-commit
            model), the review's changelist is emptied of files.
          </para>
        </listitem>
      </itemizedlist>

      <para>
        The review's changelist is never actually committed; this allows the
        review to be <emphasis>opened</emphasis> later with additional shelved
        changes.
      </para>

      <important>
        <para>
          <emphasis role="bold">Swarm's managed review changelists should only
          be deleted if you are uninstalling Swarm.</emphasis>
        </para>
        
        <para>
          Swarm's review changelists maintain the history of a review and all of
          its feedback. The deletion of a Swarm shelved changelist causes
          instability and potentially data loss, and represents a scenario that
          can be very challenging to recover from, even with the engagement of
          Perforce consultants.
        </para>

        <para>
          You can display a list of all of the Swarm-managed changelists using
          the <command>p4 changelists</command> command:
        </para>

<programlisting language="bash">
$ <command>p4 changelists -u <replaceable>swarm</replaceable></command>
Change 1212285 on 2015/07/31 by swarm@swarm-96017af4-5615-9819-7af1-6fc1fa537214 *pending* 'Add requirements and instructions'
Change 1212284 on 2015/07/31 by swarm@swarm-96017af4-5615-9819-7af1-6fc1fa537214 *pending* 'Add requirements and instructions'
...
</programlisting>

        <para>
          <replaceable>swarm</replaceable> is the userid with
          <emphasis>admin</emphasis>-level privileges within the Helix Versioning
          Engine that Swarm is <link linkend="setup.swarm">configured to
          use</link>. Use the appropriate userid when you run the <command>p4
          changelists</command> command.
        </para>
      </important>
    </section>

    <section xml:id="code_reviews.model.internal.workspaces">
      <title>Swarm-managed workspaces</title>

      <para>
        Whenever Swarm creates a changelist for a review, it uses a client
        workspace (or just workspace) associated with the configured Helix userid
        that has <emphasis>admin</emphasis> privileges. Whenever a user commits a
        change via Swarm's user interface, Swarm uses a workspace associated with
        that user.
      </para>

      <tip>
        <para>
          To learn more about workspaces, see the section
          <link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/intro/index.html#basic_concepts.helix">Helix
          as a version control implementation</link> in the
          <link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/intro/index.html"><citetitle>Introducing
          Helix</citetitle></link> guide.
        </para>
      </tip>

      <para>
        The workspaces that Swarm creates and uses live in the
        <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/clients</filename> folder.
      </para>
      
      <para>
        Inside the clients folder, Swarm maintains a user-specific folder that
        contains any workspace folders that may be required. Each user-specific
        folder is named by converting their Helix userid into hexadecimal to avoid
        any characters that would be problematic in the filesystem, such as
        slashes, accents, UTF-8 characters, etc. For example, the folder for the
        user <literal>eedwards</literal> would be named
        <literal>6565647761726473</literal>.
      </para>

      <para>
        Within the user-specific folder are the folders that become the
        <emphasis>root</emphasis> of each workspace. Each of these folders is
        named with a globally-unique identifier (GUID) prefixed with
        <filename>swarm-</filename>, for example
        <filename>swarm-438d482b-f107-9a35-c06c-86ac68136b00</filename>.
        Accompanying each folder is a lock file with the same name plus the
        <filename>.lock</filename> extension. Finally, the user-specific clients
        folder contains a management lock file called
        <filename>manage.lock</filename>.
      </para>

      <para>
        Here is an example of the folder structure:
      </para>

<programlisting>
<link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/
  data/
    clients/
      6565647761726473/
        manage.lock
        swarm-438d482b-f107-9a35-c06c-86ac68136b00/
        swarm-438d482b-f107-9a35-c06c-86ac68136b00.lock
        swarm-8388362a-233d-0cb9-3e90-895eaaa99f6c/
        swarm-8388362a-233d-0cb9-3e90-895eaaa99f6c.lock
      736c6f7264/
        manage.lock
        swarm-da7de4b4-0ecb-12c8-1b35-f3e32bb18033/
        swarm-da7de4b4-0ecb-12c8-1b35-f3e32bb18033.lock
</programlisting>

      <para>
        Here are the steps Swarm takes when it needs to use a client:
      </para>

      <orderedlist>
        <listitem>
          <para>
            Convert the current connection's userid to hexadecimal.
          </para>
        </listitem>

        <listitem>
          <para>
            Check to see whether a user-specific folder exists within
            <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/clients</filename>; if not, create the
            folder.
          </para>
        </listitem>

        <listitem xml:id="cwmir-step3">
          <para>
            Within the user-specific folder, loop over any existing workspace
            folders and attempt to lock each in turn:
          </para>

          <itemizedlist>
            <listitem>
              <para>
                If a lock is acquired skip to the next step.
              </para>
            </listitem>

            <listitem>
              <para>
                Otherwise, perform the
                <link linkend="code_reviews.model.internal.workspaces.create">create
                workspace</link> procedure.
              </para>
            </listitem>
          </itemizedlist>

          <bridgehead xml:id="code_reviews.model.internal.workspaces.create">
            Create workspace procedure
          </bridgehead>

          <orderedlist>
            <listitem>
              <para>
                Check if the max number of clients for the current user has
                been reached:
              </para>

              <itemizedlist>
                <listitem>
                  <para>
                    If so, wait a short amount of time (50 milliseconds),
                    and start <link linkend="cwmir-step3">step 3</link>
                    again. 
                  </para>
                </listitem>

                <listitem>
                  <para>
                    If not, proceed to the next step.
                  </para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>
                Take a lock on <filename>manage.lock</filename>.
              </para>
            </listitem>

            <listitem>
              <para>
                Check if the max number of clients for the current user has
                been reached:
              </para>

              <itemizedlist>
                <listitem>
                  <para>
                    If so, release the <filename>manage.lock</filename>,
                    wait a short amount of time (50 milliseconds), and start
                    <link linkend="cwmir-step3">step 3</link> again.
                  </para>
                </listitem>

                <listitem>
                  <para>
                    If not, proceed to the next step.
                  </para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>
                Create a new workspace folder using a GUID-based filename,
                and take a lock on the folder.
              </para>
            </listitem>

            <listitem>
              <para>
                Release the <filename>manage.lock</filename> lock.
              </para>
            </listitem>
          </orderedlist>
        </listitem>

        <listitem>
          <para>
            Perform the necessary file operations using the locked workspace
            folder.
          </para>
        </listitem>

        <listitem>
          <para>
            Revert the file content within the workspace folder to avoid having
            constantly growing disk space use. 
          </para>

          <note>
            <para>
              There may occasionally be stray files left; Swarm is not aggressive
              about cleaning up.
            </para>
          </note>
        </listitem>

        <listitem>
          <para>
            Swarm releases the lock on the workspace folder.
          </para>
        </listitem>
      </orderedlist>

      <para>
        Most users should only require 1-2 workspaces, and those are only
        required if they commit from Swarm. The <emphasis>admin</emphasis> user
        that Swarm is configured to use should only use one workspace per
        configured worker.
      </para>

      <para>
        By default, the number of workspaces that could be active at any given
        instant is two times the number of configured workers. Since the default
        worker count is three, Swarm would use at most six workspaces
        simultaneously.
      </para>
      
      <para>
        If the workspace limit is reached, further file processing is blocked
        until a workspace becomes available. Potentially, this means that users
        could encounter timeouts. Configuring Swarm to use more workers could
        solve that issue.
      </para>

      <section xml:id="code_reviews.model.internal.workspaces.removal">
        <title>Removal considerations</title>

        <para>
          Administrators might wish to remove Swarm-managed workspaces. There
          are a few considerations that should be assessed prior to removal:
        </para>

        <itemizedlist>
          <listitem>
            <para>
              Ideally, you should stop the web server (taking Swarm out of
              service) before removing a Swarm-managed workspace from the Swarm
              server; this eliminates the risk of removing a workspace that is
              in use.
            </para>

            <para>
              If you do not stop the web server first, Swarm may encounter an
              error during a submit.
            </para>
          </listitem>

          <listitem>
            <para>
              Removal of a Swarm-managed workspace folder does not remove the
              client spec from the Helix Versioning Engine. Unless the client
              spec is removed, that workspace effectively becomes orphaned.
              Orphaned clients are, of themselves, not a big concern as the
              storage and performance impact is negligible.
            </para>
          </listitem>

          <listitem>
            <para>
              Removal of a Swarm-managed workspace's corresponding client spec
              in the Helix Versioning Engine can be done. However,
              <emphasis role="bold">you should never remove a client spec that
              has associated shelved files</emphasis>.
            </para>

            <para>
              Usually, the only client specs that should have associated shelved
              files belong to the <emphasis>admin</emphasis> account that Swarm
              is configured to use. All other workspaces that may exist for
              other users are primarily used for submitting changes, and so
              should not have shelved files associated.
            </para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="code_reviews.queues" xml:base="code_reviews/code_review_queues.xml">
  <title>Review queues</title>

  <para>
    Code review queues help you keep track of code reviews that:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        Have been requested and are awaiting review
      </para>
    </listitem>

    <listitem>
      <para>
        Are underway
      </para>
    </listitem>

    <listitem>
      <para>
        Have been accepted, rejected, or archived
      </para>
    </listitem>
  </itemizedlist>

  <para>
    <inlinemediaobject>
      <imageobject condition="thumb">
        <imagedata fileref="../../assets/html/images/thumb-reviews_link.png"/>
      </imageobject>

      <textobject>
        <phrase>The main toolbar's Reviews link</phrase>
      </textobject>
    </inlinemediaobject>

    To see all available reviews, click the
    <guibutton>Reviews</guibutton> link in the main toolbar.
  </para>

  <para>
    The Reviews page lists open reviews for all projects in the Helix Versioning
    Engine.
  </para>

  <para>
    <inlinemediaobject>
      <imageobject>
        <imagedata fileref="../../assets/html/images/page-reviews.png"/>
      </imageobject>

      <textobject>
        <phrase>The Reviews page</phrase>
      </textobject>
    </inlinemediaobject>
  </para>

  <para>
    Opened reviews, those that have just begun, are being reviewed, or are
    awaiting further changes, are displayed on the <guibutton>Opened</guibutton>
    tab. Closed reviews, those that have been completed successfully, have been
    rejected, or have been archived (where it might be unclear of their
    benefit), are displayed on the <guibutton>Closed</guibutton> tab.
  </para>

  <para>
    Each review queue entry displays the following information:
  </para>

  <para>
    <inlinemediaobject>
      <imageobject>
        <imagedata fileref="../../assets/html/images/thumb-reviews_columns.png"/>
      </imageobject>

      <textobject>
        <phrase>Review details in a review queue</phrase>
      </textobject>
    </inlinemediaobject>
  </para>

  <itemizedlist>
    <listitem>
      <para>
        The review id
      </para>
    </listitem>

    <listitem>
      <para>
        The avatar of the review's author
      </para>
    </listitem>

    <listitem>
      <para>
        The review's description
      </para>
    </listitem>

    <listitem>
      <para>
        The associated project's name and branch
      </para>
    </listitem>

    <listitem>
      <para>
        When the review was created
      </para>
    </listitem>

    <listitem>
      <para>
        An icon indicating the current review state
      </para>
    </listitem>

    <listitem>
      <para>
        An icon indicating the test suite state
      </para>
    </listitem>

    <listitem>
      <para>
        A
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/thumb-review-comment_count-tooltip.png"/>
          </imageobject>

          <textobject>
            <phrase>Drop-down menu for flagging a comment as a task.</phrase>
          </textobject>
        </inlinemediaobject>

        counter for the number of open (non-archived) comments that are
        associated with the review. Hover your mouse over the comment count
        to display a tooltip showing the number of archived comments associated
        with the review.
      </para>
    </listitem>

    <listitem>
      <para>
        An indicator showing the number of up votes and down votes
      </para>
    </listitem>
  </itemizedlist>

  <note>
    <para>
      Hover your mouse over any of the icons to see tooltips.
    </para>
  </note>

  <para>
    <xref linkend="basics.projects"/> and <xref linkend="basics.groups"/> have
    their own review queues that display reviews created by their members.
  </para>

  <section xml:id="code_reviews.filtering">
    <title>Filtering open reviews</title>

    <para>
      The <guibutton>Opened</guibutton> tab presents a list of all code reviews
      that have started, are being reviewed, are awaiting revisions, or need to
      be committed. The following filtering options are available for opened
      code reviews:
    </para>

    <itemizedlist>
      <listitem>
        <para condition="popup">
          <inlinemediaobject>
            <imageobject condition="popup">
              <imagedata fileref="../../assets/html/images/dropdown-reviews-projects.png"/>
            </imageobject>

            <textobject>
              <phrase>The Project's drop-down menu</phrase>
            </textobject>
          </inlinemediaobject>

          <guibutton>Project</guibutton>: click the <guibutton>All</guibutton>
          button and select a project from the drop-down menu.
        </para>

        <para>
          When you are viewing a project-specific review queue, Swarm displays
          the project's list of branches in the drop-down menu, with the
          <emphasis>main</emphasis> branch appearing first and other branches
          afterwards. A main branch is typically identified by its name, such as
          <emphasis>main</emphasis>, <emphasis>mainline</emphasis>,
          <emphasis>master</emphasis>, <emphasis>trunk</emphasis>. The list of
          names can be configured; see <xref linkend="admin.mainline"/> for
          details.
        </para>
      </listitem>

      <listitem>
        <para condition="clear">
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/dropdown-myreviews.png"/>
            </imageobject>

            <textobject>
              <phrase>
                The "My Reviews" dropdown, unexpanded, showing the currently
                active filter.
             </phrase>
            </textobject>
          </inlinemediaobject>

          <guibutton>My Reviews</guibutton>: a dropdown menu that lets you
          filter which reviews to display based on your involvement:
        </para>

        <itemizedlist>
          <listitem>
            <para condition="clear">
              <inlinemediaobject>
                <imageobject condition="popup">
                  <imagedata fileref="../../assets/html/images/dropdown-myreviews-all.png"/>
                </imageobject>

                <textobject>
                  <phrase>
                    The "My Reviews" dropdown, with "All Reviews" selected.
                 </phrase>
                </textobject>
              </inlinemediaobject><emphasis role="bold">All Reviews</emphasis>:
              all reviews within the current project are displayed.
            </para>
          </listitem>

          <listitem>
            <para>
              <emphasis role="bold">Reviews I've Authored</emphasis>: all
              reviews within the current project that you have authored are
              displayed.
            </para>
          </listitem>

          <listitem>
            <para>
              <emphasis role="bold">Reviews I'm Participating In</emphasis>: All
              reviews within the current project that you have authored, or are a
              reviewer, are displayed.
            </para>
          </listitem>
        </itemizedlist>

        <para>
          When you select one of the available options, the list of options
          updates to match the currently selected filter, and the <guibutton>My
          Reviews</guibutton> dropdown indicates the current filter:
          <guilabel>All</guilabel>, <guilabel>Author</guilabel>, or
          <guilabel>Participant</guilabel>.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/buttons-has_hasno_reviewers.png"/>
            </imageobject>

            <textobject>
              <phrase>Review filter buttons for has reviewers/no reviewers</phrase>
            </textobject>
          </inlinemediaobject>

          <guibutton>Has Reviewers</guibutton> or <guibutton>No
          Reviewers</guibutton>: displays reviews that have one or more
          reviewers, or reviews that have no reviewers.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/buttons-needs-review_revision-approved.png"/>
            </imageobject>

            <textobject>
              <phrase>Review filter buttons for assigned/unassigned</phrase>
            </textobject>
          </inlinemediaobject>

          Review state: one of the following (left to right):
        </para>

        <itemizedlist>
          <listitem>
            <para>
              <literal>Needs review</literal>: the review's changes need to be
              reviewed.
            </para>
          </listitem>

          <listitem>
            <para>
              <literal>Needs revision</literal>: the review's changes have been
              reviews, but further revisions are required before the review can
              be accepted.
            </para>
          </listitem>

          <listitem>
            <para>
              <literal>Approved</literal>: the review's changes have been
              approved, and should be committed.
            </para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/buttons-tests-pass_fail.png"/>
            </imageobject>

            <textobject>
              <phrase>Review filter buttons for tests pass/fail</phrase>
            </textobject>
          </inlinemediaobject>

          Test status: one of the following:
        </para>

        <itemizedlist>
          <listitem>
            <para>
              <literal>Tests pass</literal>: when automated tests are enabled
              for the associated project, and the test suite execution succeeds,
              Swarm updates the review accordingly.
            </para>
          </listitem>

          <listitem>
            <para>
              <literal>Tests fail</literal>: similar to the <literal>Tests
              pass</literal> state, except that the test suite execution has
              failed. Check with your test suite to determine why the tests
              failed.
            </para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/buttons-search.png"/>
            </imageobject>

            <textobject>
              <phrase>Review search field</phrase>
            </textobject>
          </inlinemediaobject>

          <literal>Search term</literal>: where review descriptions match your
          search string.
        </para>
      </listitem>
    </itemizedlist>

    <para>
      Swarm updates the URL in your browser to reflect filtering options. This
      makes it easy to bookmark or share review queue URLs, and it maintains the
      current filtering if you click on a review and then use your browser's
      back button to return to the review queue.
    </para>
  </section>

  <section xml:id="code_reviews.queues.filtering_closed">
    <title>Filtering closed reviews</title>

    <para>
      The <guibutton>Closed</guibutton> tab presents a list of all code reviews
      that have been approved and committed, rejected, or archived.
      The following filtering options are available for closed code reviews:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="popup">
              <imagedata fileref="../../assets/html/images/dropdown-reviews-projects.png"/>
            </imageobject>

            <textobject>
              <phrase>The Project's drop-down menu</phrase>
            </textobject>
          </inlinemediaobject>

          <literal>Project</literal>: click the <guibutton>All</guibutton>
          button and select a project from the drop-down menu.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/buttons-approved-rejected-archived.png"/>
            </imageobject>

            <textobject>
              <phrase>Review filter buttons for approved/rejected/archived</phrase>
            </textobject>
          </inlinemediaobject>

          Review state: one of the following (left to right):
        </para>

        <itemizedlist>
          <listitem>
            <para>
              <literal>Approved</literal>: the review's changes have been
              approved, and should be committed.
            </para>
          </listitem>

          <listitem>
            <para>
              <literal>Rejected</literal>: the review's changes have been
              rejected.
            </para>
          </listitem>

          <listitem>
            <para>
              <literal>Archived</literal>: the review's changes have been put
              aside.
            </para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/buttons-tests-pass_fail.png"/>
            </imageobject>

            <textobject>
              <phrase>Review filter buttons for tests pass/fail</phrase>
            </textobject>
          </inlinemediaobject>
        </para>

        <para>
          Test status: one of the following:
        </para>

        <itemizedlist>
          <listitem>
            <para>
              <literal>Tests pass</literal>: when automated tests are enabled
              for the associated project, only reviews where the tests have
              passed are displayed.
            </para>
          </listitem>

          <listitem>
            <para>
              <literal>Tests fail</literal>: similar to the <literal>Tests
              pass</literal> state, except that only reviews where the tests
              have failed are displayed.
            </para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/buttons-search.png"/>
            </imageobject>

            <textobject>
              <phrase>Review search field</phrase>
            </textobject>
          </inlinemediaobject>

          <literal>Search term</literal>: where review descriptions match your
          search string.
        </para>
      </listitem>
    </itemizedlist>

    <para>
      Swarm updates the URL in your browser to reflect filtering options. This
      makes it easy to bookmark or share review queue URLs, and it maintains the
      current filtering if you click on a review and then use your browser's
      back button to return to the review queue.
    </para>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="code_reviews.display" xml:base="code_reviews/review_display.xml">
  <title>Review display</title>

  <para>
    During a code review, reviewers spend most of their time using the review
    interface:
  </para>

  <para>
    <inlinemediaobject>
      <imageobject condition="frame">
        <imagedata fileref="../../assets/html/images/page-review.png"/>
      </imageobject>

      <textobject>
        <phrase>The Review interface</phrase>
      </textobject>
    </inlinemediaobject>
  </para>

  <para>
    The review interface is very similar to the
    <link linkend="basics.changelists">changelist interface</link>; and provides
    largely the same functionality, but has several notable differences:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/thumb-gf_review.png"/>
          </imageobject>

          <textobject>
            <phrase>A Review heading with Git logo</phrase>
          </textobject>
        </inlinemediaobject>

        Git Fusion-initiated reviews include the Git logo beside the main review
        identifier. This indicator is important because Perforce users cannot
        update Git Fusion-initiated reviews.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/panel-task_counts.png"/>
          </imageobject>

          <textobject>
            <phrase>Task counts/status summary.</phrase>
          </textobject>
        </inlinemediaobject>

        A <emphasis>Tasks</emphasis> area appears below the review's
        description. This area summarizes the number of comments that have been
        flagged as tasks, with separate counts for open, addressed, and verified
        tasks. See <xref linkend="basics.comments.tasks"/> for more details.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/thumb-reviewers.png"/>
          </imageobject>

          <textobject>
            <phrase>The Reviewers area</phrase>
          </textobject>
        </inlinemediaobject>

        A <emphasis>Reviewers</emphasis> area appears below the review's
        description whenever a review has one or more reviewers, or you are
        logged in.
      </para>

      <para>
        This area includes, from left to right, the
        <link linkend="code_reviews.activities.edit_reviewers">edit reviewers
        button</link>
        
        <inlinemediaobject>
          <imageobject>
            <imagedata fileref="../../assets/html/images/icon-edit_description.png"/>
          </imageobject>

          <textobject>
            <phrase>The edit reviewers button</phrase>
          </textobject>
        </inlinemediaobject>, the current up and down vote counts, and the
        avatars of current reviewers.
        <link linkend="code_reviews.responsibility.required">Required
        reviewers</link> have a star badge over their avatar. Whenever a
        reviewer has voted on a review, their icon displays a badge indicating
        whether they voted up or down. If you are logged in and viewing a review
        you did not author, your avatar appears to the right of any other
        reviewers and its appearance varies according to the following
        conditions:
      </para>

      <informaltable>
        <tgroup cols="2">
          <colspec colwidth="25*"/>
          <colspec colwidth="25*"/>
          <tbody>
            <row>
              <entry>
                <para>
                  <emphasis role="bold">When you are not yet a
                  reviewer</emphasis>, your avatar appears muted. Clicking
                  your avatar presents a menu allowing you to vote up or down
                  and thereby become a reviewer, or simply join a review as a
                  reviewer.
                </para>

                <para>
                  <inlinemediaobject>
                    <imageobject>
                      <imagedata fileref="../../assets/html/images/dropdown-reviewer-not_reviewing.png"/>
                    </imageobject>

                    <textobject>
                      <phrase>Menu options when you are not yet a reviewer</phrase>
                    </textobject>
                  </inlinemediaobject>
                </para>
              </entry>

              <entry>
                <para>
                  <emphasis role="bold">When you are a reviewer</emphasis>,
                  your avatar does not appear muted. If you have not yet
                  voted, no badge appears on your avatar and clicking your
                  avatar presents a menu allowing you to vote up or down, change
                  whether your vote required or not, or leave the review.
                </para>

                <para>
                  <inlinemediaobject>
                    <imageobject>
                      <imagedata fileref="../../assets/html/images/dropdown-reviewer-reviewing.png"/>
                    </imageobject>

                    <textobject>
                      <phrase>Menu options when you are a reviewer</phrase>
                    </textobject>
                  </inlinemediaobject>
                </para>
              </entry>
            </row>

            <row>
              <entry>
                <para>
                  <emphasis role="bold">When you are a reviewer and have
                  already voted</emphasis>, your avatar displays a badge
                  indicating your vote. Clicking your avatar presents a menu
                  allowing you to clear or change your vote, change whether your
                  vote is required or not, or leave the review.
                </para>

                <para>
                  <inlinemediaobject>
                    <imageobject>
                      <imagedata fileref="../../assets/html/images/dropdown-reviewer-voted.png"/>
                    </imageobject>

                    <textobject>
                      <phrase>Menu options after you have voted</phrase>
                    </textobject>
                  </inlinemediaobject>
                </para>
              </entry>

              <entry>
                <para>
                  <emphasis role="bold">When you are a
                  <link linkend="code_reviews.responsibility.required">required
                  reviewer</link></emphasis>, your avatar displays a star badge
                  indicating that the review cannot be approved until you vote
                  up. Clicking your avatar presents a menu allowing you to
                  change your vote, make your vote optional, or leave the
                  review.
                </para>

                <para>
                  <inlinemediaobject>
                    <imageobject>
                      <imagedata fileref="../../assets/html/images/dropdown-reviewer-required.png"/>
                    </imageobject>

                    <textobject>
                      <phrase>Menu options after you have voted</phrase>
                    </textobject>
                  </inlinemediaobject>
                </para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/thumb-reviewers-stale_vote.png"/>
          </imageobject>

          <textobject>
            <phrase>A stale vote.</phrase>
          </textobject>
        </inlinemediaobject>

        When a review is updated, if the review's list of files, file content,
        or file-types changes, any votes cast on the review become
        <emphasis>stale</emphasis>. The vote counts are reset, and the vote
        indicators become muted.
      </para>

      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/thumb-reviewers-stale_vote-tooltip.png"/>
          </imageobject>

          <textobject>
            <phrase>A tooltip for a stale vote.</phrase>
          </textobject>
        </inlinemediaobject>

        If you hover your mouse over a reviewer with a stale vote, a tooltip
        appears displaying the userid, how they voted, and on which version of
        the review; each version is represented as a point on the Review
        Timeline (see below).
      </para>

      <note>
        <para>
          Stale vote handling is not supported for Git-created reviews.
        </para>
      </note>
    </listitem>

    <listitem>
      <para>
        A slider control, called the Review Timeline, appears just above the
        list of files. If the review's files have been updated at least once,
        this slider allows you to browse and compare arbitrary versions of the
        review's files.
      </para>

      <para>
        <inlinemediaobject>
          <imageobject>
            <imagedata fileref="../../assets/html/images/slider-review_timeline.png"/>
          </imageobject>

          <textobject>
            <phrase>The Review Timeline slider</phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/tooltip-review_timeline.png"/>
          </imageobject>

          <textobject>
            <phrase>A Review Timeline tooltip</phrase>
          </textobject>
        </inlinemediaobject>
        
        Each point on the slider represents a version of the review's files,
        with the oldest version on the left and newer versions on the right.
        Hover your mouse over each point to see a tooltip displaying the version
        number, who created it and when, plus the changelist containing a copy
        of that version's files.
      </para>

      <para>
        The button to the left of the slider toggles <emphasis>diff</emphasis>
        mode for arbitrary versions of the review's files. In diff mode, the
        slider shows a bar indicating which two versions are being compared, and
        the endpoints of the slider can be dragged to any of the available
        points to compare any earlier version of the review with any later
        version.
      </para>

      <para>
        <inlinemediaobject>
          <imageobject>
            <imagedata fileref="../../assets/html/images/slider-review_timeline-diff.png"/>
          </imageobject>

          <textobject>
            <phrase>The Review Timeline slider in diff mode</phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <para>
        Hovering your mouse over the bar shows a tooltip displaying the versions
        being compared, and the changelists that contain the files.
      </para>

      <para>
        <inlinemediaobject>
          <imageobject>
            <imagedata fileref="../../assets/html/images/tooltip-review_timeline-diff.png"/>
          </imageobject>

          <textobject>
            <phrase>A Review Timeline diff tooltip</phrase>
          </textobject>
        </inlinemediaobject>
      </para>
        
      <para>
        It is good to remember that a review consists of one or more
        Swarm-managed changelists. When comparing versions of a review, Swarm is
        showing any differences between the selected versions, not the review
        author's personal changelist. See
        <xref linkend="code_reviews.model.internal"/> for details.
      </para>
    </listitem>

    <listitem>
      <para>
        The file listing header displays:
      </para>

      <para>
        <inlinemediaobject>
          <imageobject>
            <imagedata fileref="../../assets/html/images/thumb-review_version_heading.png"/>
          </imageobject>

          <textobject>
            <phrase>The file listing heading for a code review</phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <itemizedlist>
        <listitem>
          <para>
            The current version of the files in the review.
          </para>
        </listitem>

        <listitem>
          <para>
            Which changelist contains a shelved copy of the review's files.
          </para>
        </listitem>

        <listitem>
          <para>
            The common path for all of the files in the review.
          </para>
        </listitem>
      </itemizedlist>

      <para>
        In diff mode, the file listing header displays:
      </para>

      <para>
        <inlinemediaobject>
          <imageobject>
            <imagedata fileref="../../assets/html/images/thumb-review_version_heading-diff.png"/>
          </imageobject>

          <textobject>
            <phrase>The file listing heading for a code review while in diff mode</phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <itemizedlist>
        <listitem>
          <para>
            Which two versions of the review's files are being compared.
          </para>
        </listitem>

        <listitem>
          <para>
            Which changelists contain the files being compared.
          </para>
        </listitem>

        <listitem>
          <para>
            The common path for all of the files in both versions of the review.
          </para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/tooltip-review_test_status.png"/>
          </imageobject>

          <textobject>
            <phrase>A tooltip showing the test status and timestamp</phrase>
          </textobject>
        </inlinemediaobject>

        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/button-review_tests-fail.png"/>
          </imageobject>

          <textobject>
            <phrase>The Review's tests-failed button</phrase>
          </textobject>
        </inlinemediaobject>

        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/button-review_tests-pass.png"/>
          </imageobject>

          <textobject>
            <phrase>The Review's tests-succeeded button</phrase>
          </textobject>
        </inlinemediaobject>

        When <link linkend="quickstart.integrate_test_suite">continuous
        integration</link> has been configured for a project, test success or
        failure is indicated in the review's heading. If your continuous
        integration tests can provide a URL that provides details of a test
        run, the indicator becomes linked; click the indicator to see the test
        details.
      </para>

      <para>
        When you hover your mouse over the test status indicator, Swarm
        indicates the test status and how long ago that status was achieved.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/button-review_deployment-failure.png"/>
          </imageobject>

          <textobject>
            <phrase>The Review's deployment-failed button</phrase>
          </textobject>
        </inlinemediaobject>

        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/button-review_deployment-success.png"/>
          </imageobject>

          <textobject>
            <phrase>The Review's deployment-success button</phrase>
          </textobject>
        </inlinemediaobject>

        When <link linkend="quickstart.review_deployment">automated
        deployment</link> has been configured for a project, the deployment
        success or failure is indicated in the review's heading. If your
        deployment program can provide a URL that provides details of the
        deployment, the indicator becomes linked; click the indicator to see the
        deployment results.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/button-needs_review.png"/>
          </imageobject>

          <textobject>
            <phrase>The Needs Review drop-down button</phrase>
          </textobject>
        </inlinemediaobject>

        The <guibutton>Request Review</guibutton> button is replaced with the
        review state drop-down button that indicates the review's current
        disposition. See <xref linkend="code_reviews.states"/> for more
        information.
      </para>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/icon-edit_description.png"/>
          </imageobject>

          <textobject>
            <phrase>The Edit Description icon</phrase>
          </textobject>
        </inlinemediaobject>

        An <guibutton>Edit Description</guibutton> icon appears in the review's
        description, which allows you to update the description to reflect any
        updates have been made during the review.
      </para>
    </listitem>

    <listitem>
      <para>
        The History tab presents a list of the events that affect this review,
        including:
      </para>

      <para>
        <inlinemediaobject>
          <imageobject condition="frame">
            <imagedata fileref="../../assets/html/images/panel-review-history.png"/>
          </imageobject>

          <textobject>
            <phrase>A Review's History</phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <itemizedlist>
        <listitem>
          <para>
            When the review was started
          </para>
        </listitem>

        <listitem>
          <para>
            When a new reviewer joins the review
          </para>
        </listitem>

        <listitem>
          <para>
            When the review's state changes
          </para>
        </listitem>

        <listitem>
          <para>
            When the review's files are updated
          </para>
        </listitem>

        <listitem>
          <para>
            When a reviewer votes on the review
          </para>
        </listitem>

        <listitem>
          <para>
            When someone comments on the review, or one of its files
          </para>
        </listitem>

        <listitem>
          <para>
            When tests pass or fail, provided continuous integration is
            configured
          </para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>
        <inlinemediaobject>
          <imageobject condition="thumb">
            <imagedata fileref="../../assets/html/images/button-mark_as_read.png"/>
          </imageobject>

          <textobject>
            <phrase>The "Mark as Read" button.</phrase>
          </textobject>
        </inlinemediaobject>

        Beside each file in a review is a <guibutton>Mark as Read</guibutton>
        button, which help you keep track of which files you have
        reviewed. The read flag is remembered independently for each user. If
        the content of a file is changed in an update to the review, the read
        flag automatically clears. This is particularly useful when a code
        review consists of many files.
      </para>

      <para>
        When clicked, the button's colors invert and the associated file is
        visually muted, to make it easy to distinguish read files from unread
        files:
      </para>

      <para>
        <inlinemediaobject>
          <imageobject>
            <imagedata fileref="../../assets/html/images/panel-diffs-marked_read.png"/>
          </imageobject>

          <textobject>
            <phrase>A file marked as read.</phrase>
          </textobject>
        </inlinemediaobject>
      </para>

      <para>
        If a file has been marked as read, click the button a second time to
        reset the status to unread.
      </para>
    </listitem>
  </itemizedlist>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="code_reviews.activities" xml:base="code_reviews/activities.xml">
  <title>Activities</title>

  <para>
    This section describes the major activities that affect code reviews,
    including starting a review, updating a review, and fetching a review's
    files.
  </para>

  <section xml:id="code_reviews.activities.start">
    <title>Start a review</title>

    <para>
      To start a code review, choose one of the following approaches:
    </para>

    <!-- vim: set ts=2 sw=2 tw=80 ai si: --><important version="5.0" xml:base="../common/important-start_review_on_edge.xml">
  <para>
    If your Helix Versioning Engine is configured as a commit-edge deployment,
    and your normal connection is to an edge server, Swarm refuses to start
    reviews for shelved changes that have not been promoted to the commit
    server.
  </para>

  <para>
    Within Swarm, this means that the <guilabel>Request Review</guilabel> button
    does not appear for unpromoted shelved changes. Outside of Swarm, attempts
    to start reviews for unpromoted shelved changelists appear to do nothing.
    Ask your Helix Versioning Engine administrator for assistance if you cannot
    start a review.
  </para>

  <para>
    An administrator of the Helix Versioning Engine can automatically promote
    shelved changes to the commit server by setting the configurable
    <literal>dm.shelve.promote</literal> to <literal>1</literal>.
  </para>
</important>

    <orderedlist numeration="loweralpha">
      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/button-request_review.png"/>
            </imageobject>

            <textobject>
              <phrase>The Request Review button</phrase>
            </textobject>
          </inlinemediaobject>

          When you use Swarm to view a submitted changelist, click the
          <guibutton>Request Review</guibutton> button to request a review of
          that changelist. This uses the
          <link linkend="code_reviews.model">post-commit</link> model.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/button-request_review.png"/>
            </imageobject>

            <textobject>
              <phrase>The Request Review button</phrase>
            </textobject>
          </inlinemediaobject>

          When you use Swarm to view a shelved changelist, click the
          <guibutton>Request Review</guibutton> button to request a review of
          that shelved changelist. This uses the
          <link linkend="code_reviews.model">pre-commit</link> model.
        </para>
      </listitem>

      <listitem>
        <para>
          When you are about to shelve or submit files:
        </para>

        <orderedlist>
          <listitem>
            <para>
              Include <literal>#review</literal> within your changelist
              (separated from other text with whitespace, or on a separate
              line).
            </para>

            <para>
              Once the review begins, Swarm replaces <literal>#review</literal>
              with <literal>#review-12345</literal>, where
              <literal>12345</literal> is the review's identifier.
            </para>

            <note>
              <para>
                The <literal>#review</literal> keyword is customizable.
                For details, see <xref linkend="admin.review_keyword"/>.
              </para>
            </note>
          </listitem>

          <listitem>
            <para>
              At this time, you can add reviewers to the code review by using an
              <link linkend="basics.notable.mentions">@mention</link> in the
              changelist description for each desired reviewer. Including an
              asterisk (<literal>*</literal>) before the userid in an @mention,
              for example <literal>@*userid</literal>, adds that user as a
              <emphasis>required</emphasis> reviewer.
            </para>
          </listitem>

          <listitem>
            <para>
              Complete your shelve or submit operation.
            </para>
          </listitem>
        </orderedlist>

        <warning>
          <para>
            If you shelve a changelist and subsequently edit the description to
            include <literal>#review</literal>, a review is
            <emphasis role="bold">not started</emphasis>. You must re-shelve the
            files after adding <literal>#review</literal>.
          </para>
        </warning>
      </listitem>

      <listitem>
        <para>
          When you are using <glossterm linkend="GF">Git Fusion</glossterm>, you
          can start a review by pushing your changes to a target branch using
          the following command:

<programlisting>
$ <command>git push origin <replaceable>task1</replaceable>:review/<replaceable>master</replaceable>/new</command>
</programlisting>

          <replaceable>task1</replaceable> is the name of the current Git task
          branch, and <replaceable>master</replaceable> is the target branch
          that the proposed changes are intended for.
        </para>

        <important>
          <para>
            The target branch must be mapped to a named Perforce branch in the Git
            Fusion repo configuration.
          </para>

          <para>
            See
            <link xlink:href="http://www.perforce.com/perforce/doc.current/manuals/git-fusion/chapter_dyn_ngj_3l.html">"Setting
            up Repos"</link> in the
            <link xlink:href="http://www.perforce.com/perforce/doc.current/manuals/git-fusion/">Git
            Fusion Guide</link> for details on
            <link xlink:href="http://www.perforce.com/perforce/doc.current/manuals/git-fusion/chapter_dyn_ngj_3l.html#section_kkz_gqv_rl">converting
            a lightweight branch into a fully populated Perforce branch</link>.
          </para>
        </important>

        <para>
          When the command completes, the output indicates the <emphasis>review
          id</emphasis> that has been created:

<programlisting>
remote: Perforce: Swarm review assigned: review/master/<replaceable>1234</replaceable>
</programlisting>

          where <replaceable>1234</replaceable> is the review id that was just
          created.
        </para>

        <tip>
          <para>
            For more information on Git Fusion, see the
            <link xlink:href="http://www.perforce.com/perforce/doc.current/manuals/git-fusion/">Git Fusion Guide</link>
          </para>
        </tip>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="code_reviews.activities.update">
    <title>Update a review</title>

    <para>
      To update a code review, use one of the following approaches:
    </para>

    <orderedlist numeration="loweralpha">
      <listitem>
        <para>
          For a <emphasis>pre-commit</emphasis> review that you authored:
        </para>

        <orderedlist>
          <listitem>
            <para>
              edit the files
            </para>
          </listitem>

          <listitem>
            <para>
              shelve the files
            </para>
          </listitem>
        </orderedlist>

        <para>
          You can repeat these steps as many times as necessary.
        </para>
      </listitem>

      <listitem>
        <para>
          For a <emphasis>post-commit</emphasis> review, or a review where you
          are not the author:
        </para>

        <orderedlist>
          <listitem>
            <para>
              <link linkend="code_reviews.activities.fetch">fetch the review's
              files</link> into a new changelist
            </para>
          </listitem>

          <listitem>
            <para>
              edit the files
            </para>
          </listitem>

          <listitem>
            <para>
              update the changelist's description to include
              <literal>#review-12345</literal> (separated from other text with
              whitespace, or on a separate line)
            </para>
          </listitem>

          <listitem>
            <para>
              shelve the changelist's files
            </para>
          </listitem>
        </orderedlist>

        <para>
          Once these steps are complete, further updates involve editing the
          files, and then shelving the changelist's files.
        </para>

        <warning>
          <para>
            If you use an invalid review identifier, it will appear that nothing
            happens. Swarm is currently unable to notify you of this situation.
          </para>
        </warning>
      </listitem>

      <listitem>
        <para>
          When you are working with <glossterm linkend="GF">Git Fusion</glossterm>:
        </para>

        <important>
          <para>
            You can only update Git Fusion-initiated reviews using Git Fusion.
          </para>
        </important>

        <para>
          In the following example, the current Git task branch is
          <replaceable>task1</replaceable>, the target branch is
          <replaceable>master</replaceable>, the review id is
          <replaceable>1234</replaceable>, the Git Fusion hostname is
          <replaceable>gfserver</replaceable>, and the remote repo name is
          <replaceable>p4gf_repo</replaceable>.
        </para>

        <procedure>
          <step>
            <para>
              Fetch the review's head version:
            </para>

<programlisting>
$ <command>git fetch --prune origin</command>
From <replaceable>gfserver</replaceable>:<replaceable>p4gf_repo</replaceable>
 * [new_branch]      review/<replaceable>master</replaceable>/<replaceable>1234</replaceable> -&gt; origin/review/<replaceable>master</replaceable>/<replaceable>1234</replaceable>
 x [deleted]         (none)     -&gt; origin/review/<replaceable>dev</replaceable>/new
</programlisting>

            <para>
              The <parameter>--prune</parameter> option lets the local Git repo
              delete the unwanted
              <literal>review/<replaceable>master</replaceable>/new</literal>
              reference created by the initial <command>git push origin
              <replaceable>task1</replaceable>:review/<replaceable>master</replaceable>/new</command>
              command.
            </para>
          </step>

          <step>
            <para>
              Check out the review's head version:
            </para>

<programlisting>
$ <command>git checkout review/<replaceable>master</replaceable>/<replaceable>1234</replaceable></command>
</programlisting>
          </step>

          <step>
            <para>
              Edit the files as required.
            </para>
          </step>

          <step>
            <para>
              Add the edited files to the index of files, in preparation for the
              next commit.
            </para>

            <para>
              There are several ways to do this. For example, to add all
              modified files to the index, run:
            </para>

<programlisting>
$ <command>git add -A</command>
</programlisting>
          </step>

          <step>
            <para>
              Commit the files in Git:
            </para>

<programlisting>
$ <command>git commit -m "made some changes"</command>
</programlisting>
          </step>

          <step>
            <para>
              Push the Git changes to the review:
            </para>

<programlisting>
$ <command>git push origin review/<replaceable>master</replaceable>/<replaceable>1234</replaceable></command>
</programlisting>

            <note>
              <para>
                If you get review feedback that is better expressed as a Git
                rebase and cleaned up history, you can make your changes and
                push them as a new review.
              </para>

              <para>
                You <emphasis role="bold">cannot</emphasis> clean up history and
                then push your changes to the <emphasis>same</emphasis> review.
              </para>
            </note>
          </step>
        </procedure>

        <tip>
          <para>
            For more information on Git Fusion, see the
            <link xlink:href="http://www.perforce.com/perforce/doc.current/manuals/git-fusion/">Git Fusion Guide</link>
          </para>
        </tip>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="code_reviews.activities.fetch">
    <title>Fetch a review's files</title>

    <para>
      First, determine the changelist containing the review's files:
    </para>

    <orderedlist>
      <listitem>
        <para>
          Visit the review's page.
        </para>
      </listitem>

      <listitem>
        <para>
          The current review version's changelist appears in the file list
          heading:
        </para>

        <para>
          <inlinemediaobject>
            <imageobject>
              <imagedata fileref="../../assets/html/images/thumb-pre_commit_change_number.png"/>
            </imageobject>

            <textobject>
              <phrase>A pre-commit review's changelist in the file list heading</phrase>
            </textobject>
          </inlinemediaobject>
        </para>

        <para>
          In this example, the changelist is <literal>697707</literal>.  You use
          the identified changelist in place of <emphasis>shelved
          changelist</emphasis> below.
        </para>
      </listitem>

      <listitem>
        <para>
          Decide whether you will use
          <link linkend="code_reviews.activities.fetch.via_p4">p4</link>,
          <link linkend="code_reviews.activities.fetch.via_p4v">P4V</link>, or
          <link linkend="code_reviews.activities.fetch.via_gf">Git Fusion</link>
          to fetch the files, and follow the instructions in the appropriate
          section below.
        </para>
      </listitem>
    </orderedlist>

    <section xml:id="code_reviews.activities.fetch.via_p4">
      <title>Using P4</title>

      <orderedlist numeration="loweralpha">
        <listitem>
          <para>
            For a <emphasis role="bold">shelved changelist</emphasis>, use a
            command-line shell and type:
          </para>

<programlisting>
$ <command>p4 unshelve -c <replaceable>shelved changelist</replaceable></command>
</programlisting>
        </listitem>

        <listitem>
          <para>
            For a <emphasis role="bold">committed changelist</emphasis>, use a
            command-line shell and type:
          </para>

<programlisting>
$ <command>p4 sync @<replaceable>committed changelist</replaceable></command>
</programlisting>
        </listitem>
      </orderedlist>

      <note>
        <para>
          Your client's view mappings need to include the changelist's path.
        </para>
      </note>
    </section>

    <section xml:id="code_reviews.activities.fetch.via_p4v">
      <title>Using P4V</title>

      <orderedlist numeration="loweralpha">
        <listitem>
          <para>
            For a <emphasis role="bold">shelved changelist</emphasis>:
          </para>

          <orderedlist>
            <listitem>
              <para>
                <inlinemediaobject>
                  <imageobject condition="popup">
                    <imagedata fileref="../../assets/html/images/p4v-search-goto.png"/>
                  </imageobject>

                  <textobject>
                    <phrase>P4V "go to" menu option</phrase>
                  </textobject>
                </inlinemediaobject>
                
                Select <guimenuitem>Search &gt; Go To...</guimenuitem>.
              </para>
            </listitem>

            <listitem>
              <para>
                <inlinemediaobject>
                  <imageobject condition="popup">
                    <imagedata fileref="../../assets/html/images/p4v-goto-pending_change.png"/>
                  </imageobject>

                  <textobject>
                    <phrase>P4V "go to" dialog with "Pending Changelist" selected</phrase>
                  </textobject>
                </inlinemediaobject>
                
                Change the select box to <guimenuitem>Pending
                Changelist</guimenuitem>.
              </para>
            </listitem>

            <listitem>
              <para>
                <inlinemediaobject>
                  <imageobject condition="popup">
                    <imagedata fileref="../../assets/html/images/p4v-goto-shelved_changelist.png"/>
                  </imageobject>

                  <textobject>
                    <phrase>P4V "go to" dialog with changelist entered</phrase>
                  </textobject>
                </inlinemediaobject>
                
                Type in the <emphasis>shelved changelist</emphasis> number and
                click <guibutton>OK</guibutton>.
              </para>
            </listitem>

            <listitem>
              <para>
                <inlinemediaobject>
                  <imageobject condition="popup">
                    <imagedata fileref="../../assets/html/images/p4v-dialog-pending_change-select.png"/>
                  </imageobject>

                  <textobject>
                    <phrase>P4V "Pending Changelist" dialog with shelved files selected</phrase>
                  </textobject>
                </inlinemediaobject>
                
                Select the files in the <guilabel>Shelved Files</guilabel>
                area.
              </para>
            </listitem>

            <listitem>
              <para>
                <inlinemediaobject>
                  <imageobject condition="popup">
                    <imagedata fileref="../../assets/html/images/p4v-dialog-pending_change-unshelve.png"/>
                  </imageobject>

                  <textobject>
                    <phrase>
                      P4V "Pending Changelist" dialog with content menu selecting "Unshelve..."
                    </phrase>
                  </textobject>
                </inlinemediaobject>
                
                Context-click, and select
                <guimenuitem>Unshelve...</guimenuitem>.
              </para>
            </listitem>

            <listitem>
              <para>
                <inlinemediaobject>
                  <imageobject condition="popup">
                    <imagedata fileref="../../assets/html/images/p4v-dialog-unshelve.png"/>
                  </imageobject>

                  <textobject>
                    <phrase>P4V "Unshelve" dialog</phrase>
                  </textobject>
                </inlinemediaobject>
                
                Click <guibutton>Unshelve</guibutton>.
              </para>
            </listitem>
          </orderedlist>
        </listitem>

        <listitem>
          <para>
            For a <emphasis role="bold">committed changelist</emphasis>:
          </para>

          <orderedlist>
            <listitem>
              <para>
                <inlinemediaobject>
                  <imageobject condition="popup">
                    <imagedata fileref="../../assets/html/images/p4v-search-goto.png"/>
                  </imageobject>

                  <textobject>
                    <phrase>P4V "go to" menu option</phrase>
                  </textobject>
                </inlinemediaobject>
                
                Select
                <guimenuitem>Search &gt; Go To...</guimenuitem>.
              </para>
            </listitem>

            <listitem>
              <para>
                <inlinemediaobject>
                  <imageobject condition="popup">
                    <imagedata fileref="../../assets/html/images/p4v-goto-submitted_change.png"/>
                  </imageobject>

                  <textobject>
                    <phrase>P4V "go to" dialog with "Submitted Changelist" selected</phrase>
                  </textobject>
                </inlinemediaobject>
                
                Change the select box to <guimenuitem>Submitted
                Changelist</guimenuitem>.
              </para>
            </listitem>

            <listitem>
              <para>
                <inlinemediaobject>
                  <imageobject condition="popup">
                    <imagedata fileref="../../assets/html/images/p4v-goto-submitted_changelist.png"/>
                  </imageobject>

                  <textobject>
                    <phrase>P4V "go to" dialog with changelist entered</phrase>
                  </textobject>
                </inlinemediaobject>
                
                Type in the <emphasis>submitted changelist</emphasis> number
                and click <guibutton>OK</guibutton>.
              </para>
            </listitem>

            <listitem>
              <para>
                <inlinemediaobject>
                  <imageobject condition="popup">
                    <imagedata fileref="../../assets/html/images/p4v-dialog-submitted_change-select.png"/>
                  </imageobject>

                  <textobject>
                    <phrase>P4V "Submitted Changelist" dialog with files selected</phrase>
                  </textobject>
                </inlinemediaobject>
                
                Select the files in the <guilabel>Files</guilabel> area.
              </para>
            </listitem>

            <listitem>
              <para>
                <inlinemediaobject>
                  <imageobject condition="popup">
                    <imagedata fileref="../../assets/html/images/p4v-dialog-submitted_change-get_revision.png"/>
                  </imageobject>

                  <textobject>
                    <phrase>
                      P4V "Submitted Changelist" dialog with content menu
                      selecting "Get this Revision"
                    </phrase>
                  </textobject>
                </inlinemediaobject>
                
                Context-click, and select <guimenuitem>Get this
                Revision</guimenuitem>.
              </para>
            </listitem>

            <listitem>
              <para>
                <inlinemediaobject>
                  <imageobject condition="popup">
                    <imagedata fileref="../../assets/html/images/p4v-dialog-close.png"/>
                  </imageobject>

                  <textobject>
                    <phrase>P4V dialog close button</phrase>
                  </textobject>
                </inlinemediaobject>
                
                Click <guibutton>Close</guibutton>.
              </para>
            </listitem>
          </orderedlist>
        </listitem>
      </orderedlist>
    </section>

    <section xml:id="code_reviews.activities.fetch.via_gf">
      <title>Using Git Fusion</title>

      <para>
        In the following example, the current local task branch is
        <replaceable>task1</replaceable>, the target branch is
        <replaceable>master</replaceable>, the review id is
        <replaceable>1234</replaceable>, the Git Fusion hostname is
        <replaceable>gfserver</replaceable>, and the remote repo name is
        <replaceable>p4gf_repo</replaceable>.
      </para>

      <orderedlist numeration="loweralpha">
        <listitem>
          <para>
            Fetch the review's head version:
          </para>

<programlisting>
$ <command>git fetch --prune origin</command>
From <replaceable>gfserver</replaceable>:<replaceable>p4gf_repo</replaceable>
 * [new_branch]      review/<replaceable>master</replaceable>/<replaceable>1234</replaceable> -&gt; origin/review/<replaceable>master</replaceable>/<replaceable>1234</replaceable>
 x [deleted]         (none)     -&gt; origin/review/<replaceable>dev</replaceable>/new
</programlisting>

          <para>
            The <parameter>--prune</parameter> option lets the local Git repo
            delete the unwanted
            <literal>review/<replaceable>master</replaceable>/new</literal>
            reference created by the initial <command>git push origin
            <replaceable>task1</replaceable>:review/<replaceable>master</replaceable>/new</command>
            command.
          </para>
        </listitem>

        <listitem>
          <para>
            Check out the review's head version:
          </para>

<programlisting>
$ <command>git checkout review/<replaceable>master</replaceable>/<replaceable>1234</replaceable></command>
</programlisting>
        </listitem>
      </orderedlist>

      <important>
        <para>
          You can only update Git Fusion-initiated reviews using Git Fusion.
        </para>
      </important>

      <tip>
        <para>
          For more information on Git Fusion, see the
          <link xlink:href="http://www.perforce.com/perforce/doc.current/manuals/git-fusion/">Git Fusion Guide</link>
        </para>
      </tip>
    </section>
  </section>

  <section xml:id="code_reviews.activities.edit_reviewers">
    <title>Edit reviewers</title>

    <para>
      A review author, or users with <emphasis>admin</emphasis> or
      <emphasis>super</emphasis> privileges are always able to edit the reviewers
      for a review. Reviewers are always able to join or leave reviews, or to
      change whether their vote is required or optional.
    </para>

    <para>
      Additionally, the following individuals may edit reviewers:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          If the review is <link linkend="projects.add">moderated</link>, the
          moderators.
        </para>
      </listitem>

      <listitem>
        <para>
          If the review is part of a project, but not moderated, all project
          members.
        </para>
      </listitem>

      <listitem>
        <para>
          If the review is not part of a project, any authenticated user.
        </para>
      </listitem>
    </itemizedlist>

    <para>
      To edit reviewers for a review:
    </para>
    
    <procedure>
      <step>
        <para>
          Navigate to a review.
        </para>
      </step>

      <step>
        <para>
          Click the edit reviewers button, which appears just to the left of
          reviewer avatars:
        
          <inlinemediaobject>
            <imageobject>
              <imagedata fileref="../../assets/html/images/icon-edit_description.png"/>
            </imageobject>

            <textobject>
              <phrase>The edit reviewers button</phrase>
            </textobject>
          </inlinemediaobject>
        </para>

        <para>
          The <guilabel>Reviewers</guilabel> dialog is displayed:
        </para>

        <para>
          <inlinemediaobject>
            <imageobject>
              <imagedata fileref="../../assets/html/images/dialog-reviewers.png"/>
            </imageobject>

            <textobject>
              <phrase>The Reviewers dialog</phrase>
            </textobject>
          </inlinemediaobject>
        </para>
      </step>

      <step>
        <para>
          Add or remove reviewers, or change the vote requirement.
        </para>

        <para>
          Use the reviewer search field to find users by name or userid. The
          field auto-completes as you type.
        </para>

        <para>
          For existing reviewers, click the star icon to the left of the userid
          to toggle whether their vote is required or not. A solid star means
          that their vote is required to approve a review, whereas the outlined
          star means that their vote is optional.
        </para>

        <para>
          Click the <guibutton>X</guibutton> icon to the right of the userid to
          remove that reviewer from the review.
        </para>
      </step>

      <step>
        <para>
          <inlinemediaobject>
            <imageobject condition="thumb">
              <imagedata fileref="../../assets/html/images/button-save.png"/>
            </imageobject>

            <textobject>
              <phrase>Save button</phrase>
            </textobject>
          </inlinemediaobject>

          Click the <guibutton>Save</guibutton> button to save any changes made.
        </para>
      </step>
    </procedure>

  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="code_reviews.responsibility" xml:base="code_reviews/responsibility.xml">
  <title>Responsibility</title>

  <para>
    Initially, code reviews have no reviewers. Code review authors can designate
    users as reviewers by including
    <link linkend="basics.notable.mentions">@mentions</link> for each desired
    reviewer, <literal>@*mentions</literal> for each required reviewer, or by
    using the <guilabel>Edit Reviewers</guilabel> dialog which allows reviewers
    to be added, removed, and to make each reviewer's vote required or optional.
  </para>

  <para>
    Other users can show their interest in participating in the code review by
    clicking their avatar in the <guilabel>Reviewers</guilabel> area of the code
    review and selecting <guimenuitem>Join review</guimenuitem>, or by
    commenting on a review or one of its files. Once a user shows such interest,
    they are added to the review's list of reviewers and share in the
    responsibility of performing the code review. Later on, reviewers can change
    whether their vote is required or optional, or leave a review (perhaps to
    prevent further notifications). 
  </para>

  <para>
    Looking at a review queue can help you determine which reviews have likely
    not been started, using the <guibutton>No Reviewers</guibutton> filter. Once
    a review has reviewers, it is considered to be active and appears in the
    review queue with the state <literal>Has Reviewers</literal>.
  </para>

  <para>
    Review participation is <emphasis>advisory</emphasis> by default, and is
    used to inform your team that a code review is being conducted. The
    disposition of the review is reflected in the review's current state, the
    badges that may appear over each reviewer's avatar, and any comments
    reviewers might add.
  </para>

  <section xml:id="code_reviews.responsibility.moderators">
    <title>Moderators</title>

    <para>
      A project <emphasis>moderator</emphasis> is a user assigned to moderate
      reviews for a specific branch associated with a project. See how to
      <link linkend="projects.add.moderators">specify moderators</link>.
    </para>
    
    <para>
      When <guilabel>Only Moderators can approve or reject reviews</guilabel> is
      set for a project branch, changing the state of any review associated with
      the moderated branch is restricted as follows:
    </para>

    <!-- vim: set ts=2 sw=2 tw=80 ai si: --><itemizedlist version="5.0" xml:base="../common/list-state_transition_restrictions.xml">
  <listitem>
    <para>
      Only moderators can approve or reject the review. Moderators can also
      transition a review to any other state.
    </para>
  </listitem>

  <listitem>
    <para>
      The review's author, when she is not a moderator, can change the review's
      state to <guilabel>Needs Review</guilabel>, <guilabel>Needs
      Revision</guilabel>, <guilabel>Archived</guilabel>, and can attach
      committed changelists.
    </para>
    
    <para>
      Normally, the review's author cannot change the review's state to
      <guilabel>Approved</guilabel> or <guilabel>Rejected</guilabel> on
      moderated branches. However, authors that are also moderators have
      moderator privileges, and may approve or reject their own review.
    </para>

    <para>
      When <link linkend="admin.reviews.disable_self_approve"><literal>disable_self_approve</literal></link>
      is enabled, authors who are moderators (or even users with
      <emphasis>admin</emphasis> privileges) cannot approve their own reviews.
    </para>
  </listitem>

  <listitem>
    <para>
      Project members can change the review's state to <guilabel>Needs
      Review</guilabel> or <guilabel>Needs Revision</guilabel>, and can attach
      committed changelists. Project members cannot change the review's state to
      <guilabel>Approved</guilabel>, <guilabel>Rejected</guilabel>, or
      <guilabel>Archived</guilabel>.
    </para>
  </listitem>

  <listitem>
    <para>
      Users that are not project members, moderators, or the review's author
      cannot transition the review's state.
    </para>
  </listitem>

  <listitem>
    <para>
      For the review's author and project members, if a review is not in one of
      their permitted states, for example if the review's state is
      <guilabel>Rejected</guilabel>, they cannot transition the review to
      another state.
    </para>

    <para>
      These restrictions have no effect on who can start a review.
    </para>
  </listitem>
</itemizedlist>
  </section>

  <section xml:id="code_reviews.responsibility.required">
    <title>Required reviewers</title>

    <para>
      Reviews can optionally have required reviewers. When a review has required
      reviewers, the review cannot be approved until all required reviewers have
      up-voted the review. If the review is associated with a project that has
      assigned moderators, even the moderators cannot approve the review without
      up-votes from all required reviewers (but they can reject the review).
    </para>

    <para>
      Required reviewers are expected to take greater care while performing a
      review than non-required reviewers, as their votes affect whether a review
      can be approved or not.
    </para>

    <para>
      To edit the reviewers for a review, and to change whether a reviewer is
      required or not, see
      <xref linkend="code_reviews.activities.edit_reviewers"/>.
    </para>

    <note>
      <para>
        If a review involves a branch with assigned moderators, only a moderator
        can approve the review, even if all required reviewers have up-voted the
        review.
      </para>

      <para>
        See <link linkend="projects.add.moderators"> the description of assigning
        moderators</link>.
      </para>
    </note>
  </section>

  <section xml:id="code_reviews.responsibility.add">
    <title>Add yourself as a reviewer</title>

    <orderedlist>
      <listitem>
        <para>
          Visit the review's page.
        </para>
      </listitem>

      <listitem>
        <para>
          Login, if you have not already done so.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="popup">
              <imagedata fileref="../../assets/html/images/dropdown-reviewer-not_reviewing.png"/>
            </imageobject>

            <textobject>
              <phrase>The dropdown menu appearing when you click your avatar</phrase>
            </textobject>
          </inlinemediaobject>

          Click your avatar in the <guilabel>Reviewers</guilabel> area of the
          review display, which should be greyed out since you are not yet a
          reviewer. A dropdown menu appears.
        </para>
      </listitem>

      <listitem>
        <para>
          Select <guimenuitem>+ Join Review</guimenuitem>. Alternatively, you
          can select <guimenuitem>^ Vote Up</guimenuitem> or <guimenuitem>v Vote
          Down</guimenuitem> if you approve or disapprove of the review,
          respectively; either will cast your vote and make you a reviewer.
        </para>
      </listitem>
    </orderedlist>

    <para>
      You avatar is no longer greyed out, and you are now a reviewer.
    </para>
  </section>

  <section xml:id="code_reviews.responsibility.remove">
    <title>Remove yourself as a reviewer</title>

    <orderedlist>
      <listitem>
        <para>
          Visit the review's page.
        </para>
      </listitem>

      <listitem>
        <para>
          Login, if you have not already done so.
        </para>
      </listitem>

      <listitem>
        <para>
          <inlinemediaobject>
            <imageobject condition="popup">
              <imagedata fileref="../../assets/html/images/dropdown-reviewer-reviewing.png"/>
            </imageobject>

            <textobject>
              <phrase>The dropdown menu appearing when you click your avatar</phrase>
            </textobject>
          </inlinemediaobject>

          Click your avatar in the <guilabel>Reviewers</guilabel> area of the
          review display, which should not be greyed out since you are already a
          reviewer. A dropdown menu appears.
        </para>
      </listitem>

      <listitem>
        <para>
          Select <guimenuitem>X Leave Review</guimenuitem>.
        </para>
      </listitem>
    </orderedlist>

    <para>
      You avatar is now greyed out, and you are no longer a reviewer.
    </para>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="code_reviews.workflow" xml:base="code_reviews/workflow.xml">
  <title>Review workflow</title>

  <para>
    There are many possible code review workflows. The section describes two
    typical scenarios for a code review that Swarm can handle.
  </para>

  <section xml:id="code_reviews.workflow.other_reviewer">
    <title>Another developer reviews your code</title>

    <orderedlist>
      <listitem>
        <para>
          You request a code review with a shelved change.
        </para>
      </listitem>

      <listitem>
        <para>
          Another developer, Bill, sees the email notification from Swarm,
          clicks the review link in the email, and begins looking at the diffs
          in the files belonging to the review. Curious about an implementation
          detail, Bill clicks the line he's curious about and adds his query in
          a Swarm comment.
        </para>
      </listitem>

      <listitem>
        <para>
          You receive an email notification regarding Bill's query. His query
          prompts you to clarify the code, say by renaming some variables and
          adding some better descriptive text in the surrounding code comments.
          You then update the review with your changes.
        </para>
      </listitem>

      <listitem>
        <para>
          Bill sees the email notification that you have updated the review. He
          checks out the change, likes what he sees, and marks the review
          <guilabel>Approved</guilabel>.
        </para>
      </listitem>

      <listitem>
        <para>
          You see the email notification that Bill has approved your review, so
          you commit your code.
        </para>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="code_reviews.workflow.you_review">
    <title>You review another developer's code</title>

    <orderedlist>
      <listitem>
        <para>
          Another developer, Charlie, requests a code review with a shelved
          change.
        </para>
      </listitem>

      <listitem>
        <para>
          You receive an email notification from Swarm, click the review link in
          the email, and begin looking at the diffs in the files belong to the
          review. You don't like what you see, as Charlie has tried to fix a bug
          using a technique you have already tried previously and know to be
          incorrect. You add comments to the code that needs attention, flag
          your comments as <link linkend="basics.comments.tasks">tasks</link>,
          and mark the review <guilabel>Needs Revision</guilabel>.
        </para>
      </listitem>

      <listitem>
        <para>
          Charlie receives an email notification regarding your review, but
          disagrees with you, and adds his own comments justifying his
          implementation.
        </para>
      </listitem>

      <listitem>
        <para>
          You receive an email notification regarding Charlie's comment. The
          technique is somewhat complicated, so rather than attempt to describe
          how it is incorrect, you unshelve the review's code to your own
          workspace, change Charlie's code, and shelve your changes. Swarm
          updates the review with your new code.
        </para>
      </listitem>

      <listitem>
        <para>
          Charlie receives an email notification regarding your updates to the
          review. He's still unconvinced, but he unshelves your changes to try
          them in his local workspace. He finds that your implementation works
          better, but sees a couple of areas where there could be improvements.
          He reshelves his latest work to update the review.
        </para>
      </listitem>

      <listitem>
        <para>
          You receive an email notification regarding Charlie's updates, check
          out his changes, and realize that Charlie's work is now moot because
          the customer has revised his plans. You add a comment to the review
          reporting that fact, and <guilabel>Reject</guilabel> the review.
        </para>
      </listitem>
    </orderedlist>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="code_reviews.states" xml:base="code_reviews/states.xml">
  <title>States</title>

  <para>
    Reviews can be in one of several states. The biggest differentiator is
    whether the review's files have any outstanding, uncommitted changes or not.
  </para>

  <para>
    Whenever a review's state changes, an email notification is sent to all
    review participants, including the author, anyone who comments on the review
    or its files, anyone who has changed the review's state previously, and
    anyone who is <link linkend="basics.notable.mentions">@mentioned</link> in
    the review's description or comments.
  </para>

  <para>
    <inlinemediaobject>
      <imageobject condition="thumb">
        <imagedata fileref="../../assets/html/images/dropdown-review_states-shelved.png"/>
      </imageobject>

      <textobject>
        <phrase>The review state drop-down menu for shelved files</phrase>
      </textobject>
    </inlinemediaobject>

    Code reviews can be in one of the following states:
  </para>

  <variablelist>
    <varlistentry>
      <term>
        Needs review
      </term>

      <listitem>
        <para>
          The review has started and the changes need to be reviewed.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>
        Needs revisions
      </term>

      <listitem>
        <para>
          The changes have been reviewed and the reviewer has indicated that
          further revisions are required.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>
        Approved
      </term>

      <listitem>
        <para>
          The review has completed. The changes need to be committed. See the
          <link linkend="code_reviews.states.unapprove_modified">note about
          modified reviews</link>.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>
        Rejected
      </term>

      <listitem>
        <para>
          The review has completed. The changes are undesirable and should not
          be committed.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>
        Archived
      </term>

      <listitem>
        <para>
          The review has completed for now. However, it is neither rejected nor
          approved; it is simply put aside in case it is needed in the future.
        </para>
      </listitem>
    </varlistentry>
  </variablelist>

  <note xml:id="code_reviews.states.unapprove_modified">
    <para>
      By default, when an <guilabel>Approved</guilabel> review is committed or
      updated, Swarm changes the state to <guilabel>Needs Review</guilabel> if
      the files have been modified since the review was approved. Files are
      considered modified if the list of involved files changes, or if the file
      content or file-type changes.
    </para>

    <para>
      If one or more files in a review has the filetype <literal>+k</literal>
      (<literal>ktext</literal>), this behavior is undesirable because the files
      will appear to be modified when the Helix Versioning Engine replaces RCS
      keywords with their current values. See
      <xref linkend="admin.unapprove_modified"/> to see how to disable this
      behavior.
    </para>
  </note>

  <section xml:id="code_reviews.states.self_approve">
    <title>Self-approval by review authors</title>

    <para>
      By default, review authors can approve their own reviews. This behavior is
      based on Swarm's <link linkend="code_reviews.index.advisory">advisory
      nature</link>.
    </para>

    <para>
      Self-approval by authors can be prohibited on a project-by-project basis
      by specifying moderators for project branches (see the
      <link linkend="code_reviews.states.moderation">next section</link>).
      However, authors who are moderators can self-approve their own reviews.
    </para>

    <para>
      Administrators can configure Swarm to prevent all self-approval by review
      authors. See <xref linkend="admin.reviews.disable_self_approve"/> for
      details.
    </para>
  </section>

  <section xml:id="code_reviews.states.moderation">
    <title>State change restrictions with moderation</title>

    <para>
      Typically, any authenticated user can change the state of a review
      (remember that the review state is merely advisory in most cases). When
      the <guilabel>Only Moderators can approve or reject reviews</guilabel>
      restriction is enabled for a project branch, and one or more
      <link linkend="projects.add.moderators">moderators</link> have been
      assigned to that branch (see <xref linkend="projects.add"/> for details),
      that branch is <emphasis>moderated</emphasis>. Changing the state of any
      review associated with a moderated branch is restricted as follows:
    </para>

    <!-- vim: set ts=2 sw=2 tw=80 ai si: --><itemizedlist version="5.0" xml:base="../common/list-state_transition_restrictions.xml">
  <listitem>
    <para>
      Only moderators can approve or reject the review. Moderators can also
      transition a review to any other state.
    </para>
  </listitem>

  <listitem>
    <para>
      The review's author, when she is not a moderator, can change the review's
      state to <guilabel>Needs Review</guilabel>, <guilabel>Needs
      Revision</guilabel>, <guilabel>Archived</guilabel>, and can attach
      committed changelists.
    </para>
    
    <para>
      Normally, the review's author cannot change the review's state to
      <guilabel>Approved</guilabel> or <guilabel>Rejected</guilabel> on
      moderated branches. However, authors that are also moderators have
      moderator privileges, and may approve or reject their own review.
    </para>

    <para>
      When <link linkend="admin.reviews.disable_self_approve"><literal>disable_self_approve</literal></link>
      is enabled, authors who are moderators (or even users with
      <emphasis>admin</emphasis> privileges) cannot approve their own reviews.
    </para>
  </listitem>

  <listitem>
    <para>
      Project members can change the review's state to <guilabel>Needs
      Review</guilabel> or <guilabel>Needs Revision</guilabel>, and can attach
      committed changelists. Project members cannot change the review's state to
      <guilabel>Approved</guilabel>, <guilabel>Rejected</guilabel>, or
      <guilabel>Archived</guilabel>.
    </para>
  </listitem>

  <listitem>
    <para>
      Users that are not project members, moderators, or the review's author
      cannot transition the review's state.
    </para>
  </listitem>

  <listitem>
    <para>
      For the review's author and project members, if a review is not in one of
      their permitted states, for example if the review's state is
      <guilabel>Rejected</guilabel>, they cannot transition the review to
      another state.
    </para>

    <para>
      These restrictions have no effect on who can start a review.
    </para>
  </listitem>
</itemizedlist>
  </section>

  <section xml:id="code_reviews.states.required_reviewers">
    <title>Required reviewers</title>

    <para>
      Reviews can optionally have required reviewers. When a review has required
      reviewers, the review cannot be <guilabel>Approved</guilabel> until all
      required reviewers have up-voted the review. If the review is associated
      with a project that has assigned moderators, even the moderators cannot
      approve the review without up-votes from all required reviewers (but they
      can reject the review).
    </para>

    <para>
      Required reviewers are expected to take greater care while performing a
      review than non-required reviewers, as their votes affect whether a review
      can be approved or not.
    </para>

    <para>
      To edit the reviewers for a review, and to change whether a reviewer is
      required or not, see
      <xref linkend="code_reviews.activities.edit_reviewers"/>.
    </para>
  </section>

  <section xml:id="code_reviews.states.state_actions">
    <title>State actions</title>

    <para>
      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/dropdown-review_states-shelved.png"/>
        </imageobject>

        <textobject>
          <phrase>The review state drop-down menu for shelved files</phrase>
        </textobject>
      </inlinemediaobject>

      The drop-down menu provides two special actions included with the state
      change for uncommitted reviews:<literallayout>
</literallayout>
    </para>

    <variablelist>
      <varlistentry>
        <term>
          Approve and Commit
        </term>

        <listitem>
          <para>
            When selected, a dialog appears allowing you to update the
            description, select which jobs should be associated, and specify the
            job status upon commit. When you click the <guibutton>Approve and
            Commit</guibutton> button, the review becomes approved and its
            associated files are committed. By default, Swarm's activity stream
            entries and email notifications note that you committed the review
            on behalf of the review's author. This can be configured to credit
            only the committer, see <xref linkend="admin.commit_credit"/> for
            details.
          </para>

          <para>
            <inlinemediaobject>
              <imageobject>
                <imagedata fileref="../../assets/html/images/dialog-commit_review.png"/>
              </imageobject>

              <textobject>
                <phrase>The Commit Review dialog</phrase>
              </textobject>
            </inlinemediaobject>
          </para>

          <note>
            <para>
              This option can be removed by an administrator. See
              <xref linkend="admin.security.disable_commit"/> for details.
            </para>

            <para>
              By default, if the committer is not the review's author, Swarm
              credits both users. If you prefer to credit only the committer,
              see <xref linkend="admin.commit_credit"/> for details.
            </para>
          </note>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          Already Committed...
        </term>

        <listitem>
          <para>
            Sometimes, a changelist that a review is based upon gets committed
            without the review being updated. In such a situation, selecting
            <guimenuitem>Already Committed...</guimenuitem> displays a dialog
            presenting a list of candidate changelists:
          </para>

          <para>
            <inlinemediaobject>
              <imageobject>
                <imagedata fileref="../../assets/html/images/dialog-select_change.png"/>
              </imageobject>

              <textobject>
                <phrase>The Select Change dialog</phrase>
              </textobject>
            </inlinemediaobject>
          </para>

          <para>
            Specify the changelist, if you know it, or browse the recent changes
            to locate the submitted change. The first field under
            <guilabel>History</guilabel> allows you to filter changes by depot
            path. The second field allows you to filter changes by userid. Click
            a changelist to select it, and then click
            <guibutton>Select</guibutton> to associate the changelist with the
            review and complete the review.  Or, just double-click a changelist
            to do the same.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>
      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/dropdown-review_states-committed.png"/>
        </imageobject>

        <textobject>
          <phrase>The review state drop-down menu for committed changes</phrase>
        </textobject>
      </inlinemediaobject>

      When a review has been committed, sometimes a follow-up change needs to be
      associated with the review. For committed reviews, the drop-down menu
      provides the <guimenuitem>Add a commit...</guimenuitem> entry in place of
      <guimenuitem>Already Committed...</guimenuitem>. Select <guimenuitem>Add a
      commit...</guimenuitem> to use the <guilabel>Select Change</guilabel>
      dialog as described above.
    </para>
  </section>
</section>
</chapter>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><chapter version="5.0" xml:id="chapter.integrations" xml:base="integrations/index.xml">
  <title>Integrations</title>

  <para>
    Swarm integrates with a variety of other applications and processes to
    provide important functionality, such as automated testing and
    deployment of code in reviews, issue tracking, and file previewing.
    This chapter describes each of the integrations available with Swarm.
  </para>

  <para>
    Included integrations:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        <xref linkend="integrations.jira"/>
      </para>
    </listitem>

    <listitem>
      <para>
        <xref linkend="integrations.libreoffice"/>
      </para>
    </listitem>

    <listitem>
      <para>
        <link linkend="quickstart.integrate_test_suite">Automated Testing for
        Reviews</link>
      </para>
    </listitem>

    <listitem>
      <para>
        <link linkend="quickstart.review_deployment">Automated Deployment for
        Reviews</link>
      </para>
    </listitem>

    <listitem>
      <para>
        <link linkend="admin.client_integration">P4V</link>
      </para>
    </listitem>
  </itemizedlist>

  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="integrations.jira" xml:base="integrations/jira.xml">
  <title>JIRA</title>

  <para>
    Swarm's JIRA integration allows code reviews and committed changes to be
    associated with JIRA issues, making it easy to reference associated issues,
    and see the state of a code review or committed change within JIRA.
  </para>

  <para>
    To associate a code review with a JIRA issue, include a JIRA issue
    identifier in the review's description, e.g. <literal>SW-1234</literal>;
    Swarm links to the JIRA issue and creates a link within the JIRA issue back
    to the code review in Swarm. Multiple JIRA issues can be included in the
    changelist description.
  </para>

  <para>
    As a code review progresses, Swarm updates each associated JIRA
    issue with the review's current status.
  </para>

  <note>
    <para>
      Swarm fetches JIRA project identifiers using a worker, once per the worker
      process' lifetime. See <xref linkend="admin.workers.configuration"/>. New
      JIRA projects will not auto-link to JIRA until the project identifiers
      have been updated. By default, project identifiers are updated once every
      ten minutes.
    </para>
  </note>

  <para>
    By default, the JIRA module is disabled. Use the following instructions to
    enable the JIRA module.
  </para>

  <section xml:id="integrations.jira.enable">
    <title>Enabling the JIRA module</title>

    <para>
      When enabled, the JIRA module links JIRA issues referenced in change
      descriptions, job descriptions, comments, and reviews to your local JIRA
      service. By default, the JIRA module is not enabled.
    </para>

    <para>
      To enable the JIRA module, add the following configuration block
      to your <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file:
    </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'jira' =&gt; array(
        'host'      =&gt; '', // URL for your installed JIRA web interface
        'user'      =&gt; '', // the username required for JIRA API access
        'password'  =&gt; '', // the password required for JIRA API access
        'job_field' =&gt; '', // optional, if P4DTG is replicating JIRA issue IDs
                           // to a job field, list that field here
    ),
</programlisting>

    <note>
      <para>
        If your JIRA web interface uses <literal>HTTPS</literal>, you may need
        to configure <xref linkend="admin.security.http_client_options"/> so
        that Swarm can connect successfully.
      </para>
    </note>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="integrations.libreoffice" xml:base="integrations/libreoffice.xml">
  <title>LibreOffice</title>

  <para>
    LibreOffice is a free power-packed open source personal productivity suite.
    When LibreOffice is installed on the server hosting Swarm, Swarm
    automatically detects its presence and uses LibreOffice to prepare PDF
    previews of a variety of file types, including:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        Word documents (<literal>.doc</literal>, <literal>.docx</literal>)
      </para>
    </listitem>

    <listitem>
      <para>
        PowerPoint presentations (<literal>.ppt</literal>,
        <literal>.pptx</literal>)
      </para>
    </listitem>

    <listitem>
      <para>
        Excel spreadsheets (<literal>.xls</literal>, <literal>.xlsx</literal>)
      </para>
    </listitem>

    <listitem>
      <para>
        Visio diagrams (<literal>.vsd</literal>)
      </para>
    </listitem>

    <listitem>
      <para>
        Rich-text files (<literal>.rtf</literal>).
      </para>
    </listitem>
  </itemizedlist>

  <para>
    <inlinemediaobject>
      <imageobject>
        <imagedata fileref="../../assets/html/images/page-preview_powerpoint.png"/>
      </imageobject>

      <textobject>
        <phrase>PowerPoint presentation preview</phrase>
      </textobject>
    </inlinemediaobject>
  </para>

  <para>
    Depending on your server's platform and distribution, LibreOffice may be
    provided as multiple packages and not all packages may be installed by
    default. If certain filetypes do not preview as expected in Swarm, you may
    need to install these optional packages to include all of the file handling
    capabilities of LibreOffice.
  </para>

  <tip>
    <para>
      For more information on LibreOffice, see:
      <link xlink:href="https://www.libreoffice.org/"/>.
    </para>
  </tip>

  <section xml:id="integrations.libreoffice.limitations">
    <title>Limitations</title>

    <para>
      The LibreOffice integration has several limitations:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          Document previews in Swarm may appear different than on a desktop
          system if the document's fonts are not installed on the server hosting
          Swarm and LibreOffice. In addition, LibreOffice has some limitations
          rendering Microsoft Office file types, so LibreOffice-generated
          previews may differ from what you see using Microsoft Office.
        </para>
      </listitem>

      <listitem>
        <para>
          Large files may require a notable amount of time to preview. Very
          large files may exhaust the resources of the server hosting Swarm,
          causing the preview to fail and temporarily impacting Swarm
          performance.
        </para>
      </listitem>

      <listitem>
        <para>
          Swarm is currently not able to detect or show differences in
          LibreOffice-supported file types.
        </para>
      </listitem>

      <listitem>
        <para>
          LibreOffice cannot currently provide previews on a Mac OSX server
          hosting Swarm.
        </para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="integrations.libreoffice.installation">
    <title>Installation</title>

    <para>
      We recommend that you install LibreOffice from your OS distribution, via
      <command>apt-get</command>, <command>yum</command>, etc.
    </para>

    <para>
      The minimal packages, and their transitive dependencies required for Swarm
      are:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <command>libreoffice-calc</command>
        </para>
      </listitem>

      <listitem>
        <para>
          <command>libreoffice-draw</command>
        </para>
      </listitem>

      <listitem>
        <para>
          <command>libreoffice-impress</command>
        </para>
      </listitem>

      <listitem>
        <para>
          <command>libreoffice-writer</command>
        </para>
      </listitem>

      <listitem>
        <para>
          <command>libreoffice-headless</command> (CentOS/RHEL only)
        </para>
      </listitem>
    </itemizedlist>
  </section>
</section>
</chapter>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><chapter version="5.0" xml:id="chapter.administration" xml:base="administration/index.xml">
  <title>Administration</title>

  <para>
    This section covers administration and configuration of Swarm.
  </para>

  <simplelist columns="2">
    <member><xref linkend="admin.archives"/></member>
    <member><xref linkend="admin.avatars"/></member>
    <member><xref linkend="admin.backup"/></member>
    <member><xref linkend="admin.changelist_files"/></member>
    <member><xref linkend="admin.client_integration"/></member>
    <member><xref linkend="admin.comment_attachments"/></member>
    <member><xref linkend="admin.commit_credit"/></member>
    <member><xref linkend="admin.commit_edge"/></member>
    <member><xref linkend="admin.commit_timeout"/></member>
    <member><xref linkend="admin.configuration"/></member>
    <member><xref linkend="admin.email"/></member>
    <member><xref linkend="admin.emoji"/></member>
    <member><xref linkend="admin.environment"/></member>
    <member><xref linkend="admin.exclude_users"/></member>
    <member><xref linkend="admin.ignored_users"/></member>
    <member><xref linkend="admin.license"/></member>
    <member><xref linkend="admin.locale"/></member>
    <member><xref linkend="admin.logging"/></member>
    <member><xref linkend="admin.mainline"/></member>
    <member><xref linkend="admin.notifications"/></member>
    <member><xref linkend="admin.ova"/></member>
    <member><xref linkend="admin.p4trust"/></member>
    <member><xref linkend="admin.projects"/></member>
    <member><xref linkend="admin.review_keyword"/></member>
    <member><xref linkend="admin.reviews"/></member>
    <member><xref linkend="admin.short_links"/></member>
    <member><xref linkend="admin.search"/></member>
    <member><xref linkend="admin.security"/></member>
    <member><xref linkend="admin.swarm_root"/></member>
    <member><xref linkend="admin.system_information"/></member>
    <member><xref linkend="admin.trigger"/></member>
    <member><xref linkend="admin.unapprove_modified"/></member>
    <member><xref linkend="admin.uninstall"/></member>
    <member><xref linkend="admin.workers"/></member>
  </simplelist>

  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.archives" xml:base="administration/archives.xml">
  <title>Archives configuration</title>

  <para>
    When the <command>zip</command> command-line tool is available, Swarm allows
    users to download a ZIP archive of a file or folder. You configure the
    archiving feature with the following configuration block in the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename>
    file:
  </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'archives' =&gt; array(
        'max_input_size'    =&gt; 512 * 1024 * 1024, // 512M (in bytes)
        'archive_timeout'   =&gt; 1800,              // 30 minutes
        'compression_level' =&gt; 1,                 // 0-9
        'cache_lifetime'    =&gt; 60 * 60 * 24,      // 1 day
    ),
</programlisting>

  <para>
    The <literal>max_input_size</literal> key specifies the maximum file/folder
    content size that can be processed into a ZIP archive. The default value
    permits up to 512 megabytes of content to be compressed. Smaller values
    limit the amount of file/folder content but provide faster downloads; larger
    values can allow increased scanning, syncing, compressing, and downloading
    times.
  </para>

  <para>
    The <literal>archive_timeout</literal> key specifies the amount of time, in
    seconds, to allow Swarm to prepare the ZIP archive for downloading. Shorter
    times can limit the practical size of a ZIP archive, depending on the
    performance of your network and the filesystem hosting Swarm; even with a
    generous <literal>max_input_size</literal> setting, if
    <literal>archive_timeout</literal> seconds have elapsed,
    the archive operation is terminated.
  </para>

  <para>
    The <literal>compression_level</literal> key specifies the compression level
    to use, and must be within the range <literal>0</literal> to
    <literal>9</literal>. <literal>0</literal> means no compression,
    <literal>9</literal> means maximum compression. As this value is increased,
    smaller ZIP archives may result, but may require greater compression time.
    Swarm uses the default of <literal>1</literal>, which provides a reasonable
    tradeoff of fast compression times with light compression that can still
    result in an archive notably smaller than the original file/folder content.
  </para>

  <para>
    The <literal>cache_lifetime</literal> key specifies the desired maximum age
    of cached ZIP archives. Increasing the value increases the amount of time
    that ZIP archives exist in the cache, which can improve the user experience
    for frequently downloaded files. However, ZIP archives can be quite large
    (depending on the size of your depot within the Helix Versioning Engine) and
    can require significant disk storage. Decreasing the value can mitigate the
    amount of disk space required for the cache; the tradeoff is that frequently
    accessed ZIP archives may need to be generated more frequently, which can
    have an impact on CPU and disk resources.
  </para>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.avatars" xml:base="administration/avatars.xml">
  <title>Avatars</title>

  <para>
    Swarm uses <emphasis>avatars</emphasis>, images that represent users
    responsible for events, in activity streams, projects, reviews, etc.
  </para>

  <para>
    Avatars are retrieved from an avatar provider; the default provider is
    <link xlink:href="http://www.gravatar.com/">gravatar.com</link>. Swarm sends
    an identifier to the avatar provider (for <literal>gravatar.com</literal>,
    an MD5 hash of the user's email address), and the provider returns the
    user's configured image (if one exists). If the requests fails for any
    reason, Swarm selects an avatar from its internal bee-themed collection.
  </para>

  <para>
    You configure the avatar lookups with the <literal>avatars</literal>
    configuration block in the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file. Here is an example:
  </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'avatars' =&gt; array(
        'http_url'  =&gt; 'http://www.gravatar.com/avatar/{hash}?s={size}&amp;d={default}',
        'https_url' =&gt; 'https://secure.gravatar.com/avatar/{hash}?s={size}&amp;d={default}',
    ),
</programlisting>

  <para>
    Both <parameter>http_url</parameter> and <parameter>https_url</parameter>
    specify URLs that should be used instead of the default
    <literal>gravatar.com</literal> URLs. Swarm picks which URL to use based on
    the current request; for HTTPS requests, Swarm picks the
    <parameter>https_url</parameter> URL. If the picked URL is not defined,
    Swarm will use <literal>gravatar.com</literal>.
  </para>

  <para>
    Several replacement values are available for inclusion in the URLs:
  </para>

  <variablelist>
    <varlistentry>
      <term>
        <literal>{user}</literal>
      </term>

      <listitem>
        <para>
          The current Swarm userid, or empty string
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>
        <literal>{email}</literal>
      </term>

      <listitem>
        <para>
          The current Swarm user's email address, or empty string
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>
        <literal>{hash}</literal>
      </term>

      <listitem>
        <para>
          The MD5 hash of the Swarm user's email address, or
          <literal>00000000000000000000000000000000</literal> if no
          email address is configured
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>
        <literal>{default}</literal>
      </term>

      <listitem>
        <para>
          The value <literal>blank</literal> for a transparent GIF
          (allowing users without avatars to fallback to Swarm's
          internal bee-themed avatars) or the value
          <literal>mm</literal> for a <emphasis>mystery man</emphasis>
          used in circumstances where no user identifier is known.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>
        <literal>{size}</literal>
      </term>

      <listitem>
        <para>
          the size Swarm would like in pixels for both the width and height,
          without units, e.g. <literal>64</literal>
        </para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>
    The URL you specify must include one of <parameter>{user}</parameter>,
    <parameter>{email}</parameter>, or <parameter>{hash}</parameter> to properly
    select a user-specific avatar. The URL should include
    <parameter>{size}</parameter> to assist Swarm's presentation.
    <parameter>{default}</parameter> is not necessary, but helps provide a
    consistent avatar experience.
  </para>

  <note>
    <para>
      By default, <literal>gravatar.com</literal> serves only G-rated avatar
      images. If your Swarm users wish to use PG-, R-, or X-rated images, you'll
      need to configure the avatar lookup URLs with the appropriate rating flag.
      For example, to allow avatars with G or PG ratings, the configuration
      would look like:
    </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'avatars' =&gt; array(
        'http_url'  =&gt; 'http://www.gravatar.com/avatar/{hash}?<emphasis role="bold">r=pg</emphasis>&amp;s={size}&amp;d={default}',
        'https_url' =&gt; 'https://secure.gravatar.com/avatar/{hash}?<emphasis role="bold">r=pg</emphasis>&amp;s={size}&amp;d={default}',
    ),
</programlisting>

    <para>
      For more information on <literal>gravatar.com</literal>'s image requests,
      see: <link xlink:href="https://en.gravatar.com/site/implement/images/"/>
    </para>
  </note>

  <section xml:id="admin.avatars.disable">
    <title>Disable avatar lookups</title>

    <para>
      If you wish to disable avatar lookups altogether and simply use
      Swarm's internal bee-themed avatars, set each URL to
      <literal>false</literal>. For example:
    </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'avatars' =&gt; array(
        'http_url'  =&gt; false,
        'https_url' =&gt; false,
    ),
</programlisting>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.backup" xml:base="administration/backups.xml">
  <title>Backups</title>

  <para>
    Swarm stores all of the information it requires to operate within the Helix
    Versioning Engine. This includes project definitions, code reviews,
    comments, followers, and more. Code reviews are largely built on top of
    Perforce's shelving feature, and most other records are stored in custom
    counters called <emphasis>keys</emphasis>.
  </para>

  <para>
    Therefore, the standard recommendations for backing up your Helix Versioning
    Engine also apply when backing up your Swarm data.
  </para>

  <tip>
    <para>
      For more information, see:<literallayout>
</literallayout><link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4sag/chapter.backup.html">Helix
      Versioning Engine Administrator Guide: Fundamentals: Backup and Recovery</link>
    </para>
  </tip>

  <para>
    In addition, your Swarm configuration and any modifications you might make
    to the provided modules, templates, CSS, JavaScript, etc. also need to be
    backed up. The <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data</filename> directory contains the
    configuration, as well as temporary working files and browser session
    storage.
  </para>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.changelist_files" xml:base="administration/changelist_files.xml">
  <title>Changelist files limit</title>

  <para>
    Changelists or reviews with many files present a challenge to Swarm; it can
    take a notable amount of time for the file listing to reach Swarm from the
    Helix Versioning Engine, and a notable amount of time to provide the file
    listing HTML to a user's browser. When the file listing is many thousands of
    files, Swarm may run out of memory. Increasing the amount of memory for
    Swarm can help, but the Swarm interface may work slowly or not at all
    depending on the amount of memory available to the user's browser.
  </para>

  <para>
    With the 2015.1 release, Swarm limits the number of files presented, even if
    a changelist or review involves more files than the limit.
  </para>

  <para>
    You can adjust the limit to suit your needs, by specifying a value for
    <literal>max_changelist_files</literal> in the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file:
  </para>

<programlisting language="php">
&lt;?php
    'p4' =&gt; array(
        'max_changelist_files'  =&gt; 5000,
    ),
</programlisting>

  <para>
    The default value of <literal>5000</literal> should suffice for most Swarm
    installations. Consider the effects of changing this value:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        Problems in the Swarm UI still exist with arbitrarily large values;
        there is likely no advantage to using a value over <literal>10000</literal>.
      </para>

      <para>
        Performance will be better with a Helix Versioning Engine 2014.1 or
        higher, as the file listing will be limited by the Helix Versioning
        Engine.
      </para>
    </listitem>

    <listitem>
      <para>
        Smaller values can potentially interfere with reviews and reading
        changelists; the file limit may cause interesting files in a changelist
        or review to no longer be displayed in Swarm.
      </para>
    </listitem>
  </itemizedlist>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.client_integration" xml:base="administration/client_integration.xml">
  <title>Client integration</title>

  <para>
    <application>P4V</application> and <application>P4VS</application> can now
    integrate with <application>Swarm</application>. To indicate how
    these applications should connect with Swarm, Swarm sets the
    <literal>P4.Swarm.URL</literal> property set in the Helix Versioning Engine.
    <application>P4V</application> and <application>P4VS</application> read this
    property, and if set, they connect to the specified URL to make Swarm API
    calls. If the property is unset, Swarm integration features are disabled.
  </para>
 
  <para>
    When <literal>P4.Swarm.URL</literal> is set, <application>P4V</application>
    provides the following integration features:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        <emphasis role="bold">Request a review</emphasis>: requests a review for
        pending or committed changelists.
      </para>
    </listitem>

    <listitem>
      <para>
        <emphasis role="bold">Update a review</emphasis>: updates a review from
        the current state of a pending changelist. This works for changelists
        that are already associated with a review, or for unassociated
        changelists.
      </para>
    </listitem>

    <listitem>
      <para>
        <emphasis role="bold">Open review in Swarm</emphasis>: opens the review
        associated with the selected changelist in your system's default web
        browser.
      </para>
    </listitem>

    <listitem>
      <para>
        <emphasis role="bold">Review Id and State columns</emphasis>: adds
        <guilabel>Review Id</guilabel> and <guilabel>Review State</guilabel>
        columns to both the <guilabel>Pending</guilabel> and
        <guilabel>Submitted</guilabel> tabs.
      </para>
    </listitem>
  </itemizedlist>

  <para>
    By default, the first Swarm worker auto-detects the URL it is running under
    and sets <literal>P4.Swarm.URL</literal> accordingly.
  </para>

  <para>
    For customized Swarm installations, the auto-detected URL may not use the
    correct hostname or port. In these scenarios, you can disable the URL
    auto-detection by editing the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file and setting the
    <literal>auto_register_url</literal> item to <literal>false</literal> in the
    <literal>p4</literal> configuration block. For example:
  </para>

<programlisting language="php">
&lt;?php
    'p4' =&gt; array(
        'auto_register_url'  =&gt; false,
    ),
</programlisting>

  <para>
    If you choose to disable this feature, you should manually set the
    <literal>P4.Swarm.URL</literal> property in the Helix Versioning Engine to
    the URL for your Swarm installation:
  </para>

<programlisting language="bash">
$ <command>p4 property -a -n P4.Swarm.URL -v <replaceable>https://myswarm.url:port/</replaceable></command>
</programlisting>

  <para>
    Replace <replaceable>https://myswarm.url:port/</replaceable> with the URL for
    your Swarm installation.
  </para>

  <note>
    <para>
      <application>P4V</application> uses an integration timeout, specified in
      the <literal>P4.Swarm.Timeout</literal> property, to limit delays
      in the <application>P4V</application> user interface. The default timeout
      is 10 seconds.
    </para>

    <para>
      To change the integration timeout, run:
    </para>

<programlisting language="bash">
$ <command>p4 property -a -n P4.Swarm.Timeout -v <replaceable>10</replaceable></command>
</programlisting>

    <para>
      Replace the <replaceable>10</replaceable> with the desired timeout in
      seconds. Increasing the timeout could cause notable delays in the
      <application>P4V</application> user interface, and decreasing the timeout
      could cause sporadic integration failures if Swarm's API responses take
      longer than the specified timeout.
    </para>
  </note>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.comment_attachments" xml:base="administration/comment_attachments.xml">
  <title>Comment attachments</title>

  <para>
    Swarm supports attaching arbitrary files to comments in code reviews and
    jobs.
  </para>

  <para>
    To store files attached to comments, Swarm looks for a depot named
    <literal>//.swarm</literal>. As Swarm does not create this depot, you need
    to create it, or specify another depot that the Swarm
    <emphasis>admin</emphasis> user can write to.
  </para>

  <para>
    To create a <literal>//.swarm</literal> depot, run the following as a user
    with <emphasis>admin</emphasis>-level privileges:
  </para>

<programlisting>
$ <command>p4 depot .swarm</command>
</programlisting>

  <para>
    Ensure that the Swarm <emphasis>admin</emphasis> user can write to the
    <literal>//.swarm</literal> depot.
  </para>

  <tip>
    <para>
      For more information and depot creation, see:<literallayout>
</literallayout><link xlink:href="http://www.perforce.com/perforce/doc.current/manuals/p4sag/chapter.superuser.html#d0e7434">Perforce
      System Administrator's Guide: Using multiple depots</link>
    </para>
  </tip>

  <para>
    Specifying a depot path for comment attachments, if you prefer not to use
    the default <literal>//.swarm</literal> depot, is done with the
    <literal>depot_storage</literal> configuration block in the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename>
    file:
  </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'depot_storage' =&gt; array(
        'base_path'  =&gt; '//<replaceable>depot_name</replaceable>',
    ),
</programlisting>

  <para>
    Replace <replaceable>depot_name</replaceable> with the depot where comment
    attachments should be stored. The Swarm <emphasis>admin</emphasis> needs to
    be able to write to this depot.
  </para>

  <para>
    You can limit the size of comment attachments with the
    <literal>attachments</literal> configuration block in the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file:
  </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'attachments' =&gt; array(
        'max_file_size'  =&gt; <replaceable>0</replaceable>, // the maximum file size to accept in bytes
    ),
</programlisting>

  <para>
    Replace the <replaceable>0</replaceable> with the maximum file size in bytes
    that you want Swarm to accept for a comment attachment. If the file size is
    exceeded, users will see an error.
  </para>

  <note>
    <para>
      Be aware that PHP's <literal>upload_max_filesize</literal> setting in
      <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/.htaccess</filename> overrides
      <literal>max_file_size</literal> (which overrides the setting in PHP's
      <filename>php.ini</filename>). You can only use
      <literal>max_file_size</literal> to be more restrictive than the setting
      in <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/.htaccess</filename>.
    </para>

    <para>
      The default for <literal>upload_max_filesize</literal> is
      <literal>8M</literal> (8 megabytes). Increase this limit if your
      commentors need to upload larger files.
    </para>
    
    <para>
      You may also have to increase <literal>post_max_size</literal>.
      <literal>post_max_size</literal> should always be set larger or equal to
      <literal>upload_max_filesize</literal>, and Swarm's
      <literal>max_file_size</literal> should always be either unset, or set
      smaller or equal to <literal>upload_max_filesize</literal>,
      otherwise users will encounter unexpected rejection of their comment
      attachments.
    </para>

    <para>
      See
      <link xlink:href="http://www.php.net/manual/en/features.file-upload.common-pitfalls.php">Handling
      file uploads: Common Pitfalls</link> for more details.
    </para>
  </note>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.commit_credit" xml:base="administration/commit_credit.xml">
  <title>Commit credit</title>

  <para>
    When you use Swarm to commit a review, but you are not the review's author,
    Swarm gives credit to the review author by default. Activity stream entries
    and email notifications include both the committer and review author's
    details.
  </para>

  <para>
    If you prefer Swarm's original behavior, which was to give credit only to
    the committer, you can do so by editing the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file and setting the
    <literal>commit_credit_author</literal> item to <literal>false</literal> in
    the <literal>reviews</literal> configuration block. For example:
  </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'reviews' =&gt; array(
        'commit_credit_author'  =&gt; false,
    ),
</programlisting>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.commit_edge" xml:base="administration/commit_edge.xml">
  <title>Commit-edge deployment</title>

  <para>
    Swarm can connect to a Helix Versioning Engine configured to use the
    <emphasis>commit-edge architecture</emphasis>, which is a specific
    replication configuration that employs a <emphasis>commit</emphasis> server and 
    one or more <emphasis>edge</emphasis> servers. This configuration
    distributes the compute, storage, and network requirements for improved
    performance and geographic distribution.
  </para>

  <para>
    When Swarm is connected to a commit server, the first worker detects this
    situation and sets a key in the Helix Versioning Engine,
    <literal>P4.Swarm.CommitURL</literal>, to an auto-detected URL. This allows
    any other Swarm instances that may be connected to edge servers to share
    reviews amongst all edge servers.
  </para>

  <tip>
    <para>
      For more information on the Helix Versioning Engine's commit-edge
      architecture, see the
      <link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4dist/chapter.distributed.html">Commit-edge
      Architecture</link> chapter in the
      <citetitle><link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4dist/index.html">Helix
      Versioning Engine Administrator Guide: Multi-site
      Deployment</link></citetitle>.
    </para>
  </tip>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.commit_timeout" xml:base="administration/commit_timeout.xml">
  <title>Commit timeout</title>

  <para>
    When a code review contains many files, or large files, or both, committing
    the review within Swarm can take some time. The default configuration,
    within the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file:
  </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'reviews' =&gt; array(
        'commit_timeout'  =&gt; 1800, // 30 minutes
    ),
</programlisting>

  <para>
    The <literal>commit_timeout</literal> key is expressed in seconds. If a
    commit operation takes longer than this limit, it is terminated. It is
    likely that a terminated commit requires administrator intervention to
    complete the commit using another client.
  </para>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.configuration" xml:base="administration/configuration.xml">
  <title>Configuration overview</title>

  <para>
    This section provides an overview of all the possible configuration blocks
    in the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file. Click on any underlined item to see a detailed
    description.
  </para>

  <warning>
    <para>
      While the syntax of this example is correct, it includes configuration
      values that <emphasis role="bold">cannot work</emphasis>. Ensure that
      you adjust the configuration appropriately for your Swarm installation
      before using this example in testing or production.
    </para>
  </warning>

<programlisting language="php">
&lt;?php
    return array(
        '<link linkend="admin.exclude_users">activity</link>' =&gt; array(
            'ignored_users' =&gt; array(
                'git-fusion-user',
                'p4dtguser',
                'system',
            ),
        ),
        '<link linkend="admin.archives">archives</link>' =&gt; array(
            'max_input_size'    =&gt; 512 * 1024 * 1024, // 512M (in bytes)
            'archive_timeout'   =&gt; 1800,              // 30 minutes
            'compression_level' =&gt; 1,                 // 0-9
            'cache_lifetime'    =&gt; 60 * 60 * 24,      // 1 day
        ),
        '<link linkend="admin.comment_attachments">attachments</link>' =&gt; array(
            'max_file_size'  =&gt; <replaceable>0</replaceable>, // the maximum file size to accept in bytes
        ),
        '<link linkend="admin.avatars">avatars</link>' =&gt; array(
            'http_url'  =&gt; 'http://www.gravatar.com/avatar/{hash}?s={size}&amp;d={default}',
            'https_url' =&gt; 'https://secure.gravatar.com/avatar/{hash}?s={size}&amp;d={default}',
        ),
        '<link linkend="admin.comment_attachments">depot_storage</link>' =&gt; array(
            'base_path'  =&gt; '//<replaceable>depot_name</replaceable>',
        ),
        '<link linkend="admin.environment">environment</link>' =&gt; array(
            'mode'         =&gt; 'production',
            'hostname'     =&gt; 'myswarm.hostname',
            'external_url' =&gt; null,
            'base_url'     =&gt; null,
        ),
        '<link linkend="admin.security.http_client_options">http_client_options</link>'   =&gt; array(
            'timeout'   =&gt; 5,
            'hosts'     =&gt; array(),
        ),
        '<link linkend="integrations.jira">jira</link>' =&gt; array(
            'host'      =&gt; '',
            'user'      =&gt; '',
            'password'  =&gt; '',
            'job_field' =&gt; '',
        ),
        '<link linkend="admin.logging">log</link>' =&gt; array(
            'priority'  =&gt; 5,
        ),
        '<link linkend="admin.email">mail</link>' =&gt; array(
            // 'recipients' =&gt; array('user@my.domain'),
            'transport' =&gt; array(
                'host' =&gt; 'my.mx.host',
            ),
        ),
        '<link linkend="admin.notifications">notifications</link>' =&gt; array(
            'honor_p4_reviews'      =&gt; false,
            'opt_in_review_path'    =&gt; '//depot/swarm',
            'disable_change_emails' =&gt; false,
        ),
        '<link linkend="setup.swarm">p4</link>' =&gt; array(
            'port'      =&gt; 'my-helix-versioning-engine:1666',
            'user'      =&gt; 'admin_userid',
            'password'  =&gt; 'admin user ticket or password',
            '<link linkend="admin.logging.performance">slow_command_logging</link>' =&gt; array(
                3,
                10 =&gt; array('print', 'shelve', 'submit', 'sync', 'unshelve'),
            ),
            '<link linkend="admin.changelist_files">max_changelist_files</link>' =&gt; 5000,
            '<link linkend="admin.client_integration">auto_register_url</link>'    =&gt; true,
        ),
        'projects' =&gt; array(
            '<link linkend="admin.mainline">mainlines</link>' =&gt; array(
                'main', 'mainline', 'master', 'trunk',
            ),
            '<link linkend="admin.projects.limit_project_add_admin">add_admin_only</link>'           =&gt; false,
            '<link linkend="admin.projects.limit_project_add_group">add_groups_only</link>'          =&gt; array(),
            '<link linkend="admin.projects">edit_name_admin_only</link>'     =&gt; false,
            '<link linkend="admin.projects">edit_branches_admin_only</link>' =&gt; false,
        ),
        '<link linkend="admin.workers">queue</link>'  =&gt; array(
            'workers'             =&gt; 3,    // defaults to 3
            'worker_lifetime'     =&gt; 595,  // defaults to 10 minutes (less 5 seconds)
            'worker_task_timeout' =&gt; 1800, // defaults to 30 minutes
            'worker_memory_limit' =&gt; '1G', // defaults to 1 gigabyte
        ),
        '<link linkend="admin.review_keyword">reviews</link>' =&gt; array(
            'patterns' =&gt; array(
                // #review or #review-1234 with surrounding whitespace/eol
                'octothorpe'      =&gt; array(
                    'regex'  =&gt; '/(?P&lt;pre&gt;\s+|^)'
                             .  '\#(?P&lt;keyword&gt;review)(?:-(?P&lt;id&gt;[0-9]+))?'
                             .  '(?P&lt;post&gt;\s+|$)/i',
                    'spec'   =&gt; '%pre%#%keyword%-%id%%post%',
                    'insert' =&gt; "%description%\n\n#review-%id%",
                    'strip'  =&gt; '/^\s*\#review(-[0-9]+)?(\s+|$)'
                             .  '|(\s+|^)\#review(-[0-9]+)?\s*$/i',
                ),

                // [review] or [review-1234] at start
                'leading-square'  =&gt; array(
                    'regex' =&gt; '/^(?P&lt;pre&gt;\s*)'
                            .  '\[(?P&lt;keyword&gt;review)(?:-(?P&lt;id&gt;[0-9]+))?\]'
                            .  '(?P&lt;post&gt;\s*)/i',
                    'spec'  =&gt; '%pre%[%keyword%-%id%]%post%',
                ),

                // [review] or [review-1234] at end
                'trailing-square' =&gt; array(
                    'regex' =&gt; '/(?P&lt;pre&gt;\s*)'
                            .  '\[(?P&lt;keyword&gt;review)(?:-(?P&lt;id&gt;[0-9]+))?\]'
                            .  '(?P&lt;post&gt;\s*)?$/i',
                    'spec'  =&gt; '%pre%[%keyword%-%id%]%post%',
                ),
            ),
            '<link linkend="admin.commit_timeout">commit_timeout</link>'       =&gt; 1800, // 30 minutes
            '<link linkend="admin.security.disable_commit">disable_commit</link>'       =&gt; true,
            '<link linkend="admin.reviews.disable_self_approve">disable_self_approve</link>' =&gt; false,
            '<link linkend="admin.commit_credit">commit_credit_author</link>' =&gt; true,
            '<link linkend="admin.ignored_users">ignored_users</link>'        =&gt; array(),
            '<link linkend="admin.unapprove_modified">unapprove_modified</link>'   =&gt; true,
        ),
        '<link linkend="admin.search">search</link>' =&gt; array(
            'maxlocktime'     =&gt; 5000, // 5 seconds, in milliseconds
            'p4_search_host'  =&gt; '',   // optional URL to Helix Search Tool
        ),
        '<link linkend="admin.security">security</link>'  =&gt; array(
            '<link linkend="admin.security.disable_system_info">disable_system_info</link>'      =&gt; false,
            '<link linkend="admin.security.restricted_changes">email_restricted_changes</link>' =&gt; false,
            '<link linkend="admin.security.ip_protections">emulate_ip_protections</link>'   =&gt; true,
            '<link linkend="admin.security.strict_https">https_port</link>'               =&gt; null,
            '<link linkend="admin.security.strict_https">https_strict</link>'             =&gt; false,
            '<link linkend="admin.security.strict_https">https_strict_redirect</link>'    =&gt; true,
            '<link linkend="admin.security.prevent_login">prevent_login</link>'            =&gt; array(),
            '<link linkend="admin.security.require_login">require_login</link>'            =&gt; true,
        ),
        '<link linkend="admin.security.sessions">session</link>'  =&gt; array(
            'cookie_lifetime'             =&gt; 0, // 0=expire when browser closed
            'gc_maxlifetime'              =&gt; 60*60*24*30, // 30 days
            'remembered_cookie_lifetime'  =&gt; 60*60*24*30, // 30 days
        ),
        '<link linkend="admin.short_links">short_links</link>' =&gt; array(
            'hostname'     =&gt; '<replaceable>myho.st</replaceable>',
            'external_url' =&gt; 'https://<replaceable>myho.st</replaceable><replaceable>:port</replaceable><replaceable>/sub-folder</replaceable>',

        ),
        '<link linkend="admin.logging.performance">xhprof</link>' =&gt; array(
            'slow_time'      =&gt; 3,
            'ignored_routes' =&gt; array('download', 'imagick', 'libreoffice', 'worker'),
        ),
    );
</programlisting>

  <note>
    <para>
      The Swarm configuration file does not include PHP's standard closing tag
      (<literal>?&gt;</literal>). This is intentional as it prevents
      unintentional whitespace from being introduced into Swarm's output, which
      would interfere with Swarm's ability to control HTTP headers. Debugging
      problems that result from unintentional whitespace can be challenging,
      since the resulting behavior and error messages often appear to be
      misleading.
    </para>
  </note>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.email" xml:base="administration/email.xml">
  <title>Email configuration</title>

  <para>
    Swarm's email delivery is controlled by the <literal>mail</literal>
    configuration block in the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file. Here is an example:
  </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'mail' =&gt; array(
        // 'sender' =&gt; 'swarm@my.domain',   // defaults to 'notifications@hostname'
        'transport' =&gt; array(
            'name' =&gt; 'localhost',          // name of SMTP host
            'host' =&gt; '127.0.0.1',          // host/IP of SMTP host
            'port' =&gt; 587,                  // SMTP host listening port
            'connection_class'  =&gt; 'plain', // 'smtp', 'plain', 'login', 'crammd5'
            'connection_config' =&gt; array(   // include when auth required to send
                'username'  =&gt; 'user',      // user on SMTP host
                'password'  =&gt; 'pass',      // password for user on SMTP host
                'ssl'       =&gt; 'tls',       // empty, 'tls', or 'ssl'
            ),

            // override email deliveries and store all messages in this path
            // 'path' =&gt; '/var/spool/swarm',
        ),

        // override regular recipients; send email only to these addresses
        // 'recipients' =&gt; array(
        //     'user1@my.domain',
        //     'user2@my.domain',
        // ),

        // blind carbon-copy recipients
        // 'use_bcc' =&gt; true,

        // suppress reply-to header
        // 'use_replyto' =&gt; false,
    ),
</programlisting>

  <note>
    <para>
      Without any mail configuration in the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file, Swarm attempts to
      send email according to PHP's configuration, found in the
      <filename>php.ini</filename> file. By default, the configuration in
      <filename>php.ini</filename> relies on SendMail being installed.
    </para>
  </note>

  <important>
    <para>
      Email delivery for events related to restricted changes is disabled by
      default. See <xref linkend="admin.security.restricted_changes"/> for
      details on how to enable restricted change notifications.
    </para>
  </important>

  <section xml:id="admin.email.sender">
    <title>Sender</title>

    <para>
      The <literal>sender</literal> item within the <literal>mail</literal>
      block specifies the sender email address that should be used for all
      notification email messages. The default value is:
    </para>

<programlisting>
notifications@<replaceable>hostname</replaceable>
</programlisting>

    <para>
      <replaceable>hostname</replaceable> is the name of the host running Swarm,
      or when specified with the <xref linkend="admin.environment"/>
      configuration.
    </para>
  </section>

  <section xml:id="admin.email.transport">
    <title>Transport</title>

    <para>
      The <parameter>transport</parameter> block within the
      <literal>mail</literal> block defines which mail server Swarm should use
      to send email notifications. Most of the items in this block can be
      omitted, or included as needed. See the Zend Framework's
      <link xlink:href="http://framework.zend.com/manual/2.2/en/modules/zend.mail.smtp.options.html#configuration-options">Mail
      Transport Configuration Options</link> for a description of most fields
      and their default values.
    </para>

    <para>
      Swarm uses the custom <parameter>path</parameter> item to direct all email
      messages to a directory instead of attempting delivery via SMTP. For
      details, see <xref linkend="admin.email.path"/>.
    </para>
  </section>

  <section xml:id="admin.email.recipients">
    <title>Recipients</title>

    <para>
      The <parameter>recipients</parameter> item within the
      <literal>mail</literal> block allows you to specify a list of recipients
      that should receive email notifications, overriding the normal recipients.
      This is useful if you need to debug mail deliveries.
    </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'mail' =&gt; array(
        'recipients' =&gt; array(
            'user1@my.domain',
            'user2@my.domain',
        ),
    ),
</programlisting>

    <para>
      Any number of recipients can be defined. If the array is empty, email
      notifications are delivered to the original recipients.
    </para>
  </section>

  <section xml:id="admin.email.use_bcc">
    <title>Use BCC</title>

    <para>
      The <parameter>use_bcc</parameter> item within the <literal>mail</literal>
      block allows you to address recipients using the
      <glossterm linkend="BCC">BCC</glossterm> email field. Setting the value to
      <literal>true</literal> causes Swarm to use the <literal>Bcc:</literal>
      field in notifications instead of the <literal>To:</literal> field,
      concealing the email addresses of all recipients.
    </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'mail' =&gt; array(
        'use_bcc' =&gt; true,
    ),
</programlisting>
  </section>

  <section xml:id="admin.email.use_replyto">
    <title>Use Reply-To</title>

    <para>
      The <parameter>use_replyto</parameter> item within the
      <literal>mail</literal> block allows you to suppress populating the
      Reply-To email field. Setting the value to <literal>false</literal> causes
      Swarm to omit the <literal>Reply-To:</literal> field in notifications; by
      default, it is populated with the author's name and email address. When
      this field is <literal>true</literal>, users receiving an email
      notification can simply reply to the email and their response will be
      addressed to the author.
    </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'mail' =&gt; array(
        'use_replyto' =&gt; false,
    ),
</programlisting>
  </section>

  <section xml:id="admin.email.path">
    <title>Save all messages to disk</title>

    <para>
      For testing purposes, you may want to send all email to disk without
      attempting to send it to recipients. Use the following configuration block
      to accomplish this:
    </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'mail' =&gt; array(
        'transport'  =&gt; array('path' =&gt; <replaceable>MAIL_PATH</replaceable>),
    ),
</programlisting>

    <para>
      <replaceable>&lt;MAIL_PATH&gt;</replaceable> should be replaced with the
      absolute path where email messages should be written. This path must
      already exist and be writable by the web server user.
    </para>

    <note>
      <para>
        Use of the <parameter>path</parameter> item causes Swarm to ignore
        <emphasis role="bold">all</emphasis> other configuration within the
        <parameter>transport</parameter> block. This is why
        <parameter>path</parameter> is commented out in the main example.
      </para>
    </note>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.emoji" xml:base="administration/emoji.xml">
  <title>Emoji</title>

  <para>
    By default, Swarm uses a font to provide
    <glossterm linkend="Emoji">Emoji</glossterm> images. Swarm can make use of
    Emoji images from the
    <link xlink:href="https://github.com/github/gemoji">Gemoji project</link>.
    Gemoji provides support for more Emojis and works on more browsers and
    platforms than the font Swarm normally uses.
  </para>

  <para>
    Due to licensing issues, Gemoji cannot be distributed with Swarm. You can
    use the Gemoji images after following these steps:
  </para>

  <orderedlist>
    <listitem>
      <para>
        Download the latest release (currently <replaceable>2.1.0</replaceable>)
        of the <link xlink:href="https://github.com/github/gemoji">Gemoji
        project</link> from their
        <link xlink:href="https://github.com/github/gemoji/releases">releases
        page</link>.
      </para>
    </listitem>

    <listitem>
      <para>
        Unpack the release archive into
        <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/vendor</filename>.
      </para>

      <para>
        After unpacking, you should see a new folder:
        <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/vendor/gemoji-<replaceable>2.1.0</replaceable></filename>
      </para>

      <para>
        <replaceable>2.1.0</replaceable> represents the version of Gemoji,
        which may differ if you downloaded a different or newer release.
      </para>
    </listitem>

    <listitem>
      <para>
        Rename the new folder:
      </para>

<programlisting language="bash">
$ <command>cd <link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/vendor</command>
$ <command>mv gemoji-<replaceable>2.1.0</replaceable> gemoji</command>
</programlisting>

      <para>
        Replace <replaceable>2.1.0</replaceable> in the above command if you
        have downloaded a different or newer release of Gemoji.
      </para>
    </listitem>

    <listitem>
      <para>
        Ensure that the new images are readable.
      </para>

<programlisting language="bash">
$ <command>cd <link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/vendor</command>
$ <command>chmod -R +r gemoji</command>
</programlisting>
    </listitem>
  </orderedlist>

  <para>
    Swarm detects and uses Gemoji images automatically.
  </para>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.environment" xml:base="administration/environment.xml">
  <title>Environment</title>

  <para>
    This section describes the <emphasis>environment</emphasis> configuration
    items available for Swarm:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        <emphasis role="bold">mode</emphasis>: whether Swarm operates in
        <emphasis>production</emphasis> or <emphasis>development</emphasis>
        mode.
      </para>
    </listitem>

    <listitem>
      <para>
        <emphasis role="bold">hostname</emphasis>: specifies the canonical
        hostname Swarm should use, such as in links to Swarm in email
        notifications.
      </para>
    </listitem>

    <listitem>
      <para>
        <emphasis role="bold">external_url</emphasis>: specifies the canonical
        URL Swarm should use, such as in links to Swarm in email notifications.
        Often, Swarm can often auto-detect the correct URL, but use of
        <parameter>external_url</parameter> might be necessary in complex web
        hosting environments.
      </para>
    </listitem>

    <listitem>
      <para>
        <emphasis role="bold">base_url</emphasis>: specifies the folder name
        Swarm is installed within when Swarm is not installed in the web
        server's document root.
      </para>
    </listitem>
  </itemizedlist>

  <para>
    Add the following configuration block to the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file:
  </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'environment' =&gt; array(
        'mode'         =&gt; 'development',      // defaults to 'production'
        'hostname'     =&gt; 'myswarm.hostname', // defaults to requested hostname
        'external_url' =&gt; null,               // defaults to null
        'base_url'     =&gt; null,               // defaults to null
    ),
</programlisting>

  <section xml:id="admin.environment.mode">
    <title>mode</title>

    <para>
      By default, Swarm operates in <emphasis>production</emphasis> mode. When
      <parameter>mode</parameter> is set to <literal>development</literal>,
      Swarm displays greater error detail in the browser. Also, Swarm switches
      from including aggregated and minified JavaScript and CSS to requesting
      each JavaScript and CSS resource for all active modules. The default value
      is <literal>production</literal>. Any value other than
      <literal>development</literal> is assumed to mean
      <literal>production</literal>.
    </para>

    <para>
      <literal>development</literal> mode makes it easier to discover problems
      and to identify their source, but also incurs additional browser overhead
      due to many more JavaScript and CSS requests for larger files. We
      recommend that you do not use <literal>development</literal> mode in
      production environments, unless directed to do so by Perforce technical
      support.
    </para>
  </section>

  <section xml:id="admin.environment.hostname">
    <title>hostname</title>

    <para>
      The <parameter>hostname</parameter> item allows you to specify Swarm's
      hostname. This could be useful if you have multiple virtual hosts deployed
      for a single Swarm instance; Swarm uses the hostname you configure when
      generating its web pages and email notifications.
    </para>

    <note>
      <para>
        The value specified for the <parameter>hostname</parameter> item should
        be just the hostname. It should not include a scheme (e.g.
        "<literal>http://</literal>"), nor should it include a port (e.g.
        "<literal>:80</literal>").
      </para>
    </note>
  </section>

  <section xml:id="admin.environment.external_url">
    <title>external_url</title>

    <para>
      The <parameter>external_url</parameter> item allows you to specify Swarm's
      canonical URL. This is useful if your Swarm instance is proxied behind
      another web service, such as a load balancer, caching proxy, etc., because
      Swarm's auto-detection of the current hostname or port could otherwise
      result in incorrect self-referencing URLs.
    </para>

    <para>
      When specified, Swarm uses the <parameter>external_url</parameter> item
      as the prefix for any URLs it creates that link to itself in its web pages
      and email notifications.
    </para>

    <note>
      <para>
        Any path components included in <parameter>external_url</parameter> are
        ignored. If you specify
        <literal>https://myswarm.url:8080/a/b/c</literal>, Swarm only uses
        <literal>https://myswarm.url:8080/</literal> when composing URLs.
      </para>
    </note>

    <important>
      <para>
        If you specify <xref linkend="admin.environment.base_url"/> along with
        <parameter>external_url</parameter> and you have deployed multiple Swarm
        instances that connect to the same Helix Versioning Engine, ensure that
        all Swarm instances specify the same <parameter>base_url</parameter>.
        Varying <parameter>base_url</parameter> amongst cooperating Swarm
        instances is not supported.
      </para>
    </important>
  </section>

  <section xml:id="admin.environment.base_url">
    <title>base_url</title>

    <para>
      The <parameter>base_url</parameter> item allows you to specify Swarm's
      folder within the web server's document root. This is useful if you cannot
      configure Swarm to operate within its own virtual host, such as when you
      have an existing web service and Swarm must exist alongside other
      applications or content.
    </para>

    <para>
      By default, <parameter>base_url</parameter> is <literal>null</literal>,
      which is equivalent to specifying <literal>/</literal>. If you specify a
      folder, include the leading <literal>/</literal>. For example,
      <literal>/swarm</literal>.
    </para>

    <important>
      <para>
        If you specify <xref linkend="admin.environment.external_url"/> along with
        <parameter>base_url</parameter> and you have deployed multiple Swarm
        instances that connect to the same Helix Versioning Engine, ensure that
        all Swarm instances specify the same <parameter>base_url</parameter>.
        Varying <parameter>base_url</parameter> amongst cooperating Swarm
        instances is not supported.
      </para>
    </important>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.exclude_users" xml:base="administration/excluding_users.xml">
  <title>Excluding Users from Activity Streams</title>

  <para>
    Larger Helix Versioning Engine installations often have one or more
    <emphasis>service</emphasis> users that perform automated tasks, such as
    build systems, continuous integration test servers, integrations with
    3rd-party databases via P4DTG, or with Git via Perforce Git Fusion.
  </para>

  <para>
    As Swarm reports the activity of users, and these service users can generate
    significant volumes of activity entries, Swarm provides a mechanism to
    ignore activity from specified users.
  </para>

  <para>
    Update the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file to include the following configuration block:
  </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'activity' =&gt; array(
        'ignored_users' =&gt; array(
            'git-fusion-user',
            'p4dtguser',
            'system',
        ),
    ),
</programlisting>

  <para>
    After <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> is updated, Swarm no longer records activity for any of
    the listed userids. Any previously recorded activity is included in activity
    streams.
  </para>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.ignored_users" xml:base="administration/ignored_users.xml">
  <title>Ignored users for reviews</title>

  <para>
    Automated test environments may inadvertently participate in code reviews if
    they copy user-generated change descriptions. For example, if an automated
    system copied a change description containing <literal>#review</literal> and
    subsequently shelved or committed files, a new review would be started.
    Similarly copying a description with <literal>#review-123</literal> could
    inadvertently update an existing review. As test environments may involve
    thousands or millions of tests, such interactions can potentially generate
    far too many Swarm notifications.
  </para>

  <para>
    To mitigate this problem, Swarm can be configured to ignore specified users
    for the purposes of starting or updating a review. Edit the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename>
    file, and provide the list of users to ignore in the
    <parameter>ignored_users</parameter> item in the
    <parameter>reviews</parameter> configuration block. For example:
  </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'reviews' =&gt; array(
        'ignored_users'  =&gt; array('<replaceable>build_user1</replaceable>', '<replaceable>build_user2</replaceable>'),
    ),
</programlisting>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.license" xml:base="administration/license.xml">
  <title>License</title>

  <para>
    Helix Swarm has always been free to use with an unlicensed Helix Versioning
    Engine. With the 2014.4 release, Swarm is free to use with any Helix
    Versioning Engine. You no longer need to purchase a Swarm-specific license,
    and any existing Swarm-specific licenses are no longer evaluated.
  </para>

  <para>
    An unlicensed Helix Versioning Engine provides unlimited use for up to 5
    users and 20 workspaces. When the user or workspace limit is crossed, the
    Helix Versioning Engine imposes a maximum of 1,000 files. Swarm honors the
    restrictions of the Helix Versioning Engine.
  </para>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.locale" xml:base="administration/locale.xml">
  <title>Locale</title>

  <para>
    Swarm is fully localized; with an appropriate language pack installation,
    Swarm can support users in multiple languages.
  </para>

  <para>
    A language pack consists of <literal>gettext</literal>-style
    <filename>default.po</filename> and <filename>default.mo</filename> files,
    placed in a folder named for the locale they represent, within the
    <filename>language</filename> folder in the Swarm root directory. In
    addition, language packs contain two javascript files to provide
    translation strings for the in-browser UI,
    <filename><replaceable>locale</replaceable>.js</filename> and
    <filename><replaceable>locale</replaceable>.jsgz</filename>, which both
    appear in the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/build/language</filename> folder.
  </para>

  <para>
    The following example illustrates the directory layout of a language pack:
  </para>

<screen>
<link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/
  language/
    <replaceable>locale</replaceable>/
      default.mo
      default.po
  public/
    build/
      language/
        <replaceable>locale</replaceable>.js
        <replaceable>locale</replaceable>.jsgz
</screen>
  
  <para>
    You can configure certain localization behaviors with the
    <literal>translator</literal> configuration block in the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file.
    Here is an example:
  </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'translator' =&gt; array(
        'detect_locale'              =&gt; true,
        'locale'                     =&gt; "",
        'translation_file_patterns'  =&gt; array(),
    ),
</programlisting>

  <para>
    The <literal>detect_locale</literal> key determines whether Swarm attempts
    to detect the browser's locale. The default value is
    <literal>true</literal>. Set the value to <literal>false</literal> to
    disable browser locale detection.
  </para>

  <para>
    The <literal>locale</literal> key is a string specifying the default locale
    for Swarm. Alternately, an array of 2 strings can be used to specify the
    default locale, and a fallback locale. For example:
  </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'translator' =&gt; array(
        'locale'                     =&gt; array("en_GB", "en_US"),
    ),
</programlisting>

  <para>
    The <literal>translation_file_patterns</literal> key allows you to customize
    Zend's translation infrastructure, which you might do if you are developing
    your own language pack. For details, see
    <link xlink:href="http://framework.zend.com/manual/2.2/en/modules/zend.i18n.translating.html">Zend\I18n</link>.
  </para>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.logging" xml:base="administration/logging.xml">
  <title>Logging</title>

  <para>
    Helix Swarm is a web application, so there are several types of logging
    involved during the course of Swarm's normal operations.
  </para>

  <section xml:id="admin.logging.web">
    <title>Web server logging</title>

    <para>
      All accesses to Swarm may be logged by the web server hosting Swarm. As
      web server log configuration is web server specific, refer to your web
      server's documentation. Since we recommend the use of Apache, more
      information regarding log configuration in Apache can be found here:
    </para>

    <tip>
      <para>
        <link xlink:href="https://httpd.apache.org/docs/2.2/logs.html"/>
      </para>
    </tip>
  </section>

  <section xml:id="admin.logging.perforce">
    <title>Helix Versioning Engine logs</title>

    <para>
      Swarm communicates with the associated Helix Versioning Engine for every
      page request. Review the Swarm-generated requests on your Helix Versioning
      Engine by enabling logging.
    </para>

    <tip>
      <para>
        For more information, see:<literallayout>
</literallayout><link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4sag/chapter.configuring.html#configuring.logging">Helix
        Versioning Engine Administrator Guide: Fundamentals: Configuring
        logging</link><literallayout>
</literallayout><link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4sag/chapter.monitoring.html#DB5-19166">Helix
        Versioning Engine Administrator Guide: Fundamentals: Auditing user file
        access</link>
      </para>
    </tip>
  </section>

  <section xml:id="admin.logging.swarm">
    <title>Swarm logs</title>

    <para>
      Depending on the log configuration you provide to Swarm, Swarm can log its
      own operations. Swarm's logs are much more helpful if you encounter
      problems.
    </para>

    <para>
      Swarm stores its log data in the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/log</filename>
      file. The volume of entries recorded in the log depends on the
      configuration stored in the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file. Here is an example:
    </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'log' =&gt; array(
        'priority'  =&gt; 3, // 7 for max, defaults to 3
    ),
</programlisting>

    <para>
      The log <literal>priority</literal> specifies the importance of the
      messages to be logged. When <literal>priority</literal> is set to
      <literal>0</literal> (the lowest value) only the most important messages
      are logged. When <literal>priority</literal> is set to
      <literal>7</literal> (the highest value) all messages, including the
      least important messages are logged. The default
      <literal>priority</literal> is <literal>3</literal>.
    </para>
    
    <para>
      The different <literal>priority</literal> levels are:
    </para>

    <informaltable>
      <tgroup cols="2">
        <colspec colname="priority" colwidth="*"/>
        <colspec colname="description" colwidth="6*"/>
        <thead>
          <row>
            <entry>
              <para>
                Priority
              </para>
            </entry>

            <entry>
              <para>
                Description
              </para>
            </entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>
              <para>
                <literal>0</literal>
              </para>
            </entry>

            <entry>
              <para>
                Emergency: a message about a system instability
              </para>
            </entry>
          </row>

          <row>
            <entry>
              <para>
                <literal>1</literal>
              </para>
            </entry>

            <entry>
              <para>
                Alert: a message about a required immediate action
              </para>
            </entry>
          </row>

          <row>
            <entry>
              <para>
                <literal>2</literal>
              </para>
            </entry>

            <entry>
              <para>
                Critical: a message about a critical condition
              </para>
            </entry>
          </row>

          <row>
            <entry>
              <para>
                <literal>3</literal>
              </para>
            </entry>

            <entry>
              <para>
                Error: a message about an error
              </para>
            </entry>
          </row>

          <row>
            <entry>
              <para>
                <literal>4</literal>
              </para>
            </entry>

            <entry>
              <para>
                Warning: a message about a warning condition
              </para>
            </entry>
          </row>

          <row>
            <entry>
              <para>
                <literal>5</literal>
              </para>
            </entry>

            <entry>
              <para>
                Notice: a message about a normal but significant condition
              </para>
            </entry>
          </row>

          <row>
            <entry>
              <para>
                <literal>6</literal>
              </para>
            </entry>

            <entry>
              <para>
                Info: an informational message
              </para>
            </entry>
          </row>

          <row>
            <entry>
              <para>
                <literal>7</literal>
              </para>
            </entry>

            <entry>
              <para>
                Debug: a debugging message
              </para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <note>
      <para>
        Setting <literal>priority</literal> to a value higher than
        <literal>7</literal> does not result in increased logging. Setting
        <literal>priority</literal> to a value lower than <literal>0</literal>
        does not result in reduced logging.
      </para>
    </note>
  </section>

  <section xml:id="admin.logging.trigger_token_errors">
    <title>Trigger Token Errors</title>

    <para>
      If the trigger tokens are missing or invalid, the web server error log
      contains a suitable error:
    </para>

<screen>
queue/add attempted with invalid/missing token: <replaceable>token used</replaceable>
</screen>

    <para>
      A token is <emphasis>invalid</emphasis> when it is not formed from
      the characters <literal>A</literal> through <literal>Z</literal>
      (in upper or lowercase), <literal>0</literal> through
      <literal>9</literal>, or a dash (<literal>-</literal>).
    </para>

    <para>
      A token is <emphasis>missing</emphasis> when a file using the token as its
      name does not exist in the
      <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/queue/tokens</filename> directory.
    </para>
  </section>

  <section xml:id="admin.logging.performance">
    <title>Performance logging</title>

    <para>
      Swarm logs warnings whenever commands issued to the Helix Versioning
      Engine take longer than expected to complete. These warnings can be used
      to diagnose performance problems in the Helix Versioning Engine.
    </para>

    <note>
      <para>
        By default, warnings are not captured in the Swarm log. To capture
        warnings, the <link linkend="admin.logging.swarm">log priority</link>
        must be set to <literal>4</literal> or higher.
      </para>
    </note>

    <para>
      The default configuration is:
    </para>

<programlisting language="php">
&lt;?php
    // this block should be placed within the 'p4' block
    'slow_command_logging' =&gt; array(
        3, // commands without a specific rule have a 3-second limit
        10 =&gt; array('print', 'shelve', 'submit', 'sync', 'unshelve'),
    ),
</programlisting>

    <para>
      In this configuration block, the numeric key specifies the time threshold
      in seconds, and the value (if present) is an array of Helix Versioning
      Engine commands that should use the threshold. Should a command be
      associated with multiple thresholds, the largest is used for that command.
    </para>

    <para>
      In addition, Swarm automatically detects when the PHP extension
      <literal>xhprof</literal> is installed and collects profiling data for
      requests that take longer than expected. The profiling data could be
      helpful in diagnosing performance issues within Swarm itself, particularly
      when analyzed in combination with the slow command logging described
      above. When collected, profiling data is stored in the
      <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/xhprof</filename> folder.
    </para>

    <para>
      The default configuration is:
    </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'xhprof' =&gt; array(
        'slow_time'      =&gt; 3, // the threshold in seconds
        'ignored_routes' =&gt; array('download', 'imagick', 'libreoffice', 'worker'),
    ),
</programlisting>

    <para>
      <parameter>slow_time</parameter> specifies the threshold, in seconds, that
      should be used to determine when a Swarm request is
      <emphasis>slow</emphasis>. <parameter>ignored_routes</parameter> is an
      array that specifies a list of Zend Framework <emphasis>route</emphasis>
      names that should not be profiled. For example, Swarm's
      <literal>Files</literal> module specifies that the
      <literal>download</literal> route should be ignored from profiling as
      downloads could take significantly longer than the default threshold.
    </para>

    <note>
      <para>
        Depending on the performance of the server hosting Swarm, and
        particularly the performance of the associated Helix Versioning Engine,
        you may want to monitor the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/xhprof</filename>
        folder for disk usage. Each request that exceeds the time threshold
        causes 200-600KB of data to be written.
      </para>
    </note>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.mainline" xml:base="administration/mainline.xml">
  <title>Mainline branch identification</title>

  <para>
    When viewing a project's files, the initial view is the list of the
    project's branches. The branches appear in alphabetical order, but the
    branch identified as the main branch appears first and bolded.
  </para>

  <para>
    Swarm uses a list of names to identify which of a project branches should be
    considered as the main branch. The default names are
    <emphasis>main</emphasis>, <emphasis>mainline</emphasis>,
    <emphasis>master</emphasis>, and <emphasis>trunk</emphasis>.
  </para>

  <para>
    You can adjust the configuration to match your local branch naming
    convention. Here is an example of the configuration block:
  </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'projects' =&gt; array(
        'mainlines' =&gt; array(
            'main', 'mainline', 'master', 'trunk',
        ),
    ),
</programlisting>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.notifications" xml:base="administration/notifications.xml">
  <title>Notifications</title>

  <para>
    Swarm can be configured to provide generic notifications of committed
    changes in the Helix Versioning Engine, taking the role of a
    <glossterm linkend="Review_Daemon">review daemon</glossterm>.
  </para>

  <para>
    Notifications configuration is expressed with a
    <literal>notifications</literal> block in the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file, similar to
    the following example:
  </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'notifications' =&gt; array(
        'honor_p4_reviews'      =&gt; false,           // defaults to false
        'opt_in_review_path'    =&gt; '//depot/swarm', // optional; defaults to ''
        'disable_change_emails' =&gt; false,           // optional; defaults to false
    ),
</programlisting>

  <variablelist>
    <varlistentry>
      <term>
        honor_p4_reviews
      </term>

      <listitem>
        <para>
          When set to true, Swarm sends notification emails for every committed
          change to all users where the change matches one of their
          <literal>Reviews:</literal> paths.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>
        opt_in_review_path
      </term>

      <listitem>
        <para>
          Optional item. This item specifies a special depot path, which
          typically would not exist in the Helix Versioning Engine. When a path
          is specified, users must include this path (or a path that contains
          it) in the <literal>Reviews:</literal> field of their user spec to
          cause Swarm to send the user a notification for every committed change
          that matches one of their <literal>Reviews:</literal> paths.
        </para>

        <para>
          For example, if the <literal>opt_in_review_path</literal> is set to
          <literal>//depot/swarmReviews</literal>, users can opt-in to Swarm
          review notifications by adding that path, or a path such as
          <literal>//depot/...</literal>, to the <literal>Reviews:</literal>
          field in their user spec.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>
        disable_change_emails
      </term>

      <listitem>
        <para>
          Optional item. When set to true, notifications for committed changes,
          based on the <literal>Reviews:</literal> field and the users and
          projects you follow, are disabled.
        </para>
      </listitem>
    </varlistentry>
  </variablelist>

  <note>
    <para>
      If your Helix Versioning Engine already has a review daemon in operation,
      users receive two notifications for <literal>Reviews:</literal> paths. You
      may want to deprecate the review daemon in favor of Swarm's change
      notifications.
    </para>
  </note>

  <note>
    <para>
      <xref linkend="basics.groups"/> have per-group notification settings. See
      <xref linkend="groups.add"/> for details.
    </para>
  </note>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.ova" xml:base="administration/ova.xml">
  <title>OVA Management</title>

  <para>
    The Helix Swarm OVA is installed with Ubuntu 12.04 LTS. Ubuntu's
    "Long-Term Support" releases receive security updates periodically over
    their 5-year support window. We recommend that use of the OVA involve
    package updates from time to time, which can be accomplished as follows:
  </para>

  <orderedlist>
    <listitem>
      <para>
        Log in to the OVA as <emphasis>root</emphasis>. The password for
        the <emphasis>root</emphasis> account was established during
        <link linkend="setup.ova">setup</link>.
      </para>
    </listitem>

    <listitem>
      <para>
        Update the catalog of available packages:
      </para>

<programlisting>
# <command>apt-get update</command>
</programlisting>
    </listitem>

    <listitem>
      <para>
        Download and install any updated packages:
      </para>

<programlisting>
# <command>apt-get upgrade</command>
</programlisting>
    </listitem>
  </orderedlist>

  <tip>
    <para>
      See "Package management with APT" for more information:<literallayout>
</literallayout><link xlink:href="https://help.ubuntu.com/community/AptGet/Howto">https://help.ubuntu.com/community/AptGet/Howto</link>
    </para>
  </tip>

  <section xml:id="admin.ova.conflicts">
    <title>Dependency Conflicts</title>

    <para>
      Ubuntu software packages are often dependent on other packages that
      provide, for example, common libraries, utilities, and configuration.
      Occasionally, an upgraded package may have differing dependencies than its
      previous version, which can lead to dependency conflicts that can prevent
      package updates from completing successfully.
    </para>

    <para>
      Should this situation occur with the Swarm OVA, use the following command
      to use "smart" conflict resolution, which attempts to upgrade the most
      important packages at the expense of less important packages if necessary:
    </para>

<programlisting>
# <command>apt-get dist-upgrade</command>
</programlisting>

    <warning>
      <para>
        Upgrading packages could potentially make the OVA-hosted Swarm no longer
        functional. If you use the Swarm OVA in a production environment,
        perform the package updates on a copy of the OVA and test that Swarm
        continues to function properly.
      </para>
    </warning>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.p4trust" xml:base="administration/p4trust.xml">
  <title>P4TRUST</title>

  <para>
    When Swarm is configured to connect to a Helix Versioning Engine
    (<command>p4d</command>) using an SSL connection, Swarm automatically
    executes the <command>p4 trust</command> command, which accepts the SSL
    fingerprint and creates the file
    <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/p4trust</filename> containing a list of trusted
    servers and their fingerprints. If the certificate that
    <command>p4d</command> uses is changed for any reason, when
    <command>p4d</command> is restarted Swarm connections to
    <command>p4d</command> fail.
  </para>

  <para>
    The solution is to delete <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/p4trust</filename>. On
    the next request to Swarm, <command>p4 trust</command> is again
    automatically executed and Swarm can then connect to <command>p4d</command>.
  </para>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.projects" xml:base="administration/projects.xml">
  <title>Projects</title>

  <para>
    By default, once a project has been created, any member of the project can
    edit or delete the project's settings. Projects can also set <guilabel>Only
    Owners and Administrators can edit the project</guilabel>, which prevents
    all project changes by users who are neither owners or administrators.
  </para>

  <para>
    Instead of allowing any changes, or preventing all changes, you may want to
    prevent project members from making select changes, such as to the project's name (and
    associated identifier), or adjusting the branch definition(s). This is
    useful when build infrastructure or other tooling treats these details as
    operational configuration, but you still want members to be able to adjust
    other aspects of the project configuration.
  </para>
  
  <para>
    To do so, edit the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file, and set the following two items,
    similar to the following example:
  </para>

<programlisting language="php">
  'projects' =&gt; array(
      'edit_name_admin_only'     =&gt; true,
      'edit_branches_admin_only' =&gt; true,
  ),
</programlisting>

  <itemizedlist>
    <listitem>
      <para>
        <literal>edit_name_admin_only</literal>: when set to
        <literal>true</literal>, only users with <emphasis>admin</emphasis>
        privileges in the Helix Versioning Engine can modify a project's name.
      </para>
    </listitem>

    <listitem>
      <para>
        <literal>edit_branches_admin_only</literal>: when set to
        <literal>true</literal>, only users with <emphasis>admin</emphasis>
        privileges in the Helix Versioning Engine can modify a project's branch
        definition(s).
      </para>
    </listitem>
  </itemizedlist>

  <para>
    Both items default to <literal>false</literal>.
  </para>

  <section xml:id="admin.projects.limit_project_add_admin">
    <title>Limit adding projects to administrators</title>

    <para>
      By default, any authenticated user can add new projects. Swarm can
      restrict project creation to users with <emphasis>admin</emphasis>-level
      privileges or higher. Once restricted, Swarm prevents non-administrators
      from adding projects, and does not display the <guibutton>+</guibutton>
      icon to add a project to non-administrators.
    </para>

    <para>
      Add or update the following configuration block to the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file,
      at the same level as the <parameter>p4</parameter> entry:
    </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'projects' =&gt; array(
        'add_admin_only' =&gt; true,
    ),
</programlisting>

    <important>
      <para>
        If <literal>add_admin_only</literal> is enabled and
        <link linkend="admin.projects.limit_project_add_group"><literal>add_groups_only</literal></link>
        has one or more groups configured, project creation is only available to
        users with administrator privileges <emphasis role="bold">and</emphasis>
        who are members of the specified groups.
      </para>
    </important>
  </section>

  <section xml:id="admin.projects.limit_project_add_group">
    <title>Limit adding projects to members of specific groups</title>

    <para>
      Swarm can restrict project creation to members of specific groups. The
      groups and membership need to be defined in the Helix Versioning Engine.
    </para>

    <para>
      Add or update the following configuration block to the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file,
      at the same level as the <parameter>p4</parameter> entry:
    </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'projects' =&gt; array(
        'add_groups_only' =&gt; array('<replaceable>wizards</replaceable>', '<replaceable>slayers</replaceable>', '<replaceable>phbs</replaceable>'),
    ),
</programlisting>

    <important>
      <para>
        If <link linkend="admin.projects.limit_project_add_admin"><literal>add_admin_only</literal></link>
        is also enabled, project creation is only available to users with
        administrator privileges <emphasis role="bold">and</emphasis> who are
        members of the specified groups.
      </para>
    </important>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.review_keyword" xml:base="administration/review_keyword.xml">
  <title>Review keyword</title>

  <para>
    By default, including the keyword <literal>#review</literal> within a
    changelist description (separated from other text with whitespace, or on a
    separate line) informs Swarm that a review should begin when the changelist
    is shelved or committed. Once a review has begun, Swarm adjusts the keyword
    with the review's identifier, such as <literal>#review-1234</literal>. This
    adjustment informs Swarm which review should be updated whenever the
    original changelist is re-shelved or committed.
  </para>

  <note>
    <para>
      Swarm can also accept <literal>[review]</literal> at the start or end of
      the changelist description, but this form of review keyword is now
      deprecated and is likely to be removed in a future version of Swarm.
    </para>
  </note>

  <para>
    The keyword can be configured with a regular expression so that most any
    keyword syntax can be used. If you choose to customize the review keyword,
    take care to choose syntax and terminology that is unlikely to occur in a
    changelist description, to avoid unexpected Swarm activity.
  </para>

  <para>
    To configure the review keyword, add the following block to the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename>
    file:
  </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'reviews' =&gt; array(
        'patterns' =&gt; array(
            // #review or #review-1234 with surrounding whitespace/eol
            'octothorpe'      =&gt; array(
                'regex'  =&gt; '/(?P&lt;pre&gt;\s+|^)'
                         .  '\#(?P&lt;keyword&gt;review)(?:-(?P&lt;id&gt;[0-9]+))?'
                         .  '(?P&lt;post&gt;\s+|$)/i',
                'spec'   =&gt; '%pre%#%keyword%-%id%%post%',
                'insert' =&gt; "%description%\n\n#review-%id%",
                'strip'  =&gt; '/^\s*\#review(-[0-9]+)?(\s+|$)'
                         .  '|(\s+|^)\#review(-[0-9]+)?\s*$/i',
            ),

            // [review] or [review-1234] at start
            'leading-square'  =&gt; array(
                'regex' =&gt; '/^(?P&lt;pre&gt;\s*)'
                        .  '\[(?P&lt;keyword&gt;review)(?:-(?P&lt;id&gt;[0-9]+))?\]'
                        .  '(?P&lt;post&gt;\s*)/i',
                'spec'  =&gt; '%pre%[%keyword%-%id%]%post%',
            ),

            // [review] or [review-1234] at end
            'trailing-square' =&gt; array(
                'regex' =&gt; '/(?P&lt;pre&gt;\s*)'
                        .  '\[(?P&lt;keyword&gt;review)(?:-(?P&lt;id&gt;[0-9]+))?\]'
                        .  '(?P&lt;post&gt;\s*)?$/i',
                'spec'  =&gt; '%pre%[%keyword%-%id%]%post%',
            ),
        ),
    ),
</programlisting>

  <para>
    Multiple patterns can be specified; the first successful match is used and
    none of the other patterns are evaluated.
  </para>

  <para>
    The keyword types are grouped under their identifiers. In each group, the
    <parameter>regex</parameter> item specifies the regular expression to be
    used to identify the review keyword in the changelist description. The
    <parameter>spec</parameter> item is used when the review keyword needs to be
    updated.
  </para>

  <para>
    Note the use of named capture groups in the <parameter>regex</parameter>,
    for example <literal>(?&lt;pre&gt;\s*)</literal>. The values captured during
    regex matching are used to replace any identically named placeholder values
    in the <parameter>spec</parameter> item that are surrounded by percent
    <literal>%</literal> characters. In the example configuration above, the
    <literal>pre</literal> and <literal>post</literal> capture groups and
    placeholders maintain any whitespace surrounding the review keyword.
  </para>

  <para>
    For <literal>octothorpe</literal> (or "hashtag") review keywords, these can
    appear anywhere in the changelist description. The
    <parameter>strip</parameter> item is used to ensure that the keyword is
    removed from the review description if it appears at the start or end of the
    changelist description.  The <parameter>insert</parameter> item is currently
    not used; it is included here to prevent future upgrade issues. The intended
    use case is when a review is started and the changelist does not already
    contain a review keyword, the <parameter>insert</parameter> item would be
    used to add the review keyword to the changelist description.
  </para>

  <tip>
    <para>
      For more information on named capture groups in PHP, see:<literallayout>
</literallayout><link xlink:href="http://www.regular-expressions.info/named.html"/>
    </para>
  </tip>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.reviews" xml:base="administration/reviews.xml">
  <title>Reviews</title>

  <section xml:id="admin.reviews.enforcement">
    <title>Review enforcement</title>

    <para>
      Using the <literal>enforce</literal> trigger script type option, Swarm can
      optionally require that a change to be submitted is tied to an approved
      code review, or the submit is rejected. You would most often use this
      option to ensure that files within specific depot paths have been
      reviewed.
    </para>
    
    <para>
      Additionally, using the <literal>strict</literal> trigger script type
      option, Swarm can optionally require that the content of a change to be
      submitted matches the content of its associated approved code review, or
      the submit is rejected. Using the <literal>strict</literal> type implies
      use of the <literal>enforce</literal> type. You would most often use this
      option to prevent users from making changes prior to submitting an already
      approved review.
    </para>

    <para>
      These capabilities are provided via the trigger script included with
      Swarm, but are not enabled by default nor covered in the
      <link linkend="setup.perforce">standard installation steps</link>.
    </para>

    <para>
      To enable these capabilities, edit the Perforce trigger table by running
      the <command>p4 triggers</command> command as a user with
      <emphasis>super</emphasis>-level privileges and add the following lines:
    </para>

<programlisting>
swarm.enforce.1 change-submit  //DEPOT_PATH1/... "%//.swarm/triggers/swarm-trigger.pl% -c %//.swarm/triggers/swarm-trigger.conf% -t enforce -v %change% -p %serverport%"
swarm.enforce.2 change-submit  //DEPOT_PATH2/... "%//.swarm/triggers/swarm-trigger.pl% -c %//.swarm/triggers/swarm-trigger.conf% -t enforce -v %change% -p %serverport%"
swarm.strict.1  change-content //DEPOT_PATH1/... "%//.swarm/triggers/swarm-trigger.pl% -c %//.swarm/triggers/swarm-trigger.conf% -t strict -v %change% -p %serverport%"
swarm.strict.2  change-content //DEPOT_PATH2/... "%//.swarm/triggers/swarm-trigger.pl% -c %//.swarm/triggers/swarm-trigger.conf% -t strict -v %change% -p %serverport%"
</programlisting>

    <note>
      <para>
        These trigger table entries assume that the trigger script,
        <filename>swarm-trigger.pl</filename>, has been committed to the
        Helix Versioning Engine within the <filename>//.swarm</filename> depot.
        If you have instead copied the trigger script to your Perforce server's
        filesystem (and to the same path on all edge servers in a commit-edge
        deployment), replace
        <literal>//.swarm/triggers/swarm-trigger.pl</literal> with the path to
        the trigger script.
      </para>
    </note>

    <para>
      Customize each line by replacing <literal>DEPOT_PATH1</literal> or
      <literal>DEPOT_PATH2</literal> with the appropriate depot path where you
      wish to <emphasis>enforce</emphasis> review approvals or to apply a
      <emphasis>strict</emphasis> comparison of review contents.
    </para>

    <para>
      The above lines include two examples of each of the two new trigger
      behaviors. Remove unnecessary lines, or add additional lines for specific
      depot paths as required.
    </para>

    <para>
      It is also possible to configure exemptions to the
      <literal>enforce</literal> and <literal>strict</literal> verifications,
      for the number of files in a review or the filetypes in a review. For
      more information on the trigger's options, see
      <xref linkend="admin.trigger"/>.
    </para>

    <section xml:id="admin.reviews.group_exclusion">
      <title>Group exclusion</title>

      <para>
        You may want to exclude specific users from the enforcement provided by
        these new trigger lines:
      </para>

      <orderedlist>
        <listitem>
          <para>
            Create a group in the Helix Versioning Engine whose members should
            be excluded from <emphasis>enforce</emphasis> or
            <emphasis>strict</emphasis> review restrictions.
          </para>
        </listitem>

        <listitem>
          <para>
            Add users who should be excluded to the group.
          </para>

          <note>
            <para>
              The owner of a group is not counted as a member of the group,
              unless the owner's userid is listed as a user in the group.
            </para>
          </note>
        </listitem>

        <listitem>
          <para>
            Edit the trigger table and add <literal>-g
            <replaceable>group_name</replaceable></literal> to each
            <emphasis>enforce</emphasis> or <emphasis>strict</emphasis> trigger
            line as desired.
          </para>

          <para>
            If the group name is <literal>review_exclusions</literal>, the
            trigger lines would be similar to:
          </para>

<programlisting>
swarm.enforce.1 change-submit  //DEPOT_PATH1/... "%//.swarm/triggers/swarm-trigger.pl% -c %//.swarm/triggers/swarm-trigger.conf% -t enforce -v %change% -p %serverport% -g review_exclusions"
swarm.enforce.2 change-submit  //DEPOT_PATH2/... "%//.swarm/triggers/swarm-trigger.pl% -c %//.swarm/triggers/swarm-trigger.conf% -t enforce -v %change% -p %serverport% -g review_exclusions"
swarm.strict.1  change-content //DEPOT_PATH1/... "%//.swarm/triggers/swarm-trigger.pl% -c %//.swarm/triggers/swarm-trigger.conf% -t strict -v %change% -p %serverport% -g review_exclusions"
swarm.strict.2  change-content //DEPOT_PATH2/... "%//.swarm/triggers/swarm-trigger.pl% -c %//.swarm/triggers/swarm-trigger.conf% -t strict -v %change% -p %serverport% -g review_exclusions"
</programlisting>
        </listitem>
      </orderedlist>
    </section>
  </section>

  <section xml:id="admin.reviews.disable_self_approve">
    <title>Disable self-approval of reviews by authors</title>

    <para>
      The Swarm 2015.2 release provides the ability to disable review approval
      by authors, even if they are moderators or administrators. This is useful
      for development workflows where review by others is of paramount
      importance.
    </para>

    <para>
      To disable review approval by authors, update the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file to
      include the following configuration item within the
      <literal>reviews</literal> block:
    </para>

<programlisting language="php">
        'reviews' =&gt; array(
            'disable_self_approve' =&gt; true,
        ),
</programlisting>

    <para>
      The default value is <literal>false</literal>.
    </para>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.search" xml:base="administration/search.xml">
  <title>Search</title>

  <para>
    Swarm's search feature combines user, group, project, and file path
    searching, with full content indexing provided by the optional Helix Search
    Tool (previously known as P4Search).
  </para>

  <tip>
    <para>
      You can
      <link xlink:href="https://www.perforce.com/downloads/helix#server-components">download
      the Helix Search Tool</link>. See its
      <link xlink:href="https://www.perforce.com/perforce/doc.current/user/p4searchnotes.txt">release
      notes</link> for more information.
    </para>
  </tip>

  <para>
    You configure the Swarm's searching with the following configuration block
    in the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file:
  </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'search' =&gt; array(
        'maxlocktime'     =&gt; 5000, // 5 seconds, in milliseconds
        'p4_search_host'  =&gt; '',   // optional URL to Helix Search Tool
    ),
</programlisting>

  <para>
    The <literal>maxlocktime</literal> key specifies the maximum amount of time,
    in milliseconds, that any table within the Helix Versioning Engine should be
    locked while performing <command>fstat</command> command searching.
    Increasing this value might allow better search results at the expense of
    potentially blocking other queries on the Helix Versioning Engine.
    Decreasing this value impacts the Helix Versioning Engine less, but may be
    insufficient for returning the desired search results.
  </para>

  <para>
    The <literal>p4_search_host</literal> keys specifies the URL to your
    installed Helix Search Tool. When configured, Swarm issues API calls to
    the Helix Search Tool to take advantage of its full content indexing.
  </para>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.security" xml:base="administration/security.xml">
  <title>Security</title>

  <para>
    There are many strategies for securing a Swarm installation. This section
    provides guidance on security features Swarm controls, and recommendations
    for several areas for the system hosting Swarm.
  </para>

  <section xml:id="admin.security.require_login">
    <title>Require login</title>

    <important>
      <para>
        Prior to Swarm's 2016.1 release, <literal>require_login</literal>
        defaulted to <literal>false</literal>. For 2016.1 and later releases,
        the default is <literal>true</literal>.
      </para>
    </important>

    <para>
      By default, Swarm prevents anonymous users from viewing any Helix
      Versioning Engine resources; users must login to see commits, reviews,
      etc.
    </para>

    <para>
      Swarm can be configured to allow anonymous users to access any readable
      resources (creating or editing resources by anonymous users is not
      permitted). Add the following configuration block to the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file,
      at the same level as the <parameter>p4</parameter> entry:
    </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'security' =&gt; array(
        'require_login' =&gt; false, // defaults to true
    ),
</programlisting>

    <para>
      There is one exception: the <literal>/queue/worker</literal> endpoint is
      available to any user.
    </para>

    <note>
      <para>
        <emphasis>service</emphasis> and <emphasis>operator</emphasis> users are
        not permitted to login. For more information on these user types, see
        the
        <citetitle><link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4sag/">Helix
        Versioning Engine Administrator Guide: Fundamentals</link></citetitle>.
      </para>
    </note>
  </section>

  <section xml:id="admin.security.prevent_login">
    <title>Prevent login</title>

    <para>
      When your Helix Versioning Engine has users that should not be able to log
      in to Swarm, for example <emphasis>service</emphasis> users involved with
      Perforce replicas, the <parameter>prevent_login</parameter> configuration
      item can be used to prevent successful authentication.
    </para>

    <para>
      Add or update the following configuration block to the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file,
      at the same level as the <parameter>p4</parameter> entry:
    </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'security' =&gt; array(
        'prevent_login' =&gt; array(
            'service_user1',
            'service_user2',
        ),
    ),
</programlisting>

    <para>
      <parameter>prevent_login</parameter> defaults to
      <literal>array()</literal>, which means no users in your Helix Versioning
      Engine are prevented from logging into Swarm.
    </para>

    <tip>
      <para>
        For more information, see:
        <link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4dist/chapter.replication.html#replication.serviceusers">Helix
        Versioning Engine Administrator Guide: Multi-Site Deployment: Service
        users</link>.
      </para>
    </tip>
  </section>

  <section xml:id="admin.security.sessions">
    <title>Sessions</title>

    <para>
      Swarm manages logged-in sessions using cookies in the browser, and PHP
      session storage on the server. Swarm uses reasonable defaults for the
      cookie and session lifetimes (measured in seconds); when the lifetime is
      exceeded users need to login again. To specify session lifetimes, add the
      following configuration block to the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file, at the same level
      as the <parameter>p4</parameter> entry:
    </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'session' =&gt; array(
        'cookie_lifetime'             =&gt; 0, // 0=expire when browser closed
        'gc_maxlifetime'              =&gt; 60*60*24*30, // 30 days
        'remembered_cookie_lifetime'  =&gt; 60*60*24*30, // 30 days
    ),
</programlisting>

    <variablelist>
      <varlistentry>
        <term>
          <parameter>cookie_lifetime</parameter>
        </term>

        <listitem>
          <para>
            Optional. Limits the lifetime of session cookies, when the
            <guilabel>Remember Me</guilabel> checkbox on the
            <link linkend="basics.login_logout.login">login dialog</link> is
            unchecked. The default is <literal>0</literal>, which causes the
            session cookie to expire when the user's browser is closed.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <parameter>gc_maxlifetime</parameter>
        </term>

        <listitem>
          <para>
            Optional. If a session is inactive for the specified number of
            seconds, it is deleted and the user is logged out. The default is
            <literal>60*60*24*30</literal> seconds (30 days). Note, by default
            the user's Perforce ticket expires after 12 hours, which also causes
            them to be logged out.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <parameter>remembered_cookie_lifetime</parameter>
        </term>

        <listitem>
          <para>
            Optional. Limits the lifetime of session cookies when the
            <guilabel>Remember Me</guilabel> checkbox on the
            <link linkend="basics.login_logout.login">login dialog</link> is
            checked. The default is <literal>60*60*24*30</literal> seconds (30
            days).
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section xml:id="admin.security.x_frame_options">
    <title>X-Frame-Options header</title>

    <para>
      By default, Swarm emits a <literal>X-Frame-Options</literal> HTTP header
      set to <literal>SAMEORIGIN</literal>. This prevents embedding of the Swarm
      interface into other web pages, which avoids
      <emphasis>click-jacking</emphasis> attacks.
    </para>

    <para>
      If your deployment of Swarm needs to be integrated into another web
      interface, you can adjust the <literal>X-Frame-Options</literal> header by
      adjusting the <literal>x_frame_options</literal> item within the
      <literal>security</literal> configuration block, found in the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename>
      file. For example:
    </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'security' =&gt; array(
        'x_frame_options' =&gt; <replaceable>value</replaceable>,
        ),
    ),
</programlisting>

    <para>
      Where <replaceable>value</replaceable> can be one of:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <literal>'SAMEORIGIN'</literal> - Swarm can only be displayed in a
          frame hosted on the same domain.
        </para>
      </listitem>

      <listitem>
        <para>
          <literal>'DENY'</literal> - Swarm cannot be displayed in a frame.
        </para>
      </listitem>

      <listitem>
        <para>
          <literal>'ALLOW-FROM <replaceable>URI</replaceable>'</literal> - Swarm
          can only be displayed in a frame hosted on the specified
        <replaceable>URI</replaceable>.
        </para>
      </listitem>

      <listitem>
        <para>
          <literal>false</literal> - The <literal>X-Frame-Options</literal>
          header is not emitted, so Swarm can be embedded without restriction.
        </para>
      </listitem>
    </itemizedlist>

    <tip>
      <para>
        For more information on the <literal>X-Frame-Options</literal> header,
        see
        <link xlink:href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">this
        Mozilla Developer Network article</link>.<literallayout>
</literallayout>
        For more information on click-jacking attacks, see
        <link xlink:href="https://en.wikipedia.org/wiki/Clickjacking">this
        Wikipedia article</link>.
      </para>
    </tip>
  </section>

  <section xml:id="admin.security.disable_commit">
    <title>Disable commit</title>

    <para>
      Swarm provides the ability to commit reviews within the Swarm interface.
      You may want to disable this capability to prevent reviews from being
      committed by someone other than the review's author. When disabled, the
      <guimenuitem>Approve and Commit</guimenuitem> (and
      <guimenuitem>Commit</guimenuitem> if the review is already approved)
      option is removed from the list of
      <link linkend="code_reviews.states">states</link> available to a code
      review.
    </para>

    <para>
      To disable commits, set <parameter>disable_commit</parameter> to
      <literal>true</literal> within the <parameter>reviews</parameter> item in
      the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file. For example:
    </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'reviews' =&gt; array(
        'disable_commit' =&gt; true,
        ),
    ),
</programlisting>
  </section>

  <section xml:id="admin.security.restricted_changes">
    <title>Restricted Changes</title>

    <para>
      The Helix Versioning Engine provides two changelist types:
      <literal>public</literal> (the default), and
      <literal>restricted</literal>. Swarm honors restricted changelists by
      preventing access to the changelist, and any associated comments or
      activity related to the changelist.
    </para>

    <para>
      If a user has <emphasis>list</emphasis>-level privileges to at least one
      file in the changelist, Swarm allows the user to see the changelist and
      any of the files they have permission to see.
    </para>

    <para>
      To prevent unintended disclosures, email notifications for restricted
      changes are disabled by default. To enable email notifications for
      restricted changes, set <parameter>email_restricted_changes</parameter> to
      <literal>true</literal> within the <parameter>security</parameter> item in
      the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file. For example:
    </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'security' =&gt; array(
        'email_restricted_changes' =&gt; true,
        ),
    ),
</programlisting>

    <note>
      <para>
        When <parameter>email_restricted_changes</parameter> is set to
        <literal>true</literal>, email notifications for restricted changes are
        sent to all interested parties with no permissions screening. These
        notifications might disclose sensitive information.
      </para>

      <para>
        Swarm can only report on changes that the configured
        <emphasis>admin</emphasis>-level user has access to. When using
        restricted changes, we advise that you grant the Swarm
        <emphasis>admin</emphasis>-level user access to the restricted files and
        set
        <literal><link linkend="admin.security.require_login">require_login</link>
        = true</literal> to avoid leaking information to unauthenticated users.
      </para>
    </note>
  </section>

  <section xml:id="admin.security.limit_project_add_admin">
    <title>Limit adding projects to administrators</title>

    <important>
      <para>
        For Swarm 2016.1, the configuration item
        <literal>add_project_admin_only</literal> was moved from the
        <literal>security</literal> block to the
        <link linkend="admin.projects.limit_project_add_admin">projects
        block</link>, and the item was renamed to
        <literal>add_admin_only</literal>.  The functionality of this
        configuration item remains unchanged.
      </para>

      <para>
        If you do not update your <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> configuration file, the old
        configuration for restricting project creation to administrators
        continues to work.
      </para>
      
      <para>
        If you add the new configuration item <literal>add_admin_only</literal>
        to the <literal>projects</literal> block, it takes precedence over any
        remaining <literal>add_project_admin_only</literal> setting in the
        <literal>security</literal> block.
      </para>
    </important>
  </section>

  <section xml:id="admin.security.limit_project_add_group">
    <title>Limit adding projects to members of specific groups</title>

    <important>
      <para>
        For Swarm 2016.1, the configuration item
        <literal>add_project_groups</literal> was moved from the
        <literal>security</literal> block to the
        <link linkend="admin.projects.limit_project_add_group">projects
        block</link>, and the item was renamed to
        <literal>add_groups_only</literal>. The functionality of this
        configuration item remains unchanged.
      </para>

      <para>
        If you do not update your <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> configuration file, the old
        configuration for restricting project creation to specific groups
        continues to work.
      </para>
      
      <para>
        If you add the new configuration item <literal>add_groups_only</literal>
        to the <literal>projects</literal> block, it takes precedence over any
        remaining <literal>add_project_groups</literal> setting in the
        <literal>security</literal> block.
      </para>
    </important>
  </section>

  <section xml:id="admin.security.ip_protections">
    <title>IP address-based protections emulation</title>

    <para>
      A Helix Versioning Engine can be configured via
      <emphasis>protections</emphasis> to restrict access to a depot in a
      variety of ways, including by IP address. As Swarm is a web application
      acting as a client to the Helix Versioning Engine, often with
      <emphasis>admin</emphasis>-level privileges, Swarm needs to emulate IP
      address-based restrictions. It does so by checking the user's IP address
      and applying any necessary restrictions during operations such as browsing
      files, viewing file content, viewing and adding comments on files.
    </para>

    <para>
      Swarm also emulates proxy-based protections, in addition to regular
      IP-based protections emulation. However, Swarm does not detect whether it
      is connecting to a Perforce proxy or not; it merely attempts to emulate
      protections table entries that use proxy syntax.
    </para>

    <para>
      IP address-based protections emulation is enabled by default. Swarm
      performs somewhat faster without this emulation; if you do not require
      them for your Swarm installation these can be disabled by setting the
      configuration:
    </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'security' =&gt; array(
        'emulate_ip_protections' =&gt; false,
    ),
</programlisting>

    <section xml:id="admin.security.limitations">
      <title>Known limitations</title>

      <itemizedlist>
        <listitem>
          <para>
            Notification e-mails for reviews or commits include the list of
            affected files. Swarm cannot reliably know the IP address used to
            retrieve that e-mail, and makes no attempt to filter the files and
            their depot paths nor any details included in the description.
            However, when a user follows a link from the notification e-mail to
            a restricted resource, that access is denied.
          </para>
        </listitem>

        <listitem>
          <para>
            Swarm filters comments from activity streams, but any comments
            created prior to upgrading to the 2013.3 release cannot be filtered
            and may leak sensitive information.
          </para>
        </listitem>

        <listitem>
          <para>
            Swarm displays a comment count in code review queues, code reviews,
            jobs, and activity streams, but the count does not account for any
            comments that may be hidden from the user due to association with
            files the user is restricted from viewing.
          </para>
        </listitem>

        <listitem>
          <para>
            Should Swarm users connect to Swarm via a proxy or VPN, the
            protections will generally use the IP address of the proxy/VPN.
          </para>
        </listitem>

        <listitem>
          <para>
            When the user's IP address and Swarm's IP address both have
            restrictions applied, the user experiences the most constraining of
            the two IP address-based restrictions; Swarm cannot bypass
            restrictions applied to itself.
          </para>
        </listitem>

        <listitem>
          <para>
            Swarm performs a variety of operations with
            <emphasis>admin</emphasis>-level privileges, on behalf of a user.
            Even if the Helix Versioning Engine has IP-based, or userid-based
            protections, installed to prevent access to some or most of its
            versioned data, Swarm typically does have access to this data.
            Therefore, <emphasis>Swarm cannot guarantee that no information
            leakage will occur</emphasis>, particularly when custom modules are
            in use, or Swarm source has been customized.
          </para>
        </listitem>
      </itemizedlist>

      <tip>
        <para>
          For more information, see
          <link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4sag/chapter.security.html#security.authorizing">Helix
          Versioning Engine Administrator Guide: Fundamentals: Authorizing Access</link>.
        </para>
      </tip>
    </section>
  </section>

  <section xml:id="admin.security.disable_system_info">
    <title>Disable system info</title>

    <para>
      Swarm provides a <xref linkend="admin.system_information"/> page,
      available to users with <emphasis>admin</emphasis> or
      <emphasis>super</emphasis> privileges, which displays information about
      the Helix Versioning Engine that Swarm is configured to use, as well as
      PHP information and the Swarm log file.
    </para>

    <para>
      While this information can be invaluable when communicating with Perforce
      support engineers, you may wish to prevent disclosure of any system
      information. The <guilabel>System Information</guilabel> page can be
      disabled for all users by adding the following configuration block to the
      <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file, at the same level as the <parameter>p4</parameter>
      entry:
    </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'security' =&gt; array(
        'disable_system_info' =&gt; true, // defaults to false
    ),
</programlisting>

    <para>
      Once disabled, the <guilabel>System Information</guilabel> link disappears
      from the <xref linkend="basics.notable.about"/> dialog, and
      <literal>403</literal> errors are generated for any attempts to browse to
      the <guilabel>System Information</guilabel> page.
    </para>
  </section>

  <section xml:id="admin.security.http_client_options">
    <title>HTTP client options</title>

    <para>
      Swarm permits configuration of options that are passed through to the
      underlying Zend Framework 2's HTTP client. These options can be used to
      specify SSL certificate locations, request timeouts, and more, and can be
      specified globally or per host.
    </para>

    <para>
      Here is an example configuration:
    </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'http_client_options' =&gt; array(
        'timeout'       =&gt; 5,

        // path to the SSL certificate directory
        'sslcapath'     =&gt; '',

        // the path to a PEM-encoded SSL certificate
        'sslcert'       =&gt; '',

        // the passphrase for the SSL certificate file
        'sslpassphrase' =&gt; '',

        // optional, per-host overrides;
        // host as key, array of options as value
        'hosts'     =&gt; array(
            'jira.example.com'  =&gt; array(
                'sslcapath'     =&gt; '/path/to/certs',
                'sslcert'       =&gt; 'jira.pem',
                'sslpassphrase' =&gt; 'keep my JIRA secure',
                'timeout'       =&gt; 15,
            ),
        ),
    ),
</programlisting>

    <para>
      See the
      <link xlink:href="http://framework.zend.com/manual/2.0/en/modules/zend.http.client.adapters.html#the-socket-adapter">Zend
      Framework 2's Socket Adapter documentation</link> for more information.
    </para>

    <warning>
      <para>
        While it is possible to use a self-signed SSL certificate, adding the
        configuration to do so disables certificate validity checks, making
        connections to the configured host less secure. <emphasis role="bold">We
        strongly recommend against using this configuration option</emphasis>.
      </para>
      
      <para>
        However, if you need to configure continuous integration, deployment, or
        JIRA connections and those connections must use a self-signed SSL
        certificate, set the <literal>sslallowselfsigned</literal> item to
        <literal>true</literal> for the specific host that needs it, as in the
        following example:
      </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'http_client_options' =&gt; array(
        'hosts'     =&gt; array(
            'jira.example.com'  =&gt; array(
                'sslallowselfsigned'  =&gt; true,
            ),
        ),
    ),
</programlisting>
    </warning>
  </section>

  <section xml:id="admin.security.strict_https">
    <title>Strict HTTPS</title>

    <para>
      To improve the security when users work with Swarm, particularly if they
      need to do so outside of your network, Swarm provides a mechanism that
      tries to force web browsers to use <literal>HTTPS</literal>. When enabled,
      Swarm's behavior changes in the following ways:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <literal>HTTP</literal> requests to Swarm include a meta-refresh to
          the <literal>HTTPS</literal> version. If a load balancer handles
          encryption before requests reach Swarm, the meta-refresh should be
          disabled. See
          <link linkend="admin.security.strict_https.redirect">below</link>.
        </para>
      </listitem>

      <listitem>
        <para>
          A strict transport security header is included for all requests, which
          pins the browser to using <literal>HTTPS</literal> for your Swarm
          installation for 30 days.
        </para>
      </listitem>

      <listitem>
        <para>
          All qualified URLs that Swarm produces use <literal>HTTPS</literal>
          for the scheme.
        </para>
      </listitem>

      <listitem>
        <para>
          Cookies are flagged as <literal>HTTPS</literal>-only.
        </para>
      </listitem>
    </itemizedlist>

    <para>
      Here is an example of how to enable strict <literal>HTTPS</literal>:
    </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'security' =&gt; array(
        'https_strict'          =&gt; true,
        'https_strict_redirect' =&gt; true, // optional; set false to avoid meta-refresh
        'https_port'            =&gt; null, // optional; specify if HTTPS is
                                         // configured on a non-standard port
    ),
</programlisting>

    <para xml:id="admin.security.strict_https.redirect">
      When the <parameter>https_strict_redirect</parameter> item is set to
      <literal>false</literal>, Swarm does not add a meta-refresh for
      <literal>HTTP</literal> clients. This prevents an endless redirect when a
      load balancer in front of Swarm applies <literal>HTTPS</literal> to the
      client-to-load balancer connection, but not the load balancer-to-Swarm
      connection.
    </para>
  </section>

  <section xml:id="admin.security.apache">
    <title>Apache security</title>

    <para>
      There are several Apache configuration changes that can improve security
      for Swarm:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <emphasis role="bold">Disable identification</emphasis>
        </para>

        <para>
          By default, each Apache response to a web request includes a list of
          <emphasis>tokens</emphasis> identifying Apache and its version, along
          with any installed modules and their versions.  Also, Apache can add a
          signature line to each response it generates that includes similar
          information. By itself, this identification information is not a
          security risk, but it helps would-be attackers select attacks that
          could be successful.
        </para>

        <para>
          To disable Apache identification, add the following two lines to your
          Apache configuration:
        </para>

<programlisting language="apache">
ServerSignature Off
ServerTokens ProductOnly
</programlisting>
      </listitem>

      <listitem>
        <para>
          <emphasis role="bold">Disable TRACE requests</emphasis>
        </para>

        <para>
          <literal>TRACE</literal> requests cause Apache to respond with all of
          the information it has received, which is useful in a debugging
          environment. <literal>TRACE</literal> can be tricked into divulging
          cookie information, which could compromise the credentials being used
          to login to Swarm.
        </para>

        <para>
          To disable <literal>TRACE</literal> requests, add the following line
          to your Apache configuration:
        </para>

<programlisting language="apache">
TraceEnable off
</programlisting>
      </listitem>

      <listitem>
        <para>
          <emphasis role="bold">Update SSL configuration</emphasis>
        </para>

        <para>
          Swarm works correctly with an SSL-enabled Apache. Several attacks on
          common SSL configurations have been published recently. We recommend
          that you update your Apache configuration with the following lines:
        </para>

<programlisting language="apache">
&lt;IfModule mod_ssl.c&gt;
    SSLHonorCipherOrder On
    SSLCipherSuite ECDHE-RSA-AES128-SHA256:AES128-GCM-SHA256:RC4:HIGH:!MD5:!aNULL:!EDH
    SSLCompression Off
&lt;/IfModule&gt;
</programlisting>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="admin.security.php">
    <title>PHP security</title>

    <para>
      There are several PHP configuration changes that can improve security for
      Swarm:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <emphasis role="bold">Disable identification</emphasis>
        </para>

        <para>
          By default, PHP provides information to Apache that identifies that it
          is participating in a web request, including its version.
        </para>

        <para>
          To disable PHP identification, edit your system's php.ini file and
          change the line setting <parameter>expose_php</parameter> to:
        </para>

<programlisting language="ini">
expose_php = Off
</programlisting>
      </listitem>

      <listitem>
        <para>
          <emphasis role="bold">Remove scripts containing
          <methodname>phpinfo()</methodname></emphasis>
        </para>

        <para>
          During module development or other debugging, you may need to call
          <methodname>phpinfo()</methodname>, which displays PHP's active
          configuration, compilation details, included modules and their
          configuration. Typically, you would add a script to Swarm's public
          directory containing:
        </para>

<programlisting language="php">
&lt;?php phpinfo() ?&gt;
</programlisting>

        <para>
          Any such scripts should be removed from a production instance of
          Swarm.
        </para>
      </listitem>
    </itemizedlist>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.short_links" xml:base="administration/short_links.xml">
  <title>Short links</title>

  <para>
    <xref linkend="basics.notable.short_links"/> work with your Swarm
    installation's current hostname, but you have the option of
    registering/configuring an even shorter hostname to make shareable
    file/directory links as short as possible.
  </para>

  <procedure>
    <step>
      <para>
        Register a short domain name, or if you control your own DNS server, a
        short domain name for your network.
      </para>
    </step>

    <step>
      <para>
        Point the short domain name at your Swarm host.
      </para>
    </step>

    <step>
      <para>
        Edit the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file and add the following configuration block:
      </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'short_links' =&gt; array(
        'hostname'  =&gt; '<replaceable>myho.st</replaceable>',
    ),
</programlisting>

      <para>
        Replace <replaceable>myho.st</replaceable> with the short domain name
        you registered/configured.
      </para>

      <para>
        If your Swarm is configured to use use <xref linkend="setup.post.ssl"/>,
        a <link linkend="setup.post.port">custom port</link>, a
        <link linkend="setup.post.subfolder">sub-folder</link>, or any
        combination of these custom installation options, the short links
        configuration block should look like:
      </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'short_links' =&gt; array(
      'external_url' =&gt; 'https://<replaceable>myho.st</replaceable><replaceable>:port</replaceable><replaceable>/sub-folder</replaceable>',
    ),
</programlisting>

      <para>
        Replace <replaceable>myho.st</replaceable> with the short domain name
        you have registered/configured.
      </para>

      <para>
        If you have not configured Swarm to use HTTPS, replace
        <literal>https://</literal> with <literal>http://</literal>.
      </para>

      <para>
        If you have configured Swarm to run on a custom port, replace
        <replaceable>:port</replaceable> with the correct custom port.
        Otherwise, remove <replaceable>:port</replaceable>.
      </para>

      <para>
        If you have configured Swarm to run in a sub-folder, replace
        <replaceable>/sub-folder</replaceable> with the correct sub-folder name.
        Otherwise, remove <replaceable>/sub-folder</replaceable>.
      </para>

      <important>
        <para>
          The <literal>external_url</literal> configuration item is only
          honored if you have also configured the
          <literal><link linkend="admin.environment.external_url">external_url</link></literal>
          item within the
          <literal><link linkend="admin.environment">environment</link></literal>
          configuration item as well. Otherwise, Swarm could generate short
          links that cannot correctly link to their corresponding full URLs.
        </para>

        <para>
          When <literal>external_url</literal> is configured, the
          <literal>hostname</literal> configuration item is ignored.
        </para>
      </important>
    </step>
  </procedure>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.swarm_root" xml:base="administration/swarm_root.xml">
  <title>swarm_root</title>

  <para>
    <replaceable>swarm_root</replaceable> refers to the directory where
    Swarm lives in the filesystem. Depending on how you installed Swarm,
    the default location could be:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        For a package or OVA installation: <filename>/opt/perforce/swarm</filename>
      </para>
    </listitem>

    <listitem>
      <para>
        For a tarball installation: wherever you unpacked Swarm. If you are
        unsure, you could check your web server's configuration to discover
        where Swarm exists.
      </para>
    </listitem>
  </itemizedlist>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.system_information" xml:base="administration/system_information.xml">
  <title>System Information</title>

  <para>
    <inlinemediaobject>
      <imageobject condition="popup">
        <imagedata fileref="../../assets/html/images/dialog-about_swarm-token.png"/>
      </imageobject>

      <textobject>
        <phrase>About Swarm dialog</phrase>
      </textobject>
    </inlinemediaobject>
    
    The System Information page is available to users with
    <emphasis>admin</emphasis> or <emphasis>super</emphasis> privileges on the
    <xref linkend="basics.notable.about"/> dialog. Click the <guibutton>System
    Information</guibutton> link on the dialog to display the System Information
    page.
  </para>

  <para>
    The System Information page provides details that can be useful to Perforce
    support engineers when you ask them for assistance.
  </para>

  <para>
    <inlinemediaobject>
      <imageobject condition="frame">
        <imagedata fileref="../../assets/html/images/page-system_information.png"/>
      </imageobject>

      <textobject>
        <phrase>The System Information page</phrase>
      </textobject>
    </inlinemediaobject>
  </para>

  <para>
    The initial display is the <guibutton>Perforce</guibutton> tab which
    provides information similar to the p4 info command.
  </para>

  <section xml:id="admin.system_information.log">
    <title>Log</title>

    <para>
      Click the <guibutton>Log</guibutton> tab to display the most recent
      entries, up to 1 megabyte, in Swarm's log file, which resides in
      <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/log</filename>. Review the logging levels for
      <xref linkend="admin.logging.swarm"/> to ensure that the entries you want
      to see are included.
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="frame">
          <imagedata fileref="../../assets/html/images/page-system_information-log.png"/>
        </imageobject>

        <textobject>
          <phrase>The System Information page, showing the Swarm log</phrase>
        </textobject>
      </inlinemediaobject>
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/button-refresh_log.png"/>
        </imageobject>

        <textobject>
          <phrase>Click to refresh the log display</phrase>
        </textobject>
      </inlinemediaobject>

      Click the <guibutton>Refresh Log</guibutton> button to load the latest log
      entries, up to 1 megabyte.
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="thumb">
          <imagedata fileref="../../assets/html/images/button-download_log.png"/>
        </imageobject>

        <textobject>
          <phrase>Click to download the log entries</phrase>
        </textobject>
      </inlinemediaobject>

      Click the <guibutton>Download Log</guibutton> button to download the log
      and all of its log entries.
    </para>

    <para>
      If your log entries include a critical error, an arrow appears:
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="frame">
          <imagedata fileref="../../assets/html/images/thumb-system_information-error.png"/>
        </imageobject>

        <textobject>
          <phrase>A critical error</phrase>
        </textobject>
      </inlinemediaobject>
    </para>

    <para>
      Click the error to display the stack trace that accompanies the error:
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="frame">
          <imagedata fileref="../../assets/html/images/thumb-system_information-error_expanded.png"/>
        </imageobject>

        <textobject>
          <phrase>A critical error's stack trace</phrase>
        </textobject>
      </inlinemediaobject>
    </para>
  </section>

  <section xml:id="admin.system_information.php_info">
    <title>PHP Info</title>

    <para>
      Click the <guibutton>PHP Info</guibutton> tab to display PHP's own
      information display generated by executing
      <methodname>phpinfo()</methodname>, PHP's internal
      <link xlink:href="http://php.net/phpinfo">diagnostic display</link>.
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="frame">
          <imagedata fileref="../../assets/html/images/page-system_information-phpinfo.png"/>
        </imageobject>

        <textobject>
          <phrase>The System Information page, showing PHP Info</phrase>
        </textobject>
      </inlinemediaobject>
    </para>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.trigger" xml:base="administration/trigger.xml">
  <title>Trigger options</title>

  <para>
    The Swarm trigger script, <filename>swarm-trigger.pl</filename>, provides
    the following command line options and configuration items.
  </para>

  <section xml:id="admin.trigger.options">
    <title>Command-line options</title>

    <section xml:id="admin.trigger.options.synopsis">
      <title>Synopsis</title>

<literallayout><command>swarm-trigger.pl -t <replaceable>type</replaceable> -v <replaceable>ID</replaceable> [-p <replaceable>port</replaceable>] [-r] [-g <replaceable>group</replaceable>] [-c <replaceable>config_file</replaceable>]</command>
<command>swarm-trigger.pl -o</command>
<command>swarm-trigger.pl -h</command>
</literallayout>

    </section>

    <section xml:id="admin.trigger.options.informational">
      <title>Informational options</title>

      <para>
        The following options perform no processing, and simply provide
        information useful to a Swarm administrator. These are not intended to
        be used within trigger entries in the Helix Versioning Engine.
      </para>

      <variablelist>
        <varlistentry>
          <term><option>-h</option></term>

          <listitem>
            <para>
              Displays a list of the available options, some guidance on its
              usage, and a copy of the trigger table entries that should be
              configured in the Helix Versioning Engine to execute the script in
              its current path.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>-o</option></term>

          <listitem>
            <para>
              Displays a copy of the trigger table entries that should be
              configured in the Helix Versioning Engine to execute the script in
              its current path.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section xml:id="admin.trigger.options.operational">
      <title>Operational options</title>

      <para>
        The following command-line options are used in the trigger table entries
        in the Helix Versioning Engine to specify how the Swarm trigger script
        should be executed.
      </para>

      <variablelist>
        <varlistentry>
          <term><option>-t <replaceable>type</replaceable></option></term>

          <listitem>
            <para>
              Specifies the type of processing that the trigger script undertakes.
              <replaceable>type</replaceable> can be one of:
            </para>

            <itemizedlist>
              <listitem>
                <para>
                  <emphasis role="bold"><literal>changesave</literal></emphasis>:
                  this type should be used with Perforce
                  <literal>form-save</literal> events for <literal>change</literal>
                  forms, and informs Swarm when a changelist is created or modified.
                </para>
              </listitem>

              <listitem>
                <para>
                  <emphasis role="bold"><literal>commit</literal></emphasis>: this
                  type should be used with Perforce <literal>change-commit</literal>
                  events, and informs Swarm when a changelist is committed.
                </para>
              </listitem>

              <listitem>
                <para>
                  <emphasis role="bold"><literal>enforce</literal></emphasis>: this
                  type is used to verify that commits to specific depot paths are
                  associated with approved reviews. If a commit includes a file
                  within the specified depot path, and it is not associated with a
                  review (or a review that is not approved), the commit is rejected.
                </para>

                <para>
                  Using the <literal>enforce</literal> type prevents users from
                  committing changes to specific depot paths without those
                  changes being reviewed and approved,
                </para>
              </listitem>

              <listitem>
                <para>
                  <emphasis role="bold"><literal>group</literal></emphasis>: this
                  type should be used with Perforce <literal>form-commit</literal>
                  events for <literal>group</literal> forms, and informs Swarm when
                  a group is created or modified.
                </para>
              </listitem>

              <listitem>
                <para>
                  <emphasis role="bold"><literal>groupdel</literal></emphasis>: this
                  type should be used with Perforce <literal>form-delete</literal>
                  events for <literal>group</literal> forms, and informs Swarm when
                  a group is deleted.
                </para>
              </listitem>

              <listitem>
                <para>
                  <emphasis role="bold"><literal>job</literal></emphasis>: this type
                  should be used with Perforce <literal>form-commit</literal> events
                  for <literal>job</literal> forms, and informs Swarm when a job is
                  created or modified.
                </para>
              </listitem>

              <listitem>
                <para>
                  <emphasis role="bold"><literal>shelve</literal></emphasis>: this
                  type should be used with Perforce <literal>shelve-commit</literal>
                  events, and informs Swarm when a changelist is shelved, which can
                  create or update a review.
                </para>
              </listitem>

              <listitem>
                <para>
                  <emphasis role="bold"><literal>strict</literal></emphasis>: this
                  type is used to verify that the file content in a commit matches
                  the file content of its associated approved review. If one or more
                  files in a commit do not match the content of the file in its
                  associated review, the commit is rejected.
                </para>
                
                <para>
                  Using the <literal>strict</literal> type prevents users from
                  making changes to the file content after a review has been
                  approved and then submitting the unapproved changes.
                </para>

                <note>
                  <para>
                    <literal>strict</literal> implies
                    <literal>enforce</literal>.
                  </para>
                </note>
              </listitem>

              <listitem>
                <para>
                  <emphasis role="bold"><literal>user</literal></emphasis>: this
                  type should be used with Perforce <literal>form-commit</literal>
                  events for <literal>user</literal> forms, which informs Swarm when
                  a user is added or modified.
                </para>
              </listitem>

              <listitem>
                <para>
                  <emphasis role="bold"><literal>userdel</literal></emphasis>: this
                  type should be used with Perforce <literal>form-delete</literal>
                  events for <literal>user</literal> forms, which informs Swarm when
                  a user is deleted.
                </para>
              </listitem>
            </itemizedlist>

            <important>
              <para>
                You cannot mix Swarm trigger types with unrelated Perforce events;
                the behavior is undetermined, and the information required for each
                type of processing may not be available to the trigger.
              </para>
            </important>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>-v <replaceable>ID</replaceable></option></term>

          <listitem>
            <para>
              Specifies <replaceable>ID</replaceable>, which is the identifier for
              the current trigger type.
            </para>
            
            <para>
              When the <replaceable>type</replaceable> is <literal>job</literal>,
              <literal>user</literal>, <literal>userdel</literal>,
              <literal>group</literal>, <literal>groupdel</literal>, or
              <literal>changesave</literal>, <replaceable>ID</replaceable> should be
              <literal>%formname%</literal> to specify the specific form identifier
              Swarm should process.
            </para>
              
            <para>
              When the <replaceable>type</replaceable> is <literal>shelve</literal>,
              <literal>commit</literal>, <literal>enforce</literal>, or
              <literal>strict</literal>, <replaceable>ID</replaceable> should be
              <literal>%change%</literal> to specify the specific changelist Swarm
              should process.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>-p <replaceable>port</replaceable></option> (optional)</term>

          <listitem>
            <para>
              Specifies the Helix Versioning Engine port
              (<envar>P4PORT</envar>). This value is optional, and is only used
              for types <literal>enforce</literal> or <literal>strict</literal>
              as the trigger has to run its own commands against the Helix
              Versioning Engine during its processing.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>-r</option> (optional)</term>

          <listitem>
            <para>
              Specifies that, when types <literal>enforce</literal> or
              <literal>strict</literal> are being processed, the verifications
              should only be performed on commits that are currently in review.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <option>-g <replaceable>group</replaceable></option> (optional)
          </term>

          <listitem>
            <para>
              Specifies a <replaceable>group</replaceable> to exclude from
              <literal>enforce</literal> or <literal>strict</literal>
              verifications. Members of the <replaceable>group</replaceable>
              (including sub-groups) are not subject to <literal>enforce</literal>
              or <literal>strict</literal> verifications.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <option>-c <replaceable>config_file</replaceable></option> (optional)
          </term>

          <listitem>
            <para>
              Specifies an optional <replaceable>config_file</replaceable> which
              is used to specify configuration items.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>

  <section xml:id="admin.trigger.configuration_items">
    <title>Configuration items</title>

    <para>
      The following configuration items are used in the
      <filename>swarm-trigger.conf</filename> (or another file, if the
      <option>-c</option> option is used in the trigger entries).
    </para>

    <variablelist>
      <varlistentry>
        <term><literal>SWARM_HOST</literal> (required)</term>

        <listitem>
          <para>
            Specifies the host URL of your Swarm instance, with the leading
            <literal>http://</literal> or <literal>https://</literal>. For
            example: <literal>https://myswarm.url</literal>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>SWARM_TOKEN</literal> (required)</term>

        <listitem>
          <para>
            A token used when talking to Swarm. To obtain the token, log into
            Swarm as a user with <emphasis>super</emphasis> privileges and
            select <guilabel><xref linkend="basics.notable.about"/></guilabel>
            from the user menu in the main navigation bar.
          </para>

          <para>
            You can also manually create additional tokens. Tokens are empty
            files stored within
            <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/queue/tokens</filename> (the filename is
            the token and is reported on the
            <guilabel><xref linkend="basics.notable.about"/></guilabel> dialog),
            that should be readable by the web server.
          </para>
          
          <para>
            You might manually create additional tokens to allow other processes
            to talk to Swarm, such as JIRA build tasks, and to selectively
            invalidate access to Swarm without interfering with regular Swarm
            operations.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>ADMIN_USER</literal> (optional)</term>

        <listitem>
          <para>
            When <literal>enforce</literal> or <literal>strict</literal>
            verifications are to be performed, you may need specify a username
            of a user in the Helix Versioning Engine that has
            <emphasis>admin</emphasis> privileges. If you do not specify a
            username, the trigger script uses the Perforce user set in the
            environment.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>ADMIN_TICKET_FILE</literal> (optional)</term>

        <listitem>
          <para>
            When <literal>enforce</literal> or <literal>strict</literal>
            verifications are to be performed, you may need specify the path
            to the <filename>.p4tickets</filename> file, if your Helix
            Versioning Engine tickets file is not the default
            <filename>$HOME/.p4tickets</filename>.
          </para>

          <important>
            <para>
              Ensure that the ticket belongs to a user with
              <emphasis>admin</emphasis> privileges in the Helix Versioning
              Engine, and is a member of a group with an
              <literal>unlimited</literal> or very long ticket timeout. If this
              user's authentication times out, <literal>enforce</literal> and
              <literal>strict</literal> verifications stop working.
            </para>
          </important>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>P4_PORT</literal> (optional)</term>

        <listitem>
          <para>
            When <literal>enforce</literal> or <literal>strict</literal>
            verifications are to be performed, you may need to set the port
            value (<envar>P4PORT</envar>) of the Helix Versioning Engine,
            particularly if the Helix Versioning Engine is on a non-standard
            port, or if the Helix Versioning Engine is not using the default
            hostname.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>P4</literal> (optional)</term>

        <listitem>
          <para>
            Specifies the full path to <command>p4</command>, the Perforce
            command-line client. This is only required when
            <command>p4</command> is not found in the <envar>PATH</envar> of the
            Helix Versioning Engine's environment, and when
            <literal>enforce</literal> or <literal>strict</literal>
            verifications are to be performed.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>EXEMPT_FILE_COUNT</literal> (optional)</term>

        <listitem>
          <para>
            When set to a positive integer, commits with a file count greater or
            equal to this value are exempt from <literal>enforce</literal> or
            <literal>strict</literal> verifications.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>EXEMPT_EXTENSIONS</literal> (optional)</term>

        <listitem>
          <para>
            A comma-separated list of file extensions. Commits with files having
            <emphasis>only</emphasis> these extensions are exempt from
            <literal>enforce</literal> or <literal>strict</literal>
            verifications.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.unapprove_modified" xml:base="administration/unapprove_modified.xml">
  <title>Unapprove modified reviews</title>

  <para>
    By default, when an approved review is committed or updated, Swarm changes
    the state to <guilabel>Needs Review</guilabel> if the files have been
    modified since the review was approved.
  </para>

  <para>
    If one or more files in a review has the filetype <literal>+k</literal>
    (<literal>ktext</literal>), this behavior is undesirable because the files
    will appear to be modified as the Helix Versioning Engine replaces RCS
    keywords with their current values.
  </para>

  <para>
    This behavior can be disabled. Edit the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file, and add or update
    the <parameter>unapprove_modified</parameter> item to
    <literal>false</literal>, within the <parameter>reviews</parameter>
    configuration block. For example:
  </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'reviews' =&gt; array(
        'unapprove_modified'  =&gt; false,
    ),
</programlisting>

  <tip>
    <para>
      For for information on file types, see:
      <link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/cmdref/file.types.html">P4
      Command Reference: File Types</link>.
    </para>
  </tip>

</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.uninstall" xml:base="administration/uninstall.xml">
  <title>Uninstall Swarm</title>

  <para>
    This section covers the steps required to uninstall Swarm.
  </para>

  <section xml:id="admin.uninstall.background">
    <title>Background</title>

    <para>
      The bulk of Swarm's metadata (activity, comments, review records,
      followers) is stored in p4 keys under <literal>swarm-*</literal>. If you
      are using a 2012.1+ server, Swarm also defines user groups for each
      project that you define. The names of these groups correspond 1-to-1 with
      projects, for example <literal>swarm-project-fantastico</literal>. Swarm
      manages a pool of client workspaces that it uses to shelve and commit
      files. These clients are named
      <filename>swarm-<replaceable>{uuid}</replaceable></filename>, for example
      <filename>swarm-5ad4a9c0-06e7-20eb-897f-cbd4cc934295</filename>.
    </para>
  </section>

  <section xml:id="admin.uninstall.steps">
    <title>Uninstall steps</title>

    <orderedlist>
      <listitem>
        <para>
          Uninstall the Swarm triggers
        </para>
      </listitem>

      <listitem>
        <para>
          Remove your web server's virtual host configuration for Swarm.
        </para>
      </listitem>

      <listitem>
        <para>
          Restart your web server.
        </para>
      </listitem>

      <listitem>
        <para>
          Delete groups/clients/keys that are prefixed with
          <literal>swarm-*</literal>.
        </para>

        <note>
          <para>
            The clients could contain shelved files for reviews. Determine how
            you want to handle those files prior to deleting the clients.
          </para>
        </note>
      </listitem>

      <listitem>
        <para>
          Additional indexed information is stored in the database file
          <literal>db.ixtext</literal>. Unfortunately, indexed jobs and other
          generic indexed information would be lost if this table was simply
          removed, and modifying the database file can be a dangerous operation
          in a number of Helix Versioning Engine deployment scenarios.
        </para>
        
        <important>
          <para>
            Contact Perforce support for assistance if you feel the need to
            remove Swarm's indexed information:
            <email>support@perforce.com</email>.
          </para>
        </important>
      </listitem>

      <listitem>
        <para>
          Rebuild the job index. The best approach is to run:
        </para>

<programlisting>
$ <command>p4 jobs -R</command>
</programlisting>

        <para>
          which rebuilds the <literal>db.ixtext</literal> table. There are two
          caveats that likely require discussion with
          <email>support@perforce.com</email>:
        </para>

        <orderedlist numeration="loweralpha">
          <listitem>
            <para>
              If you make use of the unsupported <command>p4 index</command>
              command, you <emphasis role="bold">cannot</emphasis> use this
              approach, as it would remove all of your indexes.
            </para>
          </listitem>

          <listitem>
            <para>
              If you have indexing turned on for the domain table, you must also
              run:
            </para>

<programlisting>
$ <command>p4d -xf index.domain.owner</command>
</programlisting>
          </listitem>
        </orderedlist>
      </listitem>
    </orderedlist>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="admin.workers" xml:base="administration/workers.xml">
  <title>Workers</title>

  <para>
    Helix Swarm uses background processes, called <emphasis>workers</emphasis>,
    to respond to events in the Helix Versioning Engine. The default number of
    workers is 3, and each worker processes events for up to 10 minutes. When a
    worker terminates, a new one is spawned.
  </para>

  <note>
    <para>
      Each worker maintains a connection to the Helix Versioning Engine for the
      duration of its lifetime. This may impact your Helix Versioning Engine
      management practices.
    </para>
  </note>

  <section xml:id="admin.workers.status">
    <title>Worker status</title>

    <para>
      To determine the current status of workers, visit the URL:
    </para>

<programlisting>
https://<replaceable>myswarm.url</replaceable>/queue/status
</programlisting>

    <para>
      The response is formatted in JSON, and looks like this:
    </para>

<programlisting language="json">
{"tasks":0,"futureTasks":1,"workers":3,"maxWorkers":3,"workerLifetime":"595s"}
</programlisting>

    <para>
      During normal use of Swarm, the following error message appears for
      logged-in users when Swarm detects that no workers are running:
    </para>

    <para>
      <inlinemediaobject>
        <imageobject condition="frame">
          <imagedata fileref="../../assets/html/images/screen-no_workers.png"/>
        </imageobject>

        <textobject>
          <phrase>
            The error message that appears when there are no running workers.
          </phrase>
        </textobject>
      </inlinemediaobject>
    </para>
  </section>

  <section xml:id="admin.workers.configuration">
    <title>Worker configuration</title>

    <para>
      To adjust the configuration for workers, add a configuration block to the
      <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file:
    </para>

<programlisting language="php">
&lt;?php
    // this block should be a peer of 'p4'
    'queue'  =&gt; array(
        'workers'             =&gt; 3,    // defaults to 3
        'worker_lifetime'     =&gt; 595,  // defaults to 10 minutes (less 5 seconds)
        'worker_task_timeout' =&gt; 1800, // defaults to 30 minutes
        'worker_memory_limit' =&gt; '1G', // defaults to 1 gigabyte
    ),
</programlisting>

    <para>
      <parameter>workers</parameter> specifies the number of worker processes
      that should be available. The default is 3. The
      <link linkend="setup.worker">cron job</link> ensures that new worker
      processes are started when necessary. If the limit is reached or exceeded,
      new worker processes are not started.
    </para>

    <para>
      <parameter>worker_lifetime</parameter> specifies the amount of time in
      seconds that a worker process should run for. The default is 595 seconds
      (10 minutes less 5 seconds). If a worker process exceeds this limit while
      processing a task, it will complete the active task and then terminate.
      <parameter>worker_lifetime</parameter> does not cause tasks to terminate
      mid-processing.
    </para>

    <para>
      <parameter>worker_task_timeout</parameter> specifies the maximum amount of
      time in seconds that a worker process can spend processing a single task.
      The default is 1800 seconds (30 minutes). This is useful for terminating
      workers that might get stalled in a variety of situations.
    </para>

    <para>
      <parameter>worker_memory_limit</parameter> specifies the maximum amount of
      memory that a worker process is allowed to use while processing a task.
      The default is <literal>1G</literal> (1 gigabyte).
    </para>
  </section>

  <section xml:id="admin.workers.manual_start">
    <title>Manually start workers</title>

    <para>
      To kick off a new worker process, visit the URL:
    </para>

<programlisting>
https://<replaceable>myswarm.url</replaceable>/queue/worker
</programlisting>

    <para>
      When the number of workers running matches the configured limit, the
      requested worker process is not started.
    </para>

    <note>
      <para>
        This technique does start a worker, but it lasts only for its configured
        lifetime. Typically, you would always want at least one worker running.
        See <xref linkend="setup.worker"/> for details.
      </para>
    </note>
  </section>

  <section xml:id="admin.workers.restart">
    <title>Manually restart workers</title>

    <para>
      To restart an idle worker process, remove its lock file:
    </para>

<programlisting>
rm data/queue/workers/<replaceable>worker_id</replaceable>
</programlisting>

    <para>
      A worker process that is busy processing a task will continue operation
      until its task is complete. Immediately afterwards, if the worker notices
      that its lock file is missing it exits.
    </para>
    
    <para>
      If you have a recurring task to start workers, the recurring task starts a
      fresh worker, if necessary. See <xref linkend="setup.worker"/> for
      details.
    </para>
  </section>
</section>
</chapter>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><chapter version="5.0" xml:id="chapter.extending" xml:base="extending/index.xml">
  <title>Extending Swarm</title>

  <para>
    Helix Swarm is built with open source technologies, using modern development
    methods, resulting in a platform that is capable, modular, and can be
    extended in a variety of ways. While this section is currently incomplete,
    it does identify the technologies that make up Swarm and provides notes
    regarding some of the available extension points.
  </para>

  <itemizedlist>
    <listitem>
      <para>
        <xref linkend="extending.resources"/>
      </para>
    </listitem>

    <listitem>
      <para>
        <xref linkend="extending.development"/>
      </para>
    </listitem>

    <listitem>
      <para>
        <xref linkend="extending.modules"/>
      </para>
    </listitem>

    <listitem>
      <para>
        <xref linkend="extending.example_linkify"/>
      </para>
    </listitem>

    <listitem>
      <para>
        <xref linkend="extending.example_email"/>
      </para>
    </listitem>

    <listitem>
      <para>
        <xref linkend="extending.clients"/>
      </para>
    </listitem>
  </itemizedlist>

  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="extending.resources" xml:base="extending/resources.xml">
  <title>Resources</title>

  <para>
    Swarm is built with a number of different technologies. As such it can be a
    bit of a challenge to ramp up on if you haven't done web development before.
    This section lists some of the best resources we've found for learning how
    to develop for Swarm.
  </para>

  <section xml:id="extending.resources.jquery">
    <title>jQuery</title>

    <itemizedlist>
      <listitem>
        <para>
          A free three hour course on jQuery basics. Highly recommended if
          you haven't used jQuery before. It also covers some JavaScript
          and CSS basics:
        </para>

        <tip>
          <para>
            <link xlink:href="http://try.jquery.com/"/>
          </para>
        </tip>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="extending.resources.javascript">
    <title>JavaScript Resources</title>

    <itemizedlist>
      <listitem>
        <para>
          A free, in-browser Javascript course:
        </para>

        <tip>
          <para>
            <link xlink:href="https://www.codecademy.com/tracks/javascript-combined"/>
          </para>
        </tip>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="extending.resources.php">
    <title>PHP Resources</title>

    <itemizedlist>
      <listitem>
        <para>
          A free PHP tutorial:
        </para>

        <tip>
          <para>
            <link xlink:href="http://www.w3schools.com/php/default.asp"/>
          </para>
        </tip>
      </listitem>

      <listitem>
        <para>
          A handy PHP cheat sheet:
        </para>

        <tip>
          <para>
            <link xlink:href="https://i.emezeta.com/weblog/emezeta-php-card-v0.2.png"/>
          </para>
        </tip>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="extending.resources.zf2">
    <title>Zend Framework 2 Resources</title>

    <itemizedlist>
      <listitem>
        <para>
          An intense tutorial, but it does cover most of the basics:
        </para>

        <tip>
          <para>
            <link xlink:href="http://framework.zend.com/manual/2.0/en/user-guide/overview.html"/>
          </para>
        </tip>
      </listitem>

      <listitem>
        <para>
          Really nice high level architecture overview by a Zend engineer:
        </para>

        <tip>
          <para>
            <link xlink:href="https://speakerdeck.com/ezimuel/mvc-plus-events-plus-modules-the-new-architecture-of-zf2">https://speakerdeck.com/ezimuel/mvc-plus-events-plus-modules-the-new-architecture-of-zf2</link>
          </para>
        </tip>
      </listitem>
    </itemizedlist>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="extending.development" xml:base="extending/development.xml">
  <title>Development mode</title>

  <para>
    Swarm has a <emphasis>development</emphasis> mode that, when enabled,
    changes Swarm's behavior in the following ways:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        CSS and JavaScript code is not aggregated. Each CSS or JavaScript file
        is fetched individually, which makes it much easier to identify where
        styles or functions exist and how they apply to Swarm. Due to the
        additional HTTP requests, development mode should not be used in
        production environments.
      </para>
    </listitem>

    <listitem>
      <para>
        Errors and exceptions that may occur are displayed in Swarm's UI. This
        is particularly useful to developers of Swarm modules. As the error
        information might disclose system paths or configuration, development
        mode should not be used in production environments.
      </para>
    </listitem>
  </itemizedlist>

  <section xml:id="extending.development.enable">
    <title>To enable development mode</title>

    <para>
      Adjust the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file to include:
    </para>

<programlisting language="php">
&lt;?php
    return array(
        'p4' =&gt; ...
        'environment'   =&gt; array(
            'mode'  =&gt; 'development'
        )
    );
</programlisting>
  </section>

  <section xml:id="extending.development.disable">
    <title>To disable development mode</title>

    <para>
      Adjust the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/data/config.php</filename> file to exclude the <literal>'mode' =&gt;
      'development'</literal> line.
    </para>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="extending.modules" xml:base="extending/modules.xml">
  <title>Modules</title>

  <para>
    A Swarm module is a folder that exists within the
    <filename>modules</filename> folder within your Swarm installation, where
    the folder name matches the module's name, and that folder must contain (at
    a minimum) a <filename>Module.php</filename> file. The file
    <filename>Module.php</filename> describes the dependencies, namespace,
    events subscriptions, and otherwise how the module integrates with Swarm.
  </para>

  <para>
    This chapter provides only cursory coverage of how modules integrate with
    Swarm. Refer to the included <literal>Jira</literal> module for a good
    example of a simple module implementation within Swarm:
  </para>

<programlisting>
<replaceable>swarm_install</replaceable>/module/Jira
</programlisting>

  <section xml:id="extending.modules.influence">
    <title>Influence activity events, emails, etc.</title>

    <para>
      When something occurs in Perforce (change submitted, files shelved, job
      added/edited), or state changes within Swarm (comment added, review state
      changed, etc.), the event is pushed onto a task queue. A background worker
      process subsequently pulls events off of the queue and publishes an event
      alerting modules about activity they may be interested in processing. This
      architecture allows the Swarm user interface to be fairly quick while
      accommodating tasks that might require notable processing time, or need to
      wait for related information to become available.
    </para>

    <para>
      Subscribers to the worker event flesh the item out (fetch the change/job
      details, for example) and indicate if it should result in an activity
      entry, email notification, etc. By subscribing to various event topics,
      your module can pay attention to specific types of events. While your
      module is processing an event, it can modify the text of activity events,
      change the contents of emails, drop things entirely from activity, etc.
    </para>

    <para>
      When your module subscribes to an event, set the priority to influence how
      early or late in the process it runs. You will likely want your module to
      run after most other modules have done their work to flesh out the
      event, but before Swarm's activity module processes it. The activity
      module sets a good example of subscribing to these events:
    </para>

<programlisting>
<replaceable>swarm_install</replaceable>/module/Activity/Module.php
</programlisting>

    <para>
      Note that its priority is set to -100. Select a value before that
      for your own module (for example, 0 would be neutral and -90 would
      indicate that you are interested in being last).
    </para>

    <para>
      The activity module listens to all events. However, be more
      selective. For example, if you are only interested in changes,
      subscribe to <literal>task.change</literal> instead of
      <literal>*</literal>. Current task types are:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <literal>task.change</literal>
        </para>
      </listitem>

      <listitem>
        <para>
          <literal>task.shelve</literal>
        </para>
      </listitem>

      <listitem>
        <para>
          <literal>task.review</literal>
        </para>
      </listitem>

      <listitem>
        <para>
          <literal>task.comment</literal>
        </para>
      </listitem>

      <listitem>
        <para>
          <literal>task.job</literal>
        </para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="extending.modules.templates">
    <title>Templates</title>

    <para>
      Override existing view templates using your custom module. Have a look at
      an <link linkend="extending.example_email">example module</link> that
      demonstrates how to customize the email templates Swarm uses for comment
      notifications.
    </para>

    <tip>
      <para>
        For more information about views, see the
        <link xlink:href="http://framework.zend.com/manual/2.1/en/modules/zend.view.quick-start.html">Zend/View
        Quick Start</link>.
      </para>
    </tip>
  </section>

  <section xml:id="extending.modules.view_helpers">
    <title>View helpers</title>

    <section xml:id="extending.modules.view_helpers.options">
      <title>Set options on existing helpers</title>

      <para>
        It is possible to influence the behavior of existing view helpers by
        setting options on them; for an example see:
        <filename><replaceable>swarm_install</replaceable>/module/Application/Module.php</filename>
      </para>
    </section>

    <section xml:id="extending.modules.view_helpers.register">
      <title>Register new helpers</title>

      <para>
        It is also possible to register new view helpers by placing them
        within your module's hierarchy, for example,
        <filename>MyModule/src/MyModule/View/Helper/Foo.php</filename>. Use the
        following Swarm view helper for inspiration:
        <filename><replaceable>swarm_install</replaceable>/module/Activity/src/Activity/View/Helper/Activity.php</filename>
      </para>

      <para>
        Then register your view helper with the view manager via your
        <literal>ModuleConfig</literal>:
        <filename><link linkend="admin.swarm_root"><replaceable>swarm_root</replaceable></link>/module/Activity/config/module.config.php</filename>
      </para>
    </section>
  </section>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="extending.example_linkify" xml:base="extending/example_linkify.xml">
  <title>Example linkify module</title>

  <para>
    The following example module demonstrates how to turn text that appears in
    changelist, job, or code review descriptions, comments, and activity entries
    into links.
  </para>

  <orderedlist>
    <listitem>
      <para>
        Create a folder called Rickroll in the module folder.
      </para>
    </listitem>

    <listitem>
      <para>
        Create the file <filename>Module.php</filename> within
        <filename>module/Rickroll</filename> and edit it to contain:
      </para>

<programlisting language="php">
&lt;?php
/**
 * Helix Swarm
 *
 * @copyright   2014 Perforce Software. All rights reserved.
 * @license     Please see LICENSE.txt in top-level folder of this distribution.
 * @version     &lt;release&gt;/&lt;patch&gt;
 */

namespace Rickroll;

use Application\Filter\Linkify;

class Module
{
  public function onBootstrap()
  {
    Linkify::addCallback(
      function ($value, $escaper) {
        if (strcasecmp($value, 'rickroll')) {
          // not a hit; tell caller we did not handle this one
          return false;
        }

        return '&lt;a target="_new" href="https://www.youtube.com/watch?v=dQw4w9WgXcQ"&gt;'
               . $escaper-&gt;escapeHtml($value) . "&lt;/a&gt;";
      },
      'rickroll',
      strlen('rickroll')
    );
  }

  public function getConfig()
  {
    return array();
  }
}
</programlisting>

      <para>
        This file achieves several things. It:
      </para>

      <itemizedlist>
        <listitem>
          <para>
            makes the <filename>Rickroll</filename> folder a recognized module.
          </para>
        </listitem>

        <listitem>
          <para>
            declares the module's namespace, which matches the module's folder
            name <filename>Rickroll</filename>.
          </para>
        </listitem>

        <listitem>
          <para>
            provides an <methodname>onBootstrap()</methodname> method that
            allows the module's configuration to be established immediately
            after the module is loaded
          </para>
        </listitem>

        <listitem>
          <para>
            Adds a callback to the Linkify module that declares what text is to
            be searched for (<literal>rickroll</literal>) and, when found, how
            to compose the link for that text.
          </para>
        </listitem>
      </itemizedlist>
    </listitem>
  </orderedlist>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="extending.example_email" xml:base="extending/example_email.xml">
  <title>Example email module</title>

  <para>
    The following example module demonstrates how to customize the email
    template Swarm uses when sending notifications for comments.
  </para>

  <orderedlist>
    <listitem>
      <para>
        Create a folder called Example in the module folder.
      </para>
    </listitem>

    <listitem>
      <para>
        Create the file <filename>Module.php</filename> within
        <filename>module/Example</filename> and edit it to contain:
      </para>

<programlisting language="php">
&lt;?php

namespace Example;
use Zend\Mvc\MvcEvent;

/**
 * Automatically uses any custom email templates found under this
 * module's view/mail folder (e.g. Example/view/mail/commit-html.phtml).
 *
 * Valid templates include:
 *
 *   commit-html.phtml (HTML version of commit notification)
 *   commit-text.phtml (text version of commit notification)
 *  comment-html.phtml (HTML version of comment notification)
 *  comment-text.phtml (text version of comment notification)
 *   review-html.phtml (HTML version of review notification)
 *   review-text.phtml (text version of review notification)
 *
 * Note: you need to provide custom templates for both HTML and text;
 * if you do not provide both, it is possible that the search for
 * customized templates only finds the non-customized versions, making
 * it appear that this module is not working.
 */
class Module
{
    public function onBootstrap(MvcEvent $event)
    {
        $application = $event-&gt;getApplication();
        $services    = $application-&gt;getServiceManager();
        $events      = $services-&gt;get('queue')-&gt;getEventManager();

        $events-&gt;attach(
            '*',
            function ($event) {
                $mail = $event-&gt;getParam('mail');
                if (!$mail || !isset($mail['htmlTemplate'], $mail['textTemplate'])) {
                    return;
                }

                $html = __DIR__ . '/view/mail/' . basename($mail['htmlTemplate']);
                $text = __DIR__ . '/view/mail/' . basename($mail['textTemplate']);

                if (file_exists($html)) {
                    $mail['htmlTemplate'] = $html;
                }
                if (file_exists($text)) {
                    $mail['textTemplate'] = $text;
                }

                $event-&gt;setParam('mail', $mail);
            },
            -199
        );
    }
}
</programlisting>

      <para>
        This file achieves several things. It:
      </para>

      <itemizedlist>
        <listitem>
          <para>
            makes the <filename>Example</filename> folder a recognized module.
          </para>
        </listitem>

        <listitem>
          <para>
            declares the module's namespace, which matches the module's folder
            name <filename>Example</filename>.
          </para>
        </listitem>

        <listitem>
          <para>
            provides an <methodname>onBootstrap()</methodname> method that
            allows the module's configuration to be established immediately
            after the module is loaded
          </para>
        </listitem>

        <listitem>
          <para>
            attaches to events, looking for <literal>mail</literal> events. When
            such an event is encountered, it provides local paths for HTML and
            text-only view scripts.
          </para>
        </listitem>

        <listitem>
          <para>
            declares an event priority of <literal>-199</literal>.  Since, email
            delivery events are processed with a priority of
            <literal>-200</literal>, this module's templates should override any
            that may have been set elsewhere, and this occurs just prior to
            email delivery.
          </para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>
        Create a folder called <filename>view</filename> in the
        <filename>module/Example</filename> folder.
      </para>
    </listitem>

    <listitem>
      <para>
        Create a folder called <filename>mail</filename> in the
        <filename>module/Example/view</filename> folder.
      </para>
    </listitem>

    <listitem>
      <para>
        Create the file <filename>comment-html.phtml</filename> within
        <filename>module/Example/view/mail</filename> and edit it to contain:
      </para>

<programlisting language="php">
&lt;?php
    $user       = $activity-&gt;get('user');
    $userLink   = $user
                ? $this-&gt;qualifiedUrl('user', array('user' =&gt; $user))
                : null;
    $targetLink = $activity-&gt;getUrl($this-&gt;plugin('qualifiedUrl'));
?&gt;
&lt;html&gt;
  &lt;body style="font-family: sans-serif; background-color: #eee; padding: 1em;"&gt;
    &lt;div style="background-color: #fff; border: 1px solid #ccc; padding: 1em;"&gt;
      &lt;div style="font-size: 115%;"&gt;
        &lt;?php if ($user): ?&gt;
          &lt;a style="text-decoration: none;" href="&lt;?php echo $userLink ?&gt;"&gt;
            &lt;?php echo $this-&gt;escapeHtml($user) ?&gt;
          &lt;/a&gt;
        &lt;?php endif; ?&gt;
        &lt;?php echo $this-&gt;escapeHtml($activity-&gt;get('action')) ?&gt;
        &lt;a style="text-decoration: none;" href="&lt;?php echo $targetLink ?&gt;"&gt;
          &lt;?php echo $this-&gt;escapeHtml($activity-&gt;get('target'))?&gt;
        &lt;/a&gt;
      &lt;/div&gt;
      &lt;br/&gt;
      &lt;?php
          // if the comment has file context, show it.
          $comment = $event-&gt;getParam('comment');
          $context = $comment
                   ? $comment-&gt;getFileContext()
                   : array('content' =&gt; null, 'line' =&gt; null);
          if (is_array($context['content']) &amp;&amp; $context['line']) {
              $line = $context['line'] - count($context['content']) + 1;
              echo '&lt;div style="font-family: monospace; white-space: nowrap;'
                  . ' padding: .5em 1em; overflow-x: auto; color: #444;'
                  . ' border: 1px solid #ddd; background-color: #f7f7f7;"&gt;';
              foreach ((array) $context['content'] as $i =&gt; $content) {
                  echo '&lt;div&gt;&lt;span style="color: #999;"&gt;'
                      . str_pad($line + $i,
                                strlen($context['line']),
                                "0",
                                STR_PAD_LEFT
                        )
                      . '.&lt;/span&gt;&amp;nbsp;'
                      . $this-&gt;preformat($content)
                             -&gt;setLinkify(false)
                             -&gt;setEmojify(false)
                             -&gt;setWordWrap(900)
                      . "&lt;/div&gt;\n";
              }
              echo '&lt;/div&gt;&lt;br/&gt;';
          }
      ?&gt;
      &lt;div style="padding-bottom: .5em;"&gt;
      &lt;?php
          echo $this-&gt;preformat($activity-&gt;get('description'))
                    -&gt;setBaseUrl($this-&gt;qualifiedUrl())
                    -&gt;setEmojify(false)
                    -&gt;setWordWrap(900)
      ?&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</programlisting>

      <para>
        This is a view script that provides the content for the HTML portion of
        the comment notification email. Note that it is considered best practice
        to use inline CSS for styling emails.
      </para>
    </listitem>

    <listitem>
      <para>
        Create the file <filename>comment-text.phtml</filename> within
        <filename>module/Example/view/mail</filename> and edit it to contain:
      </para>

<programlisting language="php">
&lt;?php
    echo trim($activity-&gt;get('user')
        . ' commented on '
        . $activity-&gt;get('target'));

    // if the comment has file context, show it.
    $comment = $event-&gt;getParam('comment');
    $context = $comment
             ? $comment-&gt;getFileContext()
             : array('content' =&gt; null);
    if (is_array($context['content'])) {
        echo "\n\n&gt; " . $this-&gt;wordWrap(
            implode("\n&gt; ", $context['content']), 900
        );
    }

    echo "\n\n" . trim($this-&gt;wordWrap($activity-&gt;get('description'), 900));
    echo "\n\n" . $activity-&gt;getUrl($this-&gt;plugin('qualifiedUrl'));
?&gt;
</programlisting>

      <para>
        This is a view script that provides the content for the text-only
        portion of the comment notification email.
      </para>
    </listitem>
  </orderedlist>

  <para>
    If you need to customize any other types of Swarm notification email
    messages, locate the view scripts (both HTML and text) and copy them into
    <filename>module/Example/view/mail</filename>, maintaining the existing
    filenames, then modify the new files as desired.
  </para>

  <note>
    <para>
      If you do not copy both the HTML and text templates, it is possible for
      the search for customized templates to only find non-customized versions,
      making it appear that your module is not working.
    </para>
  </note>
</section>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><section version="5.0" xml:id="extending.clients" xml:base="extending/clients.xml">
  <title>CSS &amp; JavaScript</title>

  <para>
    Custom CSS and JavaScript files will be loaded automatically if you place
    them under either:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/custom/<replaceable>*.(css|js)</replaceable></filename>
      </para>
    </listitem>

    <listitem>
      <para>
        <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/custom/<replaceable>sub-folder</replaceable>/<replaceable>*.(css|js)</replaceable></filename>
      </para>
    </listitem>
  </itemizedlist>

  <note>
    <para>
      Swarm only supports customizations placed directly within the
      <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/custom</filename> folder or one sub-folder down.
      Customizations are added after all standard CSS and JavaScript. If more
      than one custom file is present they are added in alphabetical order.
    </para>

    <para>
      Prior to creating any customizations, ensure that the
      <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/custom</filename> folder exists; Swarm does
      not ship with or create this folder.
    </para>
  </note>

  <section xml:id="extending.clients.javascript">
    <title>Sample Javascript extensions</title>

    <para>
      The following are example Javascript customizations that you might wish to
      apply to your Swarm installation. Each example can be implemented
      separately. Ideally, you would apply the Javascript customizations in a
      single file to reduce the number of web requests required.
    </para>

    <caution>
      <para>
        Coding errors in your custom JavaScript files could cause the Swarm UI
        to stop working. If this occurs, use your browser's development tools to
        identify which file contains the problem, and move that file out of the
        <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/custom</filename> folder. When the problem
        has been resolved, the file can be returned.
      </para>
    </caution>

    <section xml:id="extending.clients.javascript.created">
      <title>Make the Created column on the Reviews page clickable</title>

<programlisting language="javascript">
$(document).on( 'click', '.reviews-table td.created', function() {
    var change = $(this).closest('tr').data('id');
    window.location = '/reviews/' + change;
});

</programlisting>

      <para>
        Save these lines in a file, perhaps
        <filename>reviews-created-clickable.js</filename>, within the
        <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/custom</filename> folder. Swarm
        automatically includes the JavaScript file, making the entries in the
        <emphasis>Created</emphasis> column clickable immediately for all for
        subsequent review page views.
      </para>
    </section>

    <section xml:id="extending.clients.javascript.morecontext">
      <title>Adjust the number of "more context" lines for diffs</title>

<programlisting language="javascript">
swarm.diff.moreContextLines = <replaceable>25</replaceable>;
</programlisting>

      <para>
        Replace the <replaceable>25</replaceable> with the number of lines of
        context that should be retrieved each time the <emphasis>more
        context</emphasis> bar is clicked when viewing a diff.
      </para>

      <para>
        Save this line in a file, perhaps
        <filename>more-context-lines.js</filename>, within the
        <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/custom</filename> folder. Swarm
        automatically includes the JavaScript file, adjusting the number of
        <emphasis>more context</emphasis> lines immediately for subsequent page
        views.
      </para>

      <note>
        <para>
          Try to avoid making this value arbitrarily large, as the file being
          diffed could be very large; users wouldn't expect to see the entire
          file when clicking the <emphasis>more context</emphasis> bar. If you
          need to see the whole file, click the <guibutton>Show full
          context</guibutton> icon.
        </para>
      </note>
    </section>

    <section xml:id="extending.clients.javascript.reviewstate">
      <title>Customize the review state options text</title>

<programlisting language="javacript">
var original = swarm.review.buildStateMenu;
swarm.review.buildStateMenu = function(){
   original();
   var needsReview = $('.icon-review-needsReview').parent();
   needsReview.html(needsReview.html().replace(
     'Needs Review', '<replaceable>You need to review</replaceable>'
   ));
}
</programlisting>

      <para>
        Replace the <replaceable>You need to review</replaceable> with the text
        you'd prefer to see instead of <literal>Needs Review</literal>.
      </para>

      <para>
        Save this line in a file, perhaps
        <filename>customize-review-states.js</filename>, within the
        <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/custom</filename> folder. Swarm
        automatically includes the JavaScript file, adjusting the text of the
        review states immediately for subsequent page views.
      </para>
    </section>
  </section>

  <section xml:id="extending.clients.css">
    <title>Sample CSS customizations</title>

    <para>
      The following are example CSS customizations that you might wish to apply
      to your Swarm installation. Each example can be implemented separately.
      Ideally, you would apply the CSS customizations in a single file to reduce
      the number of web requests required.
    </para>

    <section xml:id="extending.clients.css.tabsize">
      <title>Adjust the default tab size</title>

<programlisting language="CSS">
body {
    tab-size: <replaceable>4</replaceable>;
}
</programlisting>

      <para>
        Replace the <replaceable>4</replaceable> with the tab size you prefer.
      </para>

      <para>
        Save these lines in a file, perhaps <filename>tab-size.css</filename>,
        within the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/custom</filename> folder. Swarm
        automatically includes the CSS file, adjusting the tab size immediately
        for subsequent page views.
      </para>
    </section>

    <section xml:id="extending.clients.css.loginbg">
      <title>Apply a custom background to the login screen</title>

<programlisting language="CSS">
body.route-login {
    background: url("<replaceable>/custom/login_background.jpg</replaceable>") no-repeat center fixed;
}
</programlisting>

      <para>
        Replace the <replaceable>/custom/login_background.jpg</replaceable> URL
        fragment with image you want to use. If you do not specify a full URL,
        the image you specify must exist within the
        <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public</filename> folder, preferably within the
        <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/custom</filename> folder.
      </para>

      <para>
        Save these lines in a file, perhaps
        <filename>login-background.css</filename>, within the
        <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/custom</filename> folder. Swarm
        automatically includes the CSS file, immediately replacing the login
        screen's background for subsequent page views.
      </para>
    </section>

    <section xml:id="extending.clients.css.navbar_logo">
      <title>Replace Swarm's logo in the main navigation bar</title>

<programlisting language="CSS">
.navbar-site .brand {
    background: url("<replaceable>/custom/navbar_logo.jpg</replaceable>") no-repeat center;
}
</programlisting>

      <para>
        Replace the <replaceable>/custom/navbar_logo.jpg</replaceable> URL
        fragment with image you want to use. If you do not specify a full URL,
        the image you specify must exist within the
        <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public</filename> folder, preferably within the
        <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/custom</filename> folder.
      </para>

      <para>
        Save these lines in a file, perhaps
        <filename>navbar-logo.css</filename>, within the
        <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/custom</filename> folder. Swarm
        automatically includes the CSS file, immediately replacing the login
        screen's background for subsequent page views.
      </para>

      <note>
        <para>
          Swarm's navbar design supports logos up to 24 pixels tall. Even if your
          logo fits within that height, you may need to also adjust the width,
          height, margins, or padding to suit your logo.
        </para>
      </note>
    </section>

    <section xml:id="extending.clients.css.avatar">
      <title>Adjust the appearance of avatars</title>

<programlisting language="CSS">
img.avatar {
    border: 2px dashed red;
    border-radius: 10%;
}
</programlisting>

      <para>
        You can make a number of adjustments to the way Swarm presents avatars,
        such as adding a border and adjusting the border radius, as the example
        above demonstrates. You should avoid attempting to set specific sizes
        because Swarm uses different sizes depending on where the avatar is
        displayed.
      </para>

      <para>
        Save these lines in a file, perhaps <filename>avatars.css</filename>,
        within the <filename><link linkend="admin.swarm_root"><replaceable>SWARM_ROOT</replaceable></link>/public/custom</filename> folder. Swarm
        automatically includes the CSS file, immediately replacing the login
        screen's background for subsequent page views.
      </para>
    </section>
  </section>
</section>
</chapter>
  <chapter xml:id="api" version="5.0" xml:base="api-generated.xml">
  <title>Swarm API</title>

<simpara>This chapter describes the REST-like API provided by Swarm, which can be used to
automate common Swarm interactions or integrate with external systems.</simpara>
<bridgehead xml:id="api.authentication" renderas="sect1">Authentication</bridgehead>
<simpara>Swarm’s API requires an authenticated connection for all data-modifying
endpoints. Authenticated connections are achieved using HTTP Basic Access
Authentication.</simpara>
<note>
<simpara>If the <link linkend="admin.security.require_login"><literal>require_login</literal></link> configuration flag
is set to <literal>true</literal>, all API endpoints require authentication.</simpara>
</note>
<simpara>For example:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ <literal><emphasis role="strong">curl -u "<emphasis>apiuser</emphasis>:<emphasis>password</emphasis>" https://<emphasis>myswarm.url</emphasis>/api/v4/projects</emphasis></literal></programlisting>
<simpara>Swarm accepts a ticket from the Helix Versioning Engine, which is either
host-unlocked or locked to the Swarm host. It may also be possible to use a
password in place of the ticket.</simpara>
<simpara>To acquire a ticket, run the following command:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ <literal><emphasis role="strong">p4 -p <emphasis>myp4host:1666</emphasis> -u <emphasis>apiuser</emphasis> login -p</emphasis></literal></programlisting>
<simpara>To acquire a host-unlocked ticket, run the following command:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ <literal><emphasis role="strong">p4 -p <emphasis>myp4host:1666</emphasis> -u <emphasis>apiuser</emphasis> login -ap</emphasis></literal></programlisting>
<important>
<simpara>For a Helix Versioning Engine that has been configured for security level
3, passwords are not accepted.</simpara>
<simpara>For more information on security levels, see:<?asciidoc-br?>
<link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4sag/chapter.superuser.html#DB5-49899">Helix
Versioning Engine Administrator Guide: Fundamentals</link></simpara>
</important>
<note>
<simpara>If you use a ticket to authenticate against the Swarm API and the ticket
expires, you need to acquire a new ticket to continue using the API.</simpara>
</note>
<simpara>If you make a request that requires authentication and you have not
authenticated, the response is:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "error": "Unauthorized"
}</programlisting>
<bridgehead xml:id="_requests" renderas="sect1">Requests</bridgehead>
<simpara>Swarm’s API includes endpoints that provide, create, and update information
within Swarm.</simpara>
<simpara>If you make a request against an endpoint that is not supported, the
response is:</simpara>
<programlisting language="bash" linenumbering="unnumbered">{
  "error": "Method Not Allowed"
}</programlisting>
<bridgehead xml:id="_get_information" renderas="sect2">GET information</bridgehead>
<simpara>Use HTTP &lt;literal&gt;GET&lt;/literal&gt; requests to ask for information from the API.</simpara>
<simpara>For example, to get the list of reviews:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ <literal><emphasis role="strong">curl https://<emphasis>myswarm.url</emphasis>/api/v4/reviews</emphasis></literal></programlisting>
<simpara>Certain API calls support a <literal>fields</literal> parameter that allows you to specify which
fields to include in the response, enabling more compact data sets. The
following endpoints support fields:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>/api/v4/projects</literal></simpara>
</listitem>
<listitem>
<simpara><literal>/api/v4/reviews</literal></simpara>
</listitem>
<listitem>
<simpara><literal>/api/v4/reviews/{id}</literal></simpara>
</listitem>
</itemizedlist>
<simpara>Fields can be expressed as a comma-separated list, or using array-notation. For
example:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ <literal><emphasis role="strong">curl 'https://<emphasis>myswarm.url</emphasis>/api/v4/reviews?fields=id,description,participants'</emphasis></literal></programlisting>
<simpara>Or:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ <literal><emphasis role="strong">curl 'https://<emphasis>myswarm.url</emphasis>/api/v4/reviews?fields[]=id,fields[]=description,fields[]=participants'</emphasis></literal></programlisting>
<bridgehead xml:id="_post_new_information" renderas="sect2">POST new information</bridgehead>
<simpara>Use HTTP &lt;literal&gt;POST&lt;/literal&gt; requests to create information via the API.</simpara>
<simpara>For example, to create a review using form-encoded values:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ <literal><emphasis role="strong">curl -u "<emphasis>apiuser</emphasis>:<emphasis>password</emphasis>" -d"change=<emphasis>12345</emphasis>" https://<emphasis>myswarm.url</emphasis>/api/v4/reviews</emphasis></literal></programlisting>
<simpara>The response should be similar to:</simpara>
<screen>{
  "isValid": true,
  "id": 12206
}</screen>
<simpara>To create a review using JSON:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ <literal><emphasis role="strong">curl -u "<emphasis>apiuser</emphasis>:<emphasis>password</emphasis>" -H "Content-type: application/json" \
  -d'{"change": <emphasis>12345</emphasis>}' https://<emphasis>myswarm.url</emphasis>/api/v4/reviews</emphasis></literal></programlisting>
<bridgehead xml:id="_update" renderas="sect2">Update</bridgehead>
<simpara>Use HTTP &lt;literal&gt;PATCH&lt;/literal&gt; requests to update information via the API.</simpara>
<simpara>If your HTTP client does not support <literal>PATCH</literal> requests, you can emulate this
behavior by submitting an HTTP <literal>POST</literal> with a <literal>"?_method=PATCH"</literal> parameter.</simpara>
<bridgehead xml:id="_pagination" renderas="sect1">Pagination</bridgehead>
<simpara>Most Swarm endpoints that provide data include the ability to paginate their
results.</simpara>
<simpara>Each time data is requested, up to <literal>max</literal> results are included in the
response, as is a value called <literal>lastSeen</literal>. <literal>lastSeen</literal> identifies the <literal>id</literal> of the
last entry included in the results. If there are no further results, <literal>lastSeen</literal>
is <literal>null</literal>.</simpara>
<simpara>To get the next set of results, include <literal>after</literal> set to the value of <literal>lastSeen</literal>
in the API request. Entries up to and including the <literal>id</literal> specified by <literal>after</literal> are
excluded from the response, and the next <literal>max</literal> entries are included.</simpara>
<simpara>See the
<link linkend="api.endpoints.Activity.listActivity.usageExamples">Activity endpoint</link> for
example usage that demonstrates pagination.</simpara>
<bridgehead xml:id="_responses" renderas="sect1">Responses</bridgehead>
<simpara>Swarm’s API responses are JSON formatted.</simpara>
<bridgehead xml:id="_api_versions" renderas="sect1">API versions</bridgehead>
<simpara>The current Swarm API version is <literal>v4</literal>. Here is a list of historical API
versions:</simpara>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="16.6666*"/>
<colspec colname="col_2" colwidth="16.6666*"/>
<colspec colname="col_3" colwidth="16.6666*"/>
<colspec colname="col_4" colwidth="50.0002*"/>
<thead>
<row>
<entry align="left" valign="top">API version</entry>
<entry align="left" valign="top">Swarm Release</entry>
<entry align="left" valign="top">Date</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>v4</simpara></entry>
<entry align="left" valign="top"><simpara>2016.2</simpara></entry>
<entry align="left" valign="top"><simpara>September 2016</simpara></entry>
<entry align="left" valign="top"><simpara>Include support for private projects, as well as file-level and line-level
  inline comments.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>v3</simpara></entry>
<entry align="left" valign="top"><simpara>2016.1 SP1</simpara></entry>
<entry align="left" valign="top"><simpara>September 2016</simpara></entry>
<entry align="left" valign="top"><simpara>Include new endpoint for comments.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>v2</simpara></entry>
<entry align="left" valign="top"><simpara>2016.1</simpara></entry>
<entry align="left" valign="top"><simpara>May 2016</simpara></entry>
<entry align="left" valign="top"><simpara>Include new endpoints for projects, groups, etc.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>v1.2</simpara></entry>
<entry align="left" valign="top"><simpara>2015.3</simpara></entry>
<entry align="left" valign="top"><simpara>October 2015</simpara></entry>
<entry align="left" valign="top"><simpara>Add author filter to the list reviews endpoint.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>v1.1</simpara></entry>
<entry align="left" valign="top"><simpara>2014.4</simpara></entry>
<entry align="left" valign="top"><simpara>January 2015</simpara></entry>
<entry align="left" valign="top"><simpara>Addition of required reviewers, and <literal>apiVersions</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>v1</simpara></entry>
<entry align="left" valign="top"><simpara>2014.3</simpara></entry>
<entry align="left" valign="top"><simpara>July 2014</simpara></entry>
<entry align="left" valign="top"><simpara>Initial release.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<section xml:id="api.endpoints">
<title>API Endpoints</title>
<simpara>This section includes coverage for each of the major endpoints provided by the
API.</simpara>
<section xml:id="api.endpoints.Activity">
<title>Activity : Swarm Activity List</title>
<section xml:id="api.endpoints.Activity.listActivity">
<title>GET /api/v4/activity</title>
<simpara role="summary">Summary: List Activity Entries</simpara>
<section xml:id="api.endpoints.Activity.listActivity.notes">
<title>Description</title>
<simpara>Retrieve the Activity List.</simpara>
</section>
<section xml:id="api.endpoints.Activity.listActivity.parameters">
<title>Parameters</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="6">
<colspec colname="col_1" colwidth="11.1111*"/>
<colspec colname="col_2" colwidth="44.4444*"/>
<colspec colname="col_3" colwidth="11.1111*"/>
<colspec colname="col_4" colwidth="11.1111*"/>
<colspec colname="col_5" colwidth="11.1111*"/>
<colspec colname="col_6" colwidth="11.1112*"/>
<thead>
<row>
<entry align="left" valign="top">Parameter</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Parameter Type</entry>
<entry align="left" valign="top">Required</entry>
<entry align="left" valign="top">Default Value</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>change</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Optionally filter activity entries by associated Changelist ID. This only includes records for which there is an activity entry in Swarm.</simpara></entry>
<entry align="left" valign="top"><simpara>integer</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"/>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>stream</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Optional activity stream to query for entries. This can include user-initiated actions (<literal>user-alice</literal>), activity relating to a user’s followed projects/users (<literal>personal-alice</literal>), review streams (<literal>review-1234</literal>), and project streams (<literal>project-exampleproject</literal>).</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"/>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>type</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Type of activity, e.g., <literal>change</literal>, <literal>comment</literal>, <literal>job</literal>, or <literal>review</literal>.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"/>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>after</literal></simpara></entry>
<entry align="left" valign="top"><simpara>An activity ID to seek to. Activity entries up to and including the specified ID are excluded from the results and do not count towards <literal>max</literal>. Useful for pagination. Commonly set to the <literal>lastSeen</literal> property from a previous query.</simpara></entry>
<entry align="left" valign="top"><simpara>integer</simpara></entry>
<entry align="left" valign="top"><simpara>query</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"/>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>max</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Maximum number of activity entries to return. This does not guarantee that <literal>max</literal> entries are returned. It does guarantee that the number of entries returned won’t exceed <literal>max</literal>. Server-side filtering may exclude some activity entries for permissions reasons.</simpara></entry>
<entry align="left" valign="top"><simpara>integer</simpara></entry>
<entry align="left" valign="top"><simpara>query</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"><simpara>100</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>fields</literal></simpara></entry>
<entry align="left" valign="top"><simpara>An optional comma-separated list (or array) of fields to show. Omitting this parameter or passing an empty value shows all fields.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>query</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"/>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="api.endpoints.Activity.listActivity.successExamples">
<title>Successful Response:</title>
<programlisting language="json" linenumbering="unnumbered">HTTP/1.1 200 OK

{
  "activity": [
    {
      "id": 123,
      "action": "committed",
      "behalfOf": null,
      "behalfOfExists": false,
      "change": 1,
      "date": "2016-01-15T12:12:12-08:00",
      "depotFile": null,
      "description": "test\n",
      "details": [],
      "followers": [],
      "link": ["change", {"change": 1}],
      "preposition": "into",
      "projectList": {"restricted": ["main"]},
      "projects": {"restricted": ["main"]},
      "streams": ["review-2", "user-foo", "personal-foo", "project-restricted"],
      "target": "change 1",
      "time": 1404776681,
      "topic": "changes/1",
      "type": "change",
      "url": "/changes/1",
      "user": "bruno",
      "userExists": true
    }
  ],
  "lastSeen": 1
}</programlisting>
</section>
<section xml:id="api.endpoints.Activity.listActivity.usageExamples">
<title>Examples of usage</title>
<bridgehead xml:id="_fetching_review_history" renderas="sect4">Fetching review history</bridgehead>
<simpara>To get the latest activity entries on a review:</simpara>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" "https://myswarm.url/api/v4/activity?stream=review-1234\
&amp;fields=id,date,description,type\
&amp;max=2"</programlisting>
<simpara>You can tweak <literal>max</literal> and <literal>fields</literal> to fetch the data that works best for you.</simpara>
<simpara>Swarm responds with an array of activity entities, and a <literal>lastSeen</literal> value that can be used for pagination:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "activity": [
    {
      "id": 10,
      "date": "2016-04-15T16:10:32-07:00",
      "description": "This is a test comment.",
      "type": "comment"
    },
    {
      "id": 9,
      "date": "2016-03-31T13:48:15-07:00",
      "description": "Updating RELNOTE review",
      "type": "review"
    }
  ],
  "lastSeen": 9
}</programlisting>
<bridgehead xml:id="_activity_pagination" renderas="sect4">Activity pagination</bridgehead>
<simpara>To get the second page of activity entries for a review (based on the previous example):</simpara>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" "https://myswarm.url/api/v4/activity?stream=review-1234\
&amp;fields=id,date,description,type\
&amp;max=2\
&amp;lastSeen=9"</programlisting>
<simpara>Swarm again responds with a list of activity entities and a <literal>lastSeen</literal> value:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "activity": [
    {
      "id": 8,
      "date": "2016-03-30T12:12:12-07:00",
      "description": "This is the first test comment.",
      "type": "comment"
    },
    {
      "id": 7,
      "date": "2016-03-29T12:13:14-07:00",
      "description": "Updating RELNOTE review",
      "type": "review"
    }
  ],
  "lastSeen": 7
}</programlisting>
</section>
</section>
<section xml:id="api.endpoints.Activity.addActivity">
<title>POST /api/v4/activity</title>
<simpara role="summary">Summary: Create Activity Entry</simpara>
<section xml:id="api.endpoints.Activity.addActivity.notes">
<title>Description</title>
<simpara>Creates an entry in the Activity List. Note: admin-level privileges are required for this action.</simpara>
</section>
<section xml:id="api.endpoints.Activity.addActivity.parameters">
<title>Parameters</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="5">
<colspec colname="col_1" colwidth="12.5*"/>
<colspec colname="col_2" colwidth="50*"/>
<colspec colname="col_3" colwidth="12.5*"/>
<colspec colname="col_4" colwidth="12.5*"/>
<colspec colname="col_5" colwidth="12.5*"/>
<thead>
<row>
<entry align="left" valign="top">Parameter</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Parameter Type</entry>
<entry align="left" valign="top">Required</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>type</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Type of activity, used for filtering activity streams (values can include <literal>change</literal>, <literal>comment</literal>, <literal>job</literal>, <literal>review</literal>).</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>user</literal></simpara></entry>
<entry align="left" valign="top"><simpara>User who performed the action.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>action</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Action that was performed - past-tense, e.g., <literal>created</literal> or <literal>commented on</literal>.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>target</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Target that the action was performed on, e.g., <literal>issue 1234</literal>.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>topic</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Optional topic for the activity entry. Topics are essentially comment thread IDs. Examples: <literal>reviews/1234</literal> or <literal>jobs/job001234</literal>.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>description</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Optional description of object or activity to provide context.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>change</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Optional changelist ID this activity is related to. Used to filter activity related to restricted changes.</simpara></entry>
<entry align="left" valign="top"><simpara>integer</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>streams[]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Optional array of streams to display on. This can include user-initiated actions (<literal>user-alice</literal>), activity relating to a user’s followed projects/users (<literal>personal-alice</literal>), review streams (<literal>review-1234</literal>), and project streams (<literal>project-exampleproject</literal>).</simpara></entry>
<entry align="left" valign="top"><simpara>array (of strings)</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>link</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Optional URL for <literal>target</literal>.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="api.endpoints.Activity.addActivity.successExamples">
<title>Successful Response:</title>
<programlisting language="json" linenumbering="unnumbered">HTTP/1.1 200 OK

{
  "activity": {
    "id": 123,
    "action": "ate",
    "behalfOf": null,
    "change": null,
    "depotFile": null,
    "details": [],
    "description": "",
    "followers": [],
    "link": "",
    "preposition": "for",
    "projects": [],
    "streams": [],
    "target": "the manual",
    "time": 1404776681,
    "topic": "",
    "type": "comment",
    "user": "A dingo"
  }
}</programlisting>
</section>
<section xml:id="api.endpoints.Activity.addActivity.usageExamples">
<title>Examples of usage</title>
<bridgehead xml:id="_creating_an_activity_entry" renderas="sect4">Creating an activity entry</bridgehead>
<simpara>To create a plain activity entry:</simpara>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" -d "type=job" -d "user=jira" -d "action=punted" -d "target=review 123" \
     "https://myswarm.url/api/v4/activity"</programlisting>
<simpara>JSON Response:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "activity": {
    "id": 1375,
    "action": "punted",
    "behalfOf": null,
    "change": null,
    "depotFile": null,
    "description": "",
    "details": [],
    "followers": [],
    "link": "",
    "preposition": "for",
    "projects": [],
    "streams": [],
    "target": "review 123",
    "time": 1461607739,
    "topic": "",
    "type": "job",
    "user": "jira"
  }
}</programlisting>
<bridgehead xml:id="_linking_an_activity_entry_to_a_review" renderas="sect4">Linking an activity entry to a review</bridgehead>
<simpara>Linking activity entries to reviews is useful. This involves providing <literal>link</literal>, <literal>stream</literal>, and <literal>topic</literal> fields in
the activity data. The <literal>link</literal> field is used to make the <literal>review 123</literal> string in the activity entry clickable.
The <literal>stream</literal> field is needed so that the activity entry can be attached to the review in the Swarm interface.
The <literal>topic</literal> field is used to link the activity entry to the comment thread for that topic, in the event that a
user wants to comment on the activity.</simpara>
<simpara>To create a fully linked activity entry:</simpara>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" -d "type=job" -d "user=jira" -d "action=punted" -d "target=review 123" \
     -d "streams[]=review-123" \
     -d "link=reviews/123" \
     -d "topic=reviews/123" \
     "https://myswarm.url/api/v4/activity"</programlisting>
<simpara>Swarm responds with an activity entity:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "activity": {
    "id": 1375,
    "action": "punted",
    "behalfOf": null,
    "change": null,
    "depotFile": null,
    "description": "",
    "details": [],
    "followers": [],
    "link": "reviews/123",
    "preposition": "for",
    "projects": [],
    "streams": ["review-123"],
    "target": "review 123",
    "time": 1461607739,
    "topic": "reviews/123",
    "type": "job",
    "user": "jira"
  }
}</programlisting>
</section>
</section>
</section>
<section xml:id="api.endpoints.Comments">
<title>Comments : Swarm Comments</title>
<section xml:id="api.endpoints.Comments.getComments">
<title>GET /api/v4/comments/</title>
<simpara role="summary">Summary: Get List of Comments</simpara>
<section xml:id="api.endpoints.Comments.getComments.notes">
<title>Description</title>
<simpara>List comments.</simpara>
</section>
<section xml:id="api.endpoints.Comments.getComments.parameters">
<title>Parameters</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="6">
<colspec colname="col_1" colwidth="11.1111*"/>
<colspec colname="col_2" colwidth="44.4444*"/>
<colspec colname="col_3" colwidth="11.1111*"/>
<colspec colname="col_4" colwidth="11.1111*"/>
<colspec colname="col_5" colwidth="11.1111*"/>
<colspec colname="col_6" colwidth="11.1112*"/>
<thead>
<row>
<entry align="left" valign="top">Parameter</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Parameter Type</entry>
<entry align="left" valign="top">Required</entry>
<entry align="left" valign="top">Default Value</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>after</literal></simpara></entry>
<entry align="left" valign="top"><simpara>A comment ID to seek to. Comments up to and including the specified ID are excluded from the results and do not count towards <literal>max</literal>. Useful for pagination. Commonly set to the <literal>lastSeen</literal> property from a previous query.</simpara></entry>
<entry align="left" valign="top"><simpara>integer</simpara></entry>
<entry align="left" valign="top"><simpara>query</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"/>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>max</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Maximum number of comments to return. This does not guarantee that <literal>max</literal> comments are returned. It does guarantee that the number of comments returned won’t exceed <literal>max</literal>.</simpara></entry>
<entry align="left" valign="top"><simpara>integer</simpara></entry>
<entry align="left" valign="top"><simpara>query</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"><simpara>100</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>topic</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Only comments for given topic are returned. Examples: <literal>reviews/1234</literal>, <literal>changes/1234</literal> or <literal>jobs/job001234</literal>.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>query</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"/>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>fields</literal></simpara></entry>
<entry align="left" valign="top"><simpara>An optional comma-separated list (or array) of fields to show for each comment. Omitting this parameter or passing an empty value shows all fields.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>query</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"/>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="api.endpoints.Comments.getComments.successExamples">
<title>Examples of successful responses</title>
<bridgehead xml:id="_successful_response" renderas="sect4">Successful Response:</bridgehead>
<programlisting language="json" linenumbering="unnumbered">HTTP/1.1 200 OK

{
  "topic": "",
  "comments": {
    "51": {
      "id": 51,
      "attachments": [],
      "body": "Short loin ground round sin reprehensible, venison west participle triple.",
      "context": [],
      "edited": null,
      "flags": [],
      "likes": [],
      "taskState": "comment",
      "time": 1461164347,
      "topic": "reviews/885",
      "updated": 1461164347,
      "user": "bruno"
    }
  },
  "lastSeen": 51
}</programlisting>
<note>
<simpara><literal>lastSeen</literal> can often be used as an offset for pagination, by using the value
in the <literal>after</literal> parameter of subsequent requests.</simpara>
</note>
<bridgehead xml:id="_when_no_results_are_found_the_literal_comments_literal_array_is_empty" renderas="sect4">When no results are found, the <literal>comments</literal> array is empty:</bridgehead>
<programlisting language="json" linenumbering="unnumbered">HTTP/1.1 200 OK

{
  "topic": "jobs/job000011",
  "comments": [],
  "lastSeen": null
}</programlisting>
</section>
<section xml:id="api.endpoints.Comments.getComments.usageExamples">
<title>Examples of usage</title>
<bridgehead xml:id="_listing_comments" renderas="sect4">Listing comments</bridgehead>
<simpara>To list comments:</simpara>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" "https://my-swarm-host/api/v4/comments\
?topic=reviews/911&amp;max=2&amp;fields=id,body,time,user"</programlisting>
<simpara>Swarm responds with a list of the first two comments for review 911 and a <literal>lastSeen</literal> value for pagination:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "topic": "reviews/911",
  "comments": {
    "35": {
      "id": 35,
      "body": "Excitation thunder cats intelligent man braid organic bitters.",
      "time": 1461164347,
      "user": "bruno"
    },
    "39": {
      "id": 39,
      "body": "Chamber tote bag butcher, shirk truffle mode shabby chic single-origin coffee.",
      "time": 1461164347,
      "user": "swarm_user"
    }
  },
  "lastSeen": 39
}</programlisting>
<bridgehead xml:id="_paginating_a_comment_listing" renderas="sect4">Paginating a comment listing</bridgehead>
<simpara>To obtain the next page of a comments list (based on the previous example):</simpara>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" "https://my-swarm-host/api/v4/comments\
?topic=reviews/911&amp;max=2&amp;fields=id,body,time,user&amp;after=39"</programlisting>
<simpara>Swarm responds with the second page of results, if any comments are present after the last seen comment:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "topic": "reviews/911",
  "comments": {
    "260": {
      "id": 260,
      "body": "Reprehensible do lore flank ham hock.",
      "time": 1461164349,
      "user": "bruno"
    },
    "324": {
      "id": 324,
      "body": "Sinter lo-fi temporary, nihilist tote bag mustache swag consequence interest flexible.",
      "time": 1461164349,
      "user": "bruno"
    }
  },
  "lastSeen": 324
}</programlisting>
</section>
</section>
<section xml:id="api.endpoints.Comments.addComment">
<title>POST /api/v4/comments/</title>
<simpara role="summary">Summary: Add A Comment</simpara>
<section xml:id="api.endpoints.Comments.addComment.notes">
<title>Description</title>
<simpara>Add a comment to a topic (such as a review or a job)</simpara>
</section>
<section xml:id="api.endpoints.Comments.addComment.parameters">
<title>Parameters</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="6">
<colspec colname="col_1" colwidth="11.1111*"/>
<colspec colname="col_2" colwidth="44.4444*"/>
<colspec colname="col_3" colwidth="11.1111*"/>
<colspec colname="col_4" colwidth="11.1111*"/>
<colspec colname="col_5" colwidth="11.1111*"/>
<colspec colname="col_6" colwidth="11.1112*"/>
<thead>
<row>
<entry align="left" valign="top">Parameter</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Parameter Type</entry>
<entry align="left" valign="top">Required</entry>
<entry align="left" valign="top">Default Value</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>topic</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Topic to comment on. Examples: <literal>reviews/1234</literal>, <literal>changes/1234</literal> or <literal>jobs/job001234</literal>.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
<entry align="left" valign="top"/>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>body</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Content of the comment.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
<entry align="left" valign="top"/>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>taskState</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Optional task state of the comment. Valid values when adding a comment are <literal>comment</literal> and <literal>open</literal>. This creates a plain comment or opens a task, respectively.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"><simpara>comment</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>flags[]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Optional flags on the comment. Typically set to <literal>closed</literal> to archive a comment.</simpara></entry>
<entry align="left" valign="top"><simpara>array (of strings)</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"/>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>context[file]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>File to comment on. Valid only for <literal>changes</literal> and <literal>reviews</literal> topics. Example: <literal>//depot/main/README.txt</literal>.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"/>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>context[leftLine]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Left-side diff line to attach the inline comment to.  Valid only for <literal>changes</literal> and <literal>reviews</literal> topics. If this is specified, <literal>context[file]</literal> must also be specified.</simpara></entry>
<entry align="left" valign="top"><simpara>integer</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"/>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>context[rightLine]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Right-side diff line to attach the inline comment to.  Valid only for <literal>changes</literal> and <literal>reviews</literal> topics. If this is specified, <literal>context[file]</literal> must also be specified.</simpara></entry>
<entry align="left" valign="top"><simpara>integer</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"/>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>context[content]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Optionally provide content of the specified line and its four preceding lines. This is used to specify a short excerpt of context in case the lines being commented on change during the review.  When not provided, Swarm makes an effort to build the content on its own - as this involves file operations, it could become slow.</simpara></entry>
<entry align="left" valign="top"><simpara>array (of strings)</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"/>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>context[version]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>With a <literal>reviews</literal> topic, this field specifies which version to attach the comment to.</simpara></entry>
<entry align="left" valign="top"><simpara>integer</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"/>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="api.endpoints.Comments.addComment.successExamples">
<title>Successful Response contains Comment entity:</title>
<programlisting language="json" linenumbering="unnumbered">HTTP/1.1 200 OK

{
  "comment": {
    "id": 42,
    "attachments": [],
    "body": "Best. Comment. EVER!",
    "context": [],
    "edited": null,
    "flags": [],
    "likes": [],
    "taskState": "comment",
    "time": 123456789,
    "topic": "reviews/2",
    "updated": 123456790,
    "user": "bruno"
  }
}</programlisting>
</section>
<section xml:id="api.endpoints.Comments.addComment.usageExamples">
<title>Examples of usage</title>
<bridgehead xml:id="_create_a_comment_on_a_review" renderas="sect4">Create a comment on a review</bridgehead>
<simpara>To create a comment on a review:</simpara>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" \
     -d "topic=reviews/2" \
     -d "body=This is my comment. It is an excellent comment. It contains a beginning, a middle, and an end." \
     "https://my-swarm-host/api/v4/comments"</programlisting>
<simpara>JSON Response:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "comment": {
    "id": 42,
    "attachments": [],
    "body": "This is my comment. It is an excellent comment. It contains a beginning, a middle, and an end.",
    "context": [],
    "edited": null,
    "flags": [],
    "likes": [],
    "taskState": "comment",
    "time": 123456789,
    "topic": "reviews/2",
    "updated": 123456790,
    "user": "username"
  }
}</programlisting>
<bridgehead xml:id="_open_a_task_on_a_review" renderas="sect4">Open a task on a review</bridgehead>
<simpara>To create a comment on a review, and flag it as an open task:</simpara>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" \
     -d "topic=reviews/2" \
     -d "taskState=open" \
     -d "body=If you could go ahead and attach a cover page to your TPS report, that would be great." \
     "https://my-swarm-host/api/v4/comments"</programlisting>
<simpara>JSON Response:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "comment": {
    "id": 43,
    "attachments": [],
    "body": "If you could go ahead and attach a cover page to your TPS report, that would be great.",
    "context": [],
    "edited": null,
    "flags": [],
    "likes": [],
    "taskState": "open",
    "time": 123456789,
    "topic": "reviews/2",
    "updated": 123456790,
    "user": "username"
  }
}</programlisting>
</section>
</section>
<section xml:id="api.endpoints.Comments.editComment">
<title>PATCH /api/v4/comments/{id}</title>
<simpara role="summary">Summary: Edit A Comment</simpara>
<section xml:id="api.endpoints.Comments.editComment.notes">
<title>Description</title>
<simpara>Edit a comment</simpara>
</section>
<section xml:id="api.endpoints.Comments.editComment.parameters">
<title>Parameters</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="5">
<colspec colname="col_1" colwidth="12.5*"/>
<colspec colname="col_2" colwidth="50*"/>
<colspec colname="col_3" colwidth="12.5*"/>
<colspec colname="col_4" colwidth="12.5*"/>
<colspec colname="col_5" colwidth="12.5*"/>
<thead>
<row>
<entry align="left" valign="top">Parameter</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Parameter Type</entry>
<entry align="left" valign="top">Required</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>id</literal></simpara></entry>
<entry align="left" valign="top"><simpara>ID of the comment to be edited</simpara></entry>
<entry align="left" valign="top"><simpara>integer</simpara></entry>
<entry align="left" valign="top"><simpara>path</simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>topic</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Topic to comment on. Examples: <literal>reviews/1234</literal>, <literal>changes/1234</literal> or <literal>jobs/job001234</literal>.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>body</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Content of the comment.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>taskState</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Optional task state of the comment. Note that certain transitions (such as moving from <literal>open</literal> to <literal>verified</literal>) are not possible without an intermediate step (<literal>addressed</literal>, in this case). Examples: <literal>comment</literal> (not a task), <literal>open</literal>, <literal>addressed</literal>, <literal>verified</literal>.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>flags[]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Optional flags on the comment. Typically set to <literal>closed</literal> to archive a comment.</simpara></entry>
<entry align="left" valign="top"><simpara>array (of strings)</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="api.endpoints.Comments.editComment.successExamples">
<title>Successful Response contains Comment entity:</title>
<programlisting language="json" linenumbering="unnumbered">HTTP/1.1 200 OK

{
  "comment": {
    "id": 1,
    "attachments": [],
    "body": "Best. Comment. EVER!",
    "context": [],
    "edited": 123466790,
    "flags": [],
    "likes": [],
    "taskState": "comment",
    "time": 123456789,
    "topic": "reviews/42",
    "updated": 123456790,
    "user": "bruno"
  }
}</programlisting>
</section>
<section xml:id="api.endpoints.Comments.editComment.usageExamples">
<title>Examples of usage</title>
<bridgehead xml:id="_edit_and_archive_a_comment_on_a_review" renderas="sect4">Edit and archive a comment on a review</bridgehead>
<simpara>To edit and archive a comment on a review:</simpara>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" \
     -X PATCH \
     -d "flags[]=closed" \
     -d "body=This comment wasn't as excellent as I may have lead you to believe. A thousand apologies." \
     "https://my-swarm-host/api/v4/comments/42"</programlisting>
<simpara>JSON Response:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "comment": {
    "id": 42,
    "attachments": [],
    "body": "This comment wasn't as excellent as I may have lead you to believe. A thousand apologies.",
    "context": [],
    "edited": 123466790,
    "flags": ["closed"],
    "likes": [],
    "taskState": "comment",
    "time": 123456789,
    "topic": "reviews/2",
    "updated": 123456790,
    "user": "username"
  }
}</programlisting>
<bridgehead xml:id="_flag_a_task_as_addressed_on_a_review" renderas="sect4">Flag a task as addressed on a review</bridgehead>
<simpara>To flag an open task as addressed on a review:</simpara>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" \
     -X PATCH \
     -d "taskState=addressed" \
     "https://my-swarm-host/api/v4/comments/43"</programlisting>
<simpara>JSON Response:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "comment": {
    "id": 43,
    "attachments": [],
    "body": "If you could go ahead and attach a cover page to your TPS report, that would be great.",
    "context": [],
    "edited": 123466790,
    "flags": ["closed"],
    "likes": [],
    "taskState": "comment",
    "time": 123456789,
    "topic": "reviews/2",
    "updated": 123456790,
    "user": "username"
  }
}</programlisting>
</section>
</section>
</section>
<section xml:id="api.endpoints.Groups">
<title>Groups : Swarm Groups</title>
<section xml:id="api.endpoints.Groups.listGroups">
<title>GET /api/v4/groups/</title>
<simpara role="summary">Summary: Get List of Groups</simpara>
<section xml:id="api.endpoints.Groups.listGroups.notes">
<title>Description</title>
<simpara>Returns the complete list of groups in Swarm.</simpara>
</section>
<section xml:id="api.endpoints.Groups.listGroups.parameters">
<title>Parameters</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="6">
<colspec colname="col_1" colwidth="11.1111*"/>
<colspec colname="col_2" colwidth="44.4444*"/>
<colspec colname="col_3" colwidth="11.1111*"/>
<colspec colname="col_4" colwidth="11.1111*"/>
<colspec colname="col_5" colwidth="11.1111*"/>
<colspec colname="col_6" colwidth="11.1112*"/>
<thead>
<row>
<entry align="left" valign="top">Parameter</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Parameter Type</entry>
<entry align="left" valign="top">Required</entry>
<entry align="left" valign="top">Default Value</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>after</literal></simpara></entry>
<entry align="left" valign="top"><simpara>A group ID to seek to. Groups prior to and including the specified ID are excluded from the results and do not count towards <literal>max</literal>. Useful for pagination. Commonly set to the <literal>lastSeen</literal> property from a previous query.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>query</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"/>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>max</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Maximum number of groups to return. This does not guarantee that <literal>max</literal> groups are returned. It does guarantee that the number of groups returned won’t exceed <literal>max</literal>.</simpara></entry>
<entry align="left" valign="top"><simpara>integer</simpara></entry>
<entry align="left" valign="top"><simpara>query</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"><simpara>100</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>fields</literal></simpara></entry>
<entry align="left" valign="top"><simpara>An optional comma-separated list (or array) of fields to show for each group. Omitting this parameter or passing an empty value shows all fields.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>query</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"/>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>keywords</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Keywords to limit groups on. Only groups where the group ID, group name (if set), or description contain the specified keywords are returned.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>query</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"/>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="api.endpoints.Groups.listGroups.successExamples">
<title>Successful Response:</title>
<programlisting language="json" linenumbering="unnumbered">HTTP/1.1 200 OK

{
  "groups": [
    {
      "Group": "test-group",
      "MaxLockTime": null,
      "MaxResults": null,
      "MaxScanRows": null,
      "Owners": [],
      "PasswordTimeout": null,
      "Subgroups": [],
      "Timeout": 43200,
      "Users": ["bruno"],
      "config": {
        "description": "Our testing group",
        "emailFlags": [],
        "name": "Test Group"
      }
    }
  ]
}</programlisting>
</section>
<section xml:id="api.endpoints.Groups.listGroups.usageExamples">
<title>Examples of usage</title>
<bridgehead xml:id="_listing_groups" renderas="sect4">Listing groups</bridgehead>
<simpara>To list groups:</simpara>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" \
     "https://myswarm.url/api/v4/groups?keywords=test-group&amp;fields=Group,Owners,Users,config&amp;max=2"</programlisting>
<simpara>Swarm responds with a list of groups:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "groups": [
    {
      "Group": "test-group",
      "Owners": [],
      "Users": ["bruno"],
      "config": {
        "description": "Our testing group",
        "emailFlags": {
          "reviews": "1",
          "commits": "0"
        },
        "name": "Test Group"
      }
    },
    {
      "Group": "test-group2",
      "Owners": [],
      "Users": ["bruno"],
      "config": {
        "description": "Our second testing group",
        "emailFlags": [],
        "name": "Test Group 2"
      }
    }
  ],
  "lastSeen": "test-group2"
}</programlisting>
<bridgehead xml:id="_paginating_the_groups_list" renderas="sect4">Paginating the groups list</bridgehead>
<simpara>Based on the previous example, we can pass a lastSeen value of <literal>test-group2</literal> to see if there are any subsequent
groups in Swarm.</simpara>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" \
     "https://myswarm.url/api/v4/groups?keywords=test-group&amp;fields=Group,config&amp;max=2&amp;lastSeen=test-group2"</programlisting>
<simpara>Swarm responds with a list of groups (minus the Owners and Users fields, as we haven’t requested them):</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "groups": [
    {
      "Group": "test-group3",
      "config": {
        "description": "Our 3rd testing group",
        "emailFlags": [],
        "name": "Test Group 3"
      }
    }
  ],
  "lastSeen": "test-group3"
}</programlisting>
</section>
</section>
<section xml:id="api.endpoints.Groups.getGroup">
<title>GET /api/v4/groups/{id}</title>
<simpara role="summary">Summary: Get Group Information</simpara>
<section xml:id="api.endpoints.Groups.getGroup.notes">
<title>Description</title>
<simpara>Retrieve information about a group.</simpara>
</section>
<section xml:id="api.endpoints.Groups.getGroup.parameters">
<title>Parameters</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="5">
<colspec colname="col_1" colwidth="12.5*"/>
<colspec colname="col_2" colwidth="50*"/>
<colspec colname="col_3" colwidth="12.5*"/>
<colspec colname="col_4" colwidth="12.5*"/>
<colspec colname="col_5" colwidth="12.5*"/>
<thead>
<row>
<entry align="left" valign="top">Parameter</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Parameter Type</entry>
<entry align="left" valign="top">Required</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>id</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Group ID</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>path</simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>fields</literal></simpara></entry>
<entry align="left" valign="top"><simpara>An optional comma-separated list (or array) of fields to show for each group. Omitting this parameter or passing an empty value shows all fields.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>query</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="api.endpoints.Groups.getGroup.successExamples">
<title>Successful Response:</title>
<programlisting language="json" linenumbering="unnumbered">HTTP/1.1 200 OK

{
  "group": {
    "Group": "test-group",
    "MaxLockTime": null,
    "MaxResults": null,
    "MaxScanRows": null,
    "Owners": [],
    "PasswordTimeout": null,
    "Subgroups": [],
    "Timeout": 43200,
    "Users": ["bruno"],
    "config": {
      "description": "Our testing group",
      "emailFlags": [],
      "name": "Test Group"
    }
  }
}</programlisting>
</section>
<section xml:id="api.endpoints.Groups.getGroup.usageExamples">
<title>Examples of usage</title>
<bridgehead xml:id="_fetching_a_group" renderas="sect4">Fetching a group</bridgehead>
<simpara>To fetch an individual group:</simpara>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" "https://myswarm.url/api/v4/groups/my-group"</programlisting>
<simpara>Swarm responds with the group entity:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "group": {
    "Group": "test-group",
    "LdapConfig": null,
    "LdapSearchQuery": null,
    "LdapUserAttribute": null,
    "MaxLockTime": null,
    "MaxResults": null,
    "MaxScanRows": null,
    "Owners": [],
    "Users": ["bruno"],
    "config": {
      "description": "Our testing group",
      "emailFlags": [],
      "name": "Test Group"
    }
  }
}</programlisting>
<bridgehead xml:id="_limiting_returned_fields" renderas="sect4">Limiting returned fields</bridgehead>
<simpara>To limit the returned fields when fetching an individual group:</simpara>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" "https://myswarm.url/api/v4/groups/my-group?fields=Group,Owners,Users,config"</programlisting>
<simpara>Swarm responds with the group entity:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "group": {
    "Group": "test-group",
    "Owners": [],
    "Users": ["bruno"],
    "config": {
      "description": "Our testing group",
      "emailFlags": [],
      "name": "Test Group"
    }
  }
}</programlisting>
</section>
</section>
<section xml:id="api.endpoints.Groups.createGroup">
<title>POST /api/v4/groups/</title>
<simpara role="summary">Summary: Create a new Group</simpara>
<section xml:id="api.endpoints.Groups.createGroup.notes">
<title>Description</title>
<simpara>Creates a new group in Swarm.</simpara>
</section>
<section xml:id="api.endpoints.Groups.createGroup.parameters">
<title>Parameters</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="5">
<colspec colname="col_1" colwidth="12.5*"/>
<colspec colname="col_2" colwidth="50*"/>
<colspec colname="col_3" colwidth="12.5*"/>
<colspec colname="col_4" colwidth="12.5*"/>
<colspec colname="col_5" colwidth="12.5*"/>
<thead>
<row>
<entry align="left" valign="top">Parameter</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Parameter Type</entry>
<entry align="left" valign="top">Required</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>Group</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Group identifier string.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>Users</literal></simpara></entry>
<entry align="left" valign="top"><simpara>An optional array of group users. At least one of Users, Owners, or Subgroups is required.</simpara></entry>
<entry align="left" valign="top"><simpara>array</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>Owners</literal></simpara></entry>
<entry align="left" valign="top"><simpara>An optional array of group owners. At least one of Users, Owners, or Subgroups is required.</simpara></entry>
<entry align="left" valign="top"><simpara>array</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>Subgroups</literal></simpara></entry>
<entry align="left" valign="top"><simpara>An optional array of subgroups. At least one of Users, Owners, or Subgroups is required.</simpara></entry>
<entry align="left" valign="top"><simpara>array</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>config[name]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>An optional full name for the group.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>config[description]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>An optional group description.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>config[emailFlags][commits]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Email members when a change is committed.</simpara></entry>
<entry align="left" valign="top"><simpara>boolean</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>config[emailFlags][reviews]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Email members when a new review is requested.</simpara></entry>
<entry align="left" valign="top"><simpara>boolean</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="api.endpoints.Groups.createGroup.successExamples">
<title>Successful Response:</title>
<programlisting language="json" linenumbering="unnumbered">HTTP/1.1 200 OK

{
  "group": {
    "Group": "test-group",
    "MaxLockTime": null,
    "MaxResults": null,
    "MaxScanRows": null,
    "Owners": [],
    "PasswordTimeout": null,
    "Subgroups": [],
    "Timeout": null,
    "Users": ["alice"],
    "config": {
      "description": "Test test test",
      "emailFlags": [],
      "name": "TestGroup"
    }
  }
}</programlisting>
</section>
<section xml:id="api.endpoints.Groups.createGroup.usageExamples">
<title>Creating a group</title>
<important>
<itemizedlist>
<listitem>
<simpara>Only users with <emphasis>super</emphasis> privileges in the Helix Versioning Engine (<literal><emphasis role="strong">p4d</emphasis></literal>), or users
with <emphasis>admin</emphasis> privileges in <literal><emphasis role="strong">p4d</emphasis></literal> versions 2012.1 or newer, can create groups.</simpara>
</listitem>
<listitem>
<simpara>This API version is only capable of setting specific fields: <literal>Group</literal>, <literal>Users</literal>, <literal>Owners</literal>,
<literal>Subgroups</literal>, <literal>config</literal>.
Any other fields specified in the creation request are ignored.</simpara>
</listitem>
</itemizedlist>
</important>
<simpara>To create a new group:</simpara>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" \
     -d "Group=my-group" \
     -d "Owners[]=alice" \
     -d "Owners[]=bob" \
     -d "Users[]=bruno" \
     -d "Users[]=user2" \
     -d "config[description]=This group is special to me." \
     -d "config[name]=My Group" \
     -d "config[emailFlags][reviews]=1" \
     -d "config[emailFlags][commits]=0" \
     "https://myswarm.url/api/v4/groups"</programlisting>
<simpara>Assuming that the authenticated user has permission, Swarm responds with the new group entity:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "group": {
    "Group": "my-group",
    "MaxLockTime": null,
    "MaxResults": null,
    "MaxScanRows": null,
    "Owners": ["username"],
    "PasswordTimeout": null,
    "Subgroups": [],
    "Timeout": null,
    "Users": [],
    "config": {
      "description": "This group is special to me.",
      "emailFlags": {
        "reviews": "1",
        "commits": "0"
      },
      "name": "My Group"
    }
  }
}</programlisting>
</section>
</section>
<section xml:id="api.endpoints.Groups.patchGroup">
<title>PATCH /api/v4/groups/{id}</title>
<simpara role="summary">Summary: Edit a Group</simpara>
<section xml:id="api.endpoints.Groups.patchGroup.notes">
<title>Description</title>
<simpara>Change the settings of a group in Swarm. Only super users and group owners can perform this action.</simpara>
</section>
<section xml:id="api.endpoints.Groups.patchGroup.parameters">
<title>Parameters</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="5">
<colspec colname="col_1" colwidth="12.5*"/>
<colspec colname="col_2" colwidth="50*"/>
<colspec colname="col_3" colwidth="12.5*"/>
<colspec colname="col_4" colwidth="12.5*"/>
<colspec colname="col_5" colwidth="12.5*"/>
<thead>
<row>
<entry align="left" valign="top">Parameter</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Parameter Type</entry>
<entry align="left" valign="top">Required</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>id</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Group ID</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>path</simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>Users</literal></simpara></entry>
<entry align="left" valign="top"><simpara>An optional array of group users.</simpara></entry>
<entry align="left" valign="top"><simpara>array</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>Owners</literal></simpara></entry>
<entry align="left" valign="top"><simpara>An optional array of group owners.</simpara></entry>
<entry align="left" valign="top"><simpara>array</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>Subgroups</literal></simpara></entry>
<entry align="left" valign="top"><simpara>An optional array of group subgroups.</simpara></entry>
<entry align="left" valign="top"><simpara>array</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>config[name]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>An optional full name for the group.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>config[description]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>An optional group description.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>config[emailFlags][commits]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Email members when a change is committed.</simpara></entry>
<entry align="left" valign="top"><simpara>boolean</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>config[emailFlags][reviews]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Email members when a new review is requested.</simpara></entry>
<entry align="left" valign="top"><simpara>boolean</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="api.endpoints.Groups.patchGroup.successExamples">
<title>Successful Response:</title>
<programlisting language="json" linenumbering="unnumbered">HTTP/1.1 200 OK

{
  "group": {
    "Group": "test-group",
    "Users": [],
    "Owners": [],
    "Subgroups": [],
    "config": {
      "description": "New Group Description",
      "name": "TestGroup"
    }
  }
}</programlisting>
</section>
<section xml:id="api.endpoints.Groups.patchGroup.usageExamples">
<title>Editing a group</title>
<important>
<itemizedlist>
<listitem>
<simpara>Only users with <emphasis>super</emphasis> privileges in the Helix Versioning Engine, or group owners, can
edit groups.</simpara>
</listitem>
<listitem>
<simpara>This API version is only capable of modifying specific fields: <literal>Users</literal>, <literal>Owners</literal>,
<literal>Subgroups</literal>, <literal>config</literal>.
Any other fields specified in the edit request are ignored.</simpara>
</listitem>
</itemizedlist>
</important>
<simpara>Here is how to update the <literal>name</literal>, <literal>description</literal>, and <literal>emailFlags</literal>
configuration of the group <literal>my-group</literal>:</simpara>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" -X PATCH \
     -d "config[description]=This group is special to me." \
     -d "config[name]=My Group" \
     -d "config[emailFlags][commits]=1" \
     "https://myswarm.url/api/v4/groups/my-group"</programlisting>
<simpara>Assuming that the authenticated user has permission, Swarm
responds with the modified group entity:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "group": {
    "Group": "my-group",
    "Users": [],
    "Owners": [],
    "Subgroups": [],
    "config": {
      "description": "This group is special to me.",
      "emailFlags": {
        "reviews": "1",
        "commits": "1"
      },
      "name": "My Group"
    }
  }
}</programlisting>
</section>
</section>
<section xml:id="api.endpoints.Groups.deleteGroup">
<title>DELETE /api/v4/groups/{id}</title>
<simpara role="summary">Summary: Delete a Group</simpara>
<section xml:id="api.endpoints.Groups.deleteGroup.notes">
<title>Description</title>
<simpara>Delete a group. Only super users and group owners can perform this action.</simpara>
</section>
<section xml:id="api.endpoints.Groups.deleteGroup.parameters">
<title>Parameters</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="5">
<colspec colname="col_1" colwidth="12.5*"/>
<colspec colname="col_2" colwidth="50*"/>
<colspec colname="col_3" colwidth="12.5*"/>
<colspec colname="col_4" colwidth="12.5*"/>
<colspec colname="col_5" colwidth="12.5*"/>
<thead>
<row>
<entry align="left" valign="top">Parameter</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Parameter Type</entry>
<entry align="left" valign="top">Required</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>id</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Group ID.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>path</simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="api.endpoints.Groups.deleteGroup.successExamples">
<title>Successful Response:</title>
<programlisting language="json" linenumbering="unnumbered">HTTP/1.1 200 OK

{
  "id": "test-group"
}</programlisting>
</section>
<section xml:id="api.endpoints.Groups.deleteGroup.usageExamples">
<title>Deleting a group</title>
<important>
<simpara>Only <emphasis>super</emphasis> users and group owners can delete groups.</simpara>
</important>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" -X DELETE "https://myswarm.url/api/v4/groups/my-group"</programlisting>
<simpara>Assuming that the authenticated user has permission, Swarm
responds with the <literal>id</literal> of the deleted group:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "id": "my-group"
}</programlisting>
</section>
</section>
</section>
<section xml:id="api.endpoints.Index">
<title>Index : Basic API controller providing a simple version action</title>
<section xml:id="api.endpoints.Index.version">
<title>GET /api/v4/version</title>
<simpara role="summary">Summary: Show Version Information</simpara>
<section xml:id="api.endpoints.Index.version.notes">
<title>Description</title>
<simpara>This can be used to determine the currently-installed Swarm version, and also to check that Swarm’s API is responding as expected.</simpara>
</section>
<section xml:id="api.endpoints.Index.version.successExamples">
<title>Successful Response:</title>
<programlisting language="json" linenumbering="unnumbered">HTTP/1.1 200 OK

{
    "year": "2014",
    "version": "SWARM/2014.3-MAIN/885869 (2014/06/25)"
}</programlisting>
<note>
<simpara>Note: <literal>year</literal> refers to the year of the Swarm release, not necessarily the current year.</simpara>
</note>
</section>
</section>
</section>
<section xml:id="api.endpoints.Projects">
<title>Projects : Swarm Projects</title>
<section xml:id="api.endpoints.Projects.listProjects">
<title>GET /api/v4/projects/</title>
<simpara role="summary">Summary: Get List of Projects</simpara>
<section xml:id="api.endpoints.Projects.listProjects.notes">
<title>Description</title>
<simpara>Returns a list of projects in Swarm that are visible to the current user. Administrators will see all projects, including private ones.</simpara>
</section>
<section xml:id="api.endpoints.Projects.listProjects.parameters">
<title>Parameters</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="5">
<colspec colname="col_1" colwidth="12.5*"/>
<colspec colname="col_2" colwidth="50*"/>
<colspec colname="col_3" colwidth="12.5*"/>
<colspec colname="col_4" colwidth="12.5*"/>
<colspec colname="col_5" colwidth="12.5*"/>
<thead>
<row>
<entry align="left" valign="top">Parameter</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Parameter Type</entry>
<entry align="left" valign="top">Required</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>fields</literal></simpara></entry>
<entry align="left" valign="top"><simpara>An optional comma-separated list (or array) of fields to show for each project. Omitting this parameter or passing an empty value shows all fields.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>query</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="api.endpoints.Projects.listProjects.successExamples">
<title>Successful Response:</title>
<programlisting language="json" linenumbering="unnumbered">HTTP/1.1 200 OK

{
  "projects": [
    {
      "id": "testproject",
      "branches": [
        {
          "id": "main",
          "name": "main",
          "paths": ["//depot/main/TestProject/..."],
          "moderators": []
        }
      ],
      "deleted": false,
      "description": "Test test test",
      "followers": [],
      "jobview": "subsystem=testproject",
      "members": ["alice"],
      "name": "TestProject",
      "owners": [],
      "private": false,
      "subgroups": []
    }
  ]
}</programlisting>
</section>
<section xml:id="api.endpoints.Projects.listProjects.usageExamples">
<title>Listing projects</title>
<simpara>To list all projects:</simpara>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" "https://my-swarm-host/api/v4/projects?fields=id,description,members,name"</programlisting>
<simpara>Pagination is not currently supported by this endpoint. Swarm responds with a list of all projects:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "projects": [
    {
      "id": "testproject",
      "description": "Test test test",
      "members": ["alice"],
      "name": "TestProject"
    },
    {
      "id": "testproject2",
      "description": "Test test test",
      "members": ["alice"],
      "name": "TestProject"
    }
  ]
}</programlisting>
<simpara>Project administrators wishing to see the <literal>tests</literal> and <literal>deploy</literal> fields must fetch projects
individually.</simpara>
</section>
</section>
<section xml:id="api.endpoints.Projects.getProject">
<title>GET /api/v4/projects/{id}</title>
<simpara role="summary">Summary: Get Project Information</simpara>
<section xml:id="api.endpoints.Projects.getProject.notes">
<title>Description</title>
<simpara>Retrieve information about a project.</simpara>
</section>
<section xml:id="api.endpoints.Projects.getProject.parameters">
<title>Parameters</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="5">
<colspec colname="col_1" colwidth="12.5*"/>
<colspec colname="col_2" colwidth="50*"/>
<colspec colname="col_3" colwidth="12.5*"/>
<colspec colname="col_4" colwidth="12.5*"/>
<colspec colname="col_5" colwidth="12.5*"/>
<thead>
<row>
<entry align="left" valign="top">Parameter</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Parameter Type</entry>
<entry align="left" valign="top">Required</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>id</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Project ID</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>path</simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>fields</literal></simpara></entry>
<entry align="left" valign="top"><simpara>An optional comma-separated list (or array) of fields to show for each project. Omitting this parameter or passing an empty value shows all fields.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>query</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="api.endpoints.Projects.getProject.successExamples">
<title>Successful Response:</title>
<programlisting language="json" linenumbering="unnumbered">HTTP/1.1 200 OK

{
  "project": {
    "id": "testproject",
    "branches": [
      {
        "id": "main",
        "name": "main",
        "paths": ["//depot/main/TestProject/..."],
        "moderators": []
      }
    ],
    "deleted": false,
    "description": "Test test test",
    "jobview": "subsystem=testproject",
    "members": ["alice"],
    "name": "TestProject",
    "owners": [],
    "private": false,
    "subgroups": []
  }
}</programlisting>
</section>
<section xml:id="api.endpoints.Projects.getProject.usageExamples">
<title>Fetching a project</title>
<simpara>To fetch an individual project:</simpara>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" \
     "https://my-swarm-host/api/v4/projects/testproject2?fields=id,description,members,name"</programlisting>
<simpara>Swarm responds with a project entity:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "project": {
    "id": "testproject2",
    "description": "Test test test",
    "members": ["alice"],
    "name": "TestProject 2"
  }
}</programlisting>
<simpara>Project administrators have access to additional fields (<literal>tests</literal> and <literal>deploy</literal>) when fetching
individual projects using this endpoint.</simpara>
</section>
</section>
<section xml:id="api.endpoints.Projects.createProject">
<title>POST /api/v4/projects/</title>
<simpara role="summary">Summary: Create a new Project</simpara>
<section xml:id="api.endpoints.Projects.createProject.notes">
<title>Description</title>
<simpara>Creates a new project in Swarm.</simpara>
</section>
<section xml:id="api.endpoints.Projects.createProject.parameters">
<title>Parameters</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="5">
<colspec colname="col_1" colwidth="12.5*"/>
<colspec colname="col_2" colwidth="50*"/>
<colspec colname="col_3" colwidth="12.5*"/>
<colspec colname="col_4" colwidth="12.5*"/>
<colspec colname="col_5" colwidth="12.5*"/>
<thead>
<row>
<entry align="left" valign="top">Parameter</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Parameter Type</entry>
<entry align="left" valign="top">Required</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>name</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Project Name (is also used to generate the Project ID)</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>members</literal></simpara></entry>
<entry align="left" valign="top"><simpara>An array of project members.</simpara></entry>
<entry align="left" valign="top"><simpara>array</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>subgroups</literal></simpara></entry>
<entry align="left" valign="top"><simpara>An optional array of project subgroups.</simpara></entry>
<entry align="left" valign="top"><simpara>array</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>owners</literal></simpara></entry>
<entry align="left" valign="top"><simpara>An optional array of project owners.</simpara></entry>
<entry align="left" valign="top"><simpara>array</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>description</literal></simpara></entry>
<entry align="left" valign="top"><simpara>An optional project description.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>private</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Private projects are visible only to Members, Moderators, Owners, and Administrators. (Default: false)</simpara></entry>
<entry align="left" valign="top"><simpara>boolean</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>deploy</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Configuration for automated deployment. Example: {"enabled": true, "url": "http://localhost/?change={change}"}</simpara></entry>
<entry align="left" valign="top"><simpara>array</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>tests</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Configuration for testing/continuous integration.</simpara></entry>
<entry align="left" valign="top"><simpara>array</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>branches</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Optional branch definitions for this project.</simpara></entry>
<entry align="left" valign="top"><simpara>array</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>jobview</literal></simpara></entry>
<entry align="left" valign="top"><simpara>An optional jobview for associating certain jobs with this project.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>emailFlags[change_email_project_users]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Email members, moderators and followers when a change is committed.</simpara></entry>
<entry align="left" valign="top"><simpara>boolean</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>emailFlags[review_email_project_members]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Email members and moderators when a new review is requested.</simpara></entry>
<entry align="left" valign="top"><simpara>boolean</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="api.endpoints.Projects.createProject.successExamples">
<title>Successful Response:</title>
<programlisting language="json" linenumbering="unnumbered">HTTP/1.1 200 OK

{
  "project": {
    "id": "testproject",
    "branches": [
      {
        "id": "main",
        "name": "main",
        "paths": ["//depot/main/TestProject/..."],
        "moderators": []
      }
    ],
    "deleted": false,
    "deploy": {"url": "", "enabled": false},
    "description": "Test test test",
    "followers": [],
    "jobview": "subsystem=testproject",
    "members": ["alice"],
    "name": "TestProject",
    "owners": [],
    "private": false,
    "subgroups": [],
    "tests": {"url": "", "enabled": false}
  }
}</programlisting>
</section>
<section xml:id="api.endpoints.Projects.createProject.usageExamples">
<title>Examples of usage</title>
<bridgehead xml:id="_creating_a_new_project" renderas="sect4">Creating a new project</bridgehead>
<simpara>To create a project:</simpara>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" \
     -d "name=TestProject 3" \
     -d "description=The third iteration of our test project." \
     -d "members[]=alice" \
     -d "members[]=bob" \
     "https://my-swarm-host/api/v4/projects/"</programlisting>
<simpara>Swarm responds with the new project entity:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "project": {
    "id": "testproject3",
    "branches": [],
    "deleted": false,
    "deploy": {"url": "", "enabled": false},
    "description": "The third iteration of our test project.",
    "followers": [],
    "jobview": "subsystem=testproject",
    "members": ["alice", "bob"],
    "name": "TestProject 3",
    "owners": [],
    "private": false,
    "subgroups": [],
    "tests": {"url": "", "enabled": false}
  }
}</programlisting>
<bridgehead xml:id="_creating_a_private_project_with_branches" renderas="sect4">Creating a private project with branches</bridgehead>
<simpara>Specifying a branch requires using array notation and providing at least two fields (<literal>name</literal> and <literal>paths</literal>) for
each branch you wish to create. Creating more than one branch involves incrementing the <literal>branches[0]</literal> specifier
for each branch - an example of this accompanies the PATCH endpoint documentation.</simpara>
<simpara>Projects are public by default. Marking a project as Private requires using <literal>{private: true}</literal> in JSON, and
using <literal>-d "private=1"</literal> in regular form-encoded requests.</simpara>
<important>
<simpara>Form-encoded requests only accept <literal>0</literal> for false in boolean values — using the word <literal>false</literal> will be
evaluated as a non-zero (and therefore non-false) value.</simpara>
</important>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" \
     -d "name=TestProject 4" \
     -d "private=1" \
     -d "members[]=bob" \
     -d "branches[0][name]=Branch One" \
     -d "branches[0][paths][]=//depot/main/TestProject/..." \
     "https://my-swarm-host/api/v4/projects"</programlisting>
<simpara>Swarm responds with the new project entity:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "project": {
    "id": "testproject-4",
    "branches": [
      {
        "paths": [
          "//depot/main/TestProject/..."
        ],
        "name": "Branch One",
        "id": "branch-one",
        "moderators": []
      }
    ],
    "deleted": false,
    "deploy": {"url": "", "enabled": false},
    "description": null,
    "emailFlags": [],
    "jobview": null,
    "members": ["bob"],
    "name": "TestProject 4",
    "owners": [],
    "private": true,
    "subgroups": [],
    "tests": {"url": "", "enabled": false}
  }
}</programlisting>
</section>
</section>
<section xml:id="api.endpoints.Projects.patchProject">
<title>PATCH /api/v4/projects/{id}</title>
<simpara role="summary">Summary: Edit a Project</simpara>
<section xml:id="api.endpoints.Projects.patchProject.notes">
<title>Description</title>
<simpara>Change the settings of a project in Swarm. If a project has owners set, only the owners can perform this action.</simpara>
</section>
<section xml:id="api.endpoints.Projects.patchProject.parameters">
<title>Parameters</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="5">
<colspec colname="col_1" colwidth="12.5*"/>
<colspec colname="col_2" colwidth="50*"/>
<colspec colname="col_3" colwidth="12.5*"/>
<colspec colname="col_4" colwidth="12.5*"/>
<colspec colname="col_5" colwidth="12.5*"/>
<thead>
<row>
<entry align="left" valign="top">Parameter</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Parameter Type</entry>
<entry align="left" valign="top">Required</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>id</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Project ID</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>path</simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>name</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Project Name (changing the project name does not change the project ID)</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>members</literal></simpara></entry>
<entry align="left" valign="top"><simpara>An array of project members.</simpara></entry>
<entry align="left" valign="top"><simpara>array</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>subgroups</literal></simpara></entry>
<entry align="left" valign="top"><simpara>An optional array of project subgroups.</simpara></entry>
<entry align="left" valign="top"><simpara>array</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>owners</literal></simpara></entry>
<entry align="left" valign="top"><simpara>An optional array of project owners.</simpara></entry>
<entry align="left" valign="top"><simpara>array</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>description</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Your project description.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>private</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Private projects are visible only to Members, Moderators, Owners, and Administrators. (Default: false)</simpara></entry>
<entry align="left" valign="top"><simpara>boolean</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>deploy</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Configuration for automated deployment. Example: {"enabled": true, "url": "http://localhost/?change={change}"}</simpara></entry>
<entry align="left" valign="top"><simpara>array</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>tests</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Configuration for testing/continuous integration.</simpara></entry>
<entry align="left" valign="top"><simpara>array</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>branches</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Optional branch definitions for this project.</simpara></entry>
<entry align="left" valign="top"><simpara>array</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>jobview</literal></simpara></entry>
<entry align="left" valign="top"><simpara>A jobview for associating certain jobs with this project.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>emailFlags[change_email_project_users]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Email members, moderators and followers when a change is committed.</simpara></entry>
<entry align="left" valign="top"><simpara>boolean</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>emailFlags[review_email_project_members]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Email members and moderators when a new review is requested.</simpara></entry>
<entry align="left" valign="top"><simpara>boolean</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="api.endpoints.Projects.patchProject.successExamples">
<title>Successful Response:</title>
<programlisting language="json" linenumbering="unnumbered">HTTP/1.1 200 OK

{
  "project": {
    "id": "testproject",
    "branches": [
      {
        "id": "main",
        "name": "main",
        "paths": ["//depot/main/TestProject/..."],
        "moderators": []
      }
    ],
    "deleted": false,
    "deploy": {"url": "", "enabled": false},
    "description": "New Project Description",
    "followers": [],
    "jobview": "subsystem=testproject",
    "members": ["alice"],
    "name": "TestProject",
    "owners": [],
    "private": false,
    "subgroups": [],
    "tests": {"url": "", "enabled": false}
  }
}</programlisting>
</section>
<section xml:id="api.endpoints.Projects.patchProject.usageExamples">
<title>Examples of usage</title>
<bridgehead xml:id="_editing_a_project" renderas="sect4">Editing a project</bridgehead>
<simpara>To edit a project:</simpara>
<note>
<simpara>It is safe to edit a project without specifying branches, but the instructions for adding
branches contain important information for modifying branch configuration.</simpara>
</note>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" \
     -X PATCH
     -d "description=Witness the power of a fully operational Swarm project." \
     "https://my-swarm-host/api/v4/projects/testproject3"</programlisting>
<simpara>Swarm responds with the updated project entity:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "project": {
    "id": "testproject3",
    "branches": [],
    "deleted": false,
    "deploy": {"url": "", "enabled": false},
    "description": "Witness the power of a fully operational Swarm project.",
    "followers": [],
    "jobview": "subsystem=testproject",
    "members": ["alice"],
    "name": "TestProject 3",
    "owners": [],
    "private": false,
    "subgroups": [],
    "tests": {"url": "", "enabled": false}
  }
}</programlisting>
<bridgehead xml:id="_editing_a_project_to_add_a_moderated_branch_and_make_the_project_public" renderas="sect4">Editing a project to add a moderated branch and make the project public</bridgehead>
<simpara>Specifying a branch requires using array notation and providing at least two fields (<literal>name</literal> and <literal>paths</literal>) for
each branch you wish to create. Creating more than one branch involves incrementing the <literal>branches[0]</literal> specifier
for each branch.</simpara>
<important>
<simpara>If you have existing branches, you must specify all of them in the query to avoid data loss.
This operation sets the value of the entire <literal>branches</literal> property to match the provided input.</simpara>
</important>
<simpara>Marking a private project as Public requires using <literal>{private: false}</literal> in JSON, or using <literal>-d "private=0"</literal> in
regular form-encoded requests.</simpara>
<important>
<simpara>Form-encoded requests only accept <literal>0</literal> for false in boolean values — using the word <literal>false</literal> will be
evaluated as a non-zero (and therefore non-false) value.</simpara>
</important>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" \
     -X PATCH \
     -d "private=0" \
     -d "branches[0][name]=Branch One" \
     -d "branches[0][paths][]=//depot/main/TestProject/..." \
     -d "branches[1][name]=Branch Two" \
     -d "branches[1][paths][]=//depot/main/SecondBranch/..." \
     -d "branches[1][moderators][]=bob" \
     "https://my-swarm-host/api/v4/projects/testproject-4"</programlisting>
<simpara>Swarm responds with the new project entity:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "project": {
    "id": "testproject-4",
    "branches": [
      {
        "paths": [
          "//depot/main/TestProject/..."
        ],
        "name": "Branch One",
        "id": "branch-one",
        "moderators": []
      },
      {
        "paths": [
          "//depot/main/SecondBranch/..."
        ],
        "name": "Branch Two",
        "id": "branch-two",
        "moderators": ["bob"]
      },
    ],
    "deleted": false,
    "deploy": {"url": "", "enabled": false},
    "description": null,
    "emailFlags": [],
    "jobview": null,
    "members": ["bob"],
    "name": "TestProject 4",
    "owners": [],
    "private": false,
    "subgroups": [],
    "tests": {"url": "", "enabled": false}
  }
}</programlisting>
</section>
</section>
<section xml:id="api.endpoints.Projects.deleteProject">
<title>DELETE /api/v4/projects/{id}</title>
<simpara role="summary">Summary: Delete a Project</simpara>
<section xml:id="api.endpoints.Projects.deleteProject.notes">
<title>Description</title>
<simpara>Mark a Swarm project as deleted. The project ID and name cannot be reused. If a project has owners set, only the owners can perform this action.</simpara>
</section>
<section xml:id="api.endpoints.Projects.deleteProject.parameters">
<title>Parameters</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="5">
<colspec colname="col_1" colwidth="12.5*"/>
<colspec colname="col_2" colwidth="50*"/>
<colspec colname="col_3" colwidth="12.5*"/>
<colspec colname="col_4" colwidth="12.5*"/>
<colspec colname="col_5" colwidth="12.5*"/>
<thead>
<row>
<entry align="left" valign="top">Parameter</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Parameter Type</entry>
<entry align="left" valign="top">Required</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>id</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Project ID</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>path</simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="api.endpoints.Projects.deleteProject.successExamples">
<title>Successful Response:</title>
<programlisting language="json" linenumbering="unnumbered">HTTP/1.1 200 OK

{
  "id": "testproject"
}</programlisting>
</section>
<section xml:id="api.endpoints.Projects.deleteProject.usageExamples">
<title>Deleting a project</title>
<simpara>Super users, administrators, and owners can delete projects. Members can delete projects that have no
owners set.</simpara>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" -X DELETE "https://my-swarm-host/api/v4/projects/testproject3"</programlisting>
<simpara>Assuming that the authenticated user has permission, Swarm responds with the id of the deleted project:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "id": "testproject3"
}</programlisting>
</section>
</section>
</section>
<section xml:id="api.endpoints.Reviews">
<title>Reviews : Swarm Reviews</title>
<section xml:id="api.endpoints.Reviews.getReviews">
<title>GET /api/v4/reviews/</title>
<simpara role="summary">Summary: Get List of Reviews</simpara>
<section xml:id="api.endpoints.Reviews.getReviews.notes">
<title>Description</title>
<simpara>List and optionally filter reviews.</simpara>
</section>
<section xml:id="api.endpoints.Reviews.getReviews.parameters">
<title>Parameters</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="6">
<colspec colname="col_1" colwidth="11.1111*"/>
<colspec colname="col_2" colwidth="44.4444*"/>
<colspec colname="col_3" colwidth="11.1111*"/>
<colspec colname="col_4" colwidth="11.1111*"/>
<colspec colname="col_5" colwidth="11.1111*"/>
<colspec colname="col_6" colwidth="11.1112*"/>
<thead>
<row>
<entry align="left" valign="top">Parameter</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Parameter Type</entry>
<entry align="left" valign="top">Required</entry>
<entry align="left" valign="top">Default Value</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>after</literal></simpara></entry>
<entry align="left" valign="top"><simpara>A review ID to seek to. Reviews up to and including the specified <literal>id</literal> are excluded from the results and do not count towards <literal>max</literal>. Useful for pagination. Commonly set to the <literal>lastSeen</literal> property from a previous query.</simpara></entry>
<entry align="left" valign="top"><simpara>integer</simpara></entry>
<entry align="left" valign="top"><simpara>query</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"/>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>max</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Maximum number of reviews to return. This does not guarantee that <literal>max</literal> reviews are returned. It does guarantee that the number of reviews returned won’t exceed <literal>max</literal>. Server-side filtering may exclude some reviews for permissions reasons.</simpara></entry>
<entry align="left" valign="top"><simpara>integer</simpara></entry>
<entry align="left" valign="top"><simpara>query</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"><simpara>1000</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>fields</literal></simpara></entry>
<entry align="left" valign="top"><simpara>An optional comma-separated list (or array) of fields to show. Omitting this parameter or passing an empty value shows all fields.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>query</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"/>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>author[]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>One or more authors to limit reviews by. Reviews with any of the specified authors are returned. (v1.2+)</simpara></entry>
<entry align="left" valign="top"><simpara>array (of strings)</simpara></entry>
<entry align="left" valign="top"><simpara>query</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"/>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>change[]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>One or more change IDs to limit reviews by. Reviews associated with any of the specified changes are returned.</simpara></entry>
<entry align="left" valign="top"><simpara>array (of integers)</simpara></entry>
<entry align="left" valign="top"><simpara>query</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"/>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>hasReviewers</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Boolean option to limit to reviews to those with or without reviewers. Use <literal>true</literal> or <literal>false</literal> for JSON-encoded data, <literal>1</literal> for true and or <literal>0</literal> for false for form-encoded data. The presence of the parameter without a value is evaluated as true.</simpara></entry>
<entry align="left" valign="top"><simpara>boolean</simpara></entry>
<entry align="left" valign="top"><simpara>query</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"/>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>ids[]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>One or more review IDs to fetch. Only the specified reviews are returned. This filter cannot be combined with the <literal>max</literal> parameter.</simpara></entry>
<entry align="left" valign="top"><simpara>array (of integers)</simpara></entry>
<entry align="left" valign="top"><simpara>query</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"/>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>keywords</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Keywords to limit reviews by. Only reviews where the description, participants list or project list contain the specified keywords are returned.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>query</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"/>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>participants[]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>One or more participants to limit reviews by. Reviews with any of the specified participants are returned.</simpara></entry>
<entry align="left" valign="top"><simpara>array (of strings)</simpara></entry>
<entry align="left" valign="top"><simpara>query</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"/>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>project[]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>One or more projects to limit reviews by. Reviews affecting any of the specified projects are returned.</simpara></entry>
<entry align="left" valign="top"><simpara>array (of strings)</simpara></entry>
<entry align="left" valign="top"><simpara>query</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"/>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>state[]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>One or more states to limit reviews by. Reviews in any of the specified states are returned.</simpara></entry>
<entry align="left" valign="top"><simpara>array (of strings)</simpara></entry>
<entry align="left" valign="top"><simpara>query</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"/>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>passesTests</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Boolean option to limit reviews by tests passing or failing. Use <literal>true</literal> or <literal>false</literal> for JSON-encoded data, <literal>1</literal> for true and <literal>0</literal> for false for form-encoded data. The presence of the parameter without a value is evaluated as true.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>query</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"/>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="api.endpoints.Reviews.getReviews.successExamples">
<title>Examples of successful responses</title>
<bridgehead xml:id="_successful_response_2" renderas="sect4">Successful Response:</bridgehead>
<programlisting language="json" linenumbering="unnumbered">HTTP/1.1 200 OK

{
  "lastSeen": 12206,
  "reviews": [
    {
      "id": 12206,
      "author": "swarm",
      "changes": [12205],
      "comments": 0,
      "commits": [],
      "commitStatus": [],
      "created": 1402507043,
      "deployDetails": [],
      "deployStatus": null,
      "description": "Review Description\n",
      "participants": {
        "swarm": []
      },
      "pending": true,
      "projects": [],
      "state": "needsReview",
      "stateLabel": "Needs Review",
      "testDetails": [],
      "testStatus": null,
      "type": "default",
      "updated": 1402518492
    }
  ],
  "totalCount": 1
}</programlisting>
<note>
<simpara>Swarm returns <literal>null</literal> for <literal>totalCount</literal> if no search filters were provided.
<literal>lastSeen</literal> can often be used as an offset for pagination, by using the value
in the <literal>after</literal> parameter of subsequent requests.</simpara>
</note>
<bridgehead xml:id="_when_no_results_are_found_the_literal_reviews_literal_array_is_empty" renderas="sect4">When no results are found, the <literal>reviews</literal> array is empty:</bridgehead>
<programlisting language="json" linenumbering="unnumbered">HTTP/1.1 200 OK

{
  "lastSeen": null,
  "reviews": [],
  "totalCount": 0
}</programlisting>
</section>
<section xml:id="api.endpoints.Reviews.getReviews.usageExamples">
<title>Examples of usage</title>
<bridgehead xml:id="_listing_reviews" renderas="sect4">Listing reviews</bridgehead>
<simpara>To list reviews:</simpara>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" "https://my-swarm-host/api/v4/reviews?max=2&amp;fields=id,description,author,state"</programlisting>
<simpara>Swarm responds with a list of the latest reviews, a <literal>totalCount</literal> field, and a <literal>lastSeen</literal> value for pagination:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "lastSeen": 120,
  "reviews": [
    {
      "id": 123,
      "author": "bruno",
      "description": "Adding .jar that should have been included in r110\n",
      "state": "needsReview"
    },
    {
      "id": 120,
      "author": "bruno",
      "description": "Fixing a typo.\n",
      "state": "needsReview"
    }
  ],
  "totalCount": null
}</programlisting>
<simpara>The <literal>totalCount</literal> field is populated when keywords are supplied. It indicates how many total matches there are.
If keywords are not supplied the <literal>totalCount</literal> field remains <literal>null</literal>, indicating that the list of all reviews is
being queried.</simpara>
<bridgehead xml:id="_paginating_a_review_listing" renderas="sect4">Paginating a review listing</bridgehead>
<simpara>To obtain the next page of a reviews list (based on the previous example):</simpara>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" "https://my-swarm-host/api/v4/reviews\
?max=2&amp;fields=id,description,author,state&amp;after=120"</programlisting>
<simpara>Swarm responds with the second page of results, if any reviews are present after the last seen review:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "lastSeen": 100,
  "reviews": [
    {
      "id": 110,
      "author": "bruno",
      "description": "Updating Java files\n",
      "state": "needsReview"
    },
    {
      "id": 100,
      "author": "bruno",
      "description": "Marketing materials for our new cutting-edge product\n",
      "state": "needsReview"
    }
  ],
  "totalCount": null
}</programlisting>
<bridgehead xml:id="_finding_reviews_for_a_change_or_a_list_of_changes" renderas="sect4">Finding reviews for a change or a list of changes</bridgehead>
<simpara>Given a list of change IDs (5, 6, 7), here is how to check if any of them have reviews attached:</simpara>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" "https://my-swarm-host/api/v4/reviews\
?max=2&amp;fields=id,changes,description,author,state&amp;change\[\]=5&amp;change\[\]=6&amp;change\[\]=7"</programlisting>
<simpara>Swarm responds with a list of reviews that include these changes:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "lastSeen": 100,
  "reviews": [
    {
      "id": 110,
      "author": "bruno",
      "changes": [5],
      "description": "Updating Java files\n",
      "state": "needsReview"
    },
    {
      "id": 100,
      "author": "bruno",
      "changes": [6,7],
      "description": "Marketing materials for our new cutting-edge product\n",
      "state": "needsReview"
    }
  ],
  "totalCount": 2
}</programlisting>
<simpara>If no corresponding reviews are found, Swarm responds with an empty reviews list:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "lastSeen": null,
  "reviews": [],
  "totalCount": 0
}</programlisting>
</section>
</section>
<section xml:id="api.endpoints.Reviews.getReview">
<title>GET /api/v4/reviews/{id}</title>
<simpara role="summary">Summary: Get Review Information</simpara>
<section xml:id="api.endpoints.Reviews.getReview.notes">
<title>Description</title>
<simpara>Retrieve information about a review.</simpara>
</section>
<section xml:id="api.endpoints.Reviews.getReview.parameters">
<title>Parameters</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="5">
<colspec colname="col_1" colwidth="12.5*"/>
<colspec colname="col_2" colwidth="50*"/>
<colspec colname="col_3" colwidth="12.5*"/>
<colspec colname="col_4" colwidth="12.5*"/>
<colspec colname="col_5" colwidth="12.5*"/>
<thead>
<row>
<entry align="left" valign="top">Parameter</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Parameter Type</entry>
<entry align="left" valign="top">Required</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>id</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Review ID</simpara></entry>
<entry align="left" valign="top"><simpara>integer</simpara></entry>
<entry align="left" valign="top"><simpara>path</simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>fields</literal></simpara></entry>
<entry align="left" valign="top"><simpara>An optional comma-separated list (or array) of fields to show. Omitting this parameter or passing an empty value shows all fields.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>query</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="api.endpoints.Reviews.getReview.successExamples">
<title>Successful Response:</title>
<programlisting language="json" linenumbering="unnumbered">HTTP/1.1 200 OK

{
  "review": {
    "id": 12204,
    "author": "bruno",
    "changes": [10667],
    "commits": [10667],
    "commitStatus": [],
    "created": 1399325913,
    "deployDetails": [],
    "deployStatus": null,
    "description": "Adding .jar that should have been included in r10145\n",
    "participants": {
      "alex_qc": [],
      "bruno": {
        "vote": 1,
        "required": true
      },
      "vera": []
    },
    "pending": false,
    "projects": {
      "swarm": ["main"]
    },
    "state": "archived",
    "stateLabel": "Archived",
    "testDetails": {
      "url": "http://jenkins.example.com/job/project_ci/123/"
    },
    "testStatus": null,
    "type": "default",
    "updated": 1399325913
  }
}</programlisting>
</section>
<section xml:id="api.endpoints.Reviews.getReview.errorExamples">
<title>Example 404 Response:</title>
<screen>HTTP/1.1 404 Not Found

{
  "error": "Not Found"
}</screen>
</section>
<section xml:id="api.endpoints.Reviews.getReview.usageExamples">
<title>Fetching a review</title>
<simpara>To fetch a review:</simpara>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" "https://my-swarm-host/api/v4/reviews/123"</programlisting>
<simpara>Swarm responds with a review entity:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "review": {
    "id": 123,
    "author": "bruno",
    "changes": [122,124],
    "commits": [124],
    "commitStatus": [],
    "created": 1399325913,
    "deployDetails": [],
    "deployStatus": null,
    "description": "Adding .jar that should have been included in r110\n",
    "groups": [],
    "participants": {
      "alex_qc": [],
      "bruno": {
        "vote": 1,
        "required": true
      },
      "vera": []
    },
    "pending": false,
    "projects": {
      "swarm": ["main"]
    },
    "state": "archived",
    "stateLabel": "Archived",
    "testDetails": {
      "url": "http://jenkins.example.com/job/project_ci/123/"
    },
    "testStatus": null,
    "type": "default",
    "updated": 1399325913,
    "versions": []
  }
}</programlisting>
</section>
</section>
<section xml:id="api.endpoints.Reviews.createReview">
<title>POST /api/v4/reviews/</title>
<simpara role="summary">Summary: Create a Review</simpara>
<section xml:id="api.endpoints.Reviews.createReview.notes">
<title>Description</title>
<simpara>Pass in a changelist ID to create a review. Optionally, you can also provide a description and a list of reviewers.</simpara>
</section>
<section xml:id="api.endpoints.Reviews.createReview.parameters">
<title>Parameters</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="5">
<colspec colname="col_1" colwidth="12.5*"/>
<colspec colname="col_2" colwidth="50*"/>
<colspec colname="col_3" colwidth="12.5*"/>
<colspec colname="col_4" colwidth="12.5*"/>
<colspec colname="col_5" colwidth="12.5*"/>
<thead>
<row>
<entry align="left" valign="top">Parameter</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Parameter Type</entry>
<entry align="left" valign="top">Required</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>change</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Change ID to create a review from</simpara></entry>
<entry align="left" valign="top"><simpara>integer</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>description</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Description for the new review (defaults to change description)</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>reviewers</literal></simpara></entry>
<entry align="left" valign="top"><simpara>A list of reviewers for the new review</simpara></entry>
<entry align="left" valign="top"><simpara>array (of strings)</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>requiredReviewers</literal></simpara></entry>
<entry align="left" valign="top"><simpara>A list of required reviewers for the new review (v1.1+)</simpara></entry>
<entry align="left" valign="top"><simpara>array (of strings)</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="api.endpoints.Reviews.createReview.successExamples">
<title>Successful Response contains Review Entity:</title>
<programlisting language="json" linenumbering="unnumbered">HTTP/1.1 200 OK

{
  "review": {
    "id": 12204,
    "author": "bruno",
    "changes": [10667],
    "commits": [10667],
    "commitStatus": [],
    "created": 1399325913,
    "deployDetails": [],
    "deployStatus": null,
    "description": "Adding .jar that should have been included in r10145\n",
    "participants": {
      "bruno": []
    },
    "pending": false,
    "projects": [],
    "state": "archived",
    "stateLabel": "Archived",
    "testDetails": [],
    "testStatus": null,
    "type": "default",
    "updated": 1399325913
  }
}</programlisting>
</section>
<section xml:id="api.endpoints.Reviews.createReview.usageExamples">
<title>Starting a review</title>
<simpara>To start a review for a committed change or a non-empty shelved changelist:</simpara>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" -d"change=122" "https://my-swarm-host/api/v4/reviews/"</programlisting>
<simpara>Swarm responds with the new review entity:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "review": {
    "id": 123,
    "author": "bruno",
    "changes": [122],
    "commits": [],
    "commitStatus": [],
    "created": 1399325913,
    "deployDetails": [],
    "deployStatus": null,
    "description": "Adding .jar that should have been included in r110\n",
    "groups": [],
    "participants": {
      "bruno": []
    },
    "pending": true,
    "projects": [],
    "state": "needsReview",
    "stateLabel": "Needs Review",
    "testDetails": [],
    "testStatus": null,
    "type": "default",
    "updated": 1399325913,
    "versions": []
  }
}</programlisting>
</section>
</section>
<section xml:id="api.endpoints.Reviews.addChange">
<title>POST /api/v4/reviews/{id}/changes/</title>
<simpara role="summary">Summary: Add Change to Review</simpara>
<section xml:id="api.endpoints.Reviews.addChange.notes">
<title>Description</title>
<simpara>Links the given change to the review and schedules an update.</simpara>
</section>
<section xml:id="api.endpoints.Reviews.addChange.parameters">
<title>Parameters</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="5">
<colspec colname="col_1" colwidth="12.5*"/>
<colspec colname="col_2" colwidth="50*"/>
<colspec colname="col_3" colwidth="12.5*"/>
<colspec colname="col_4" colwidth="12.5*"/>
<colspec colname="col_5" colwidth="12.5*"/>
<thead>
<row>
<entry align="left" valign="top">Parameter</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Parameter Type</entry>
<entry align="left" valign="top">Required</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>id</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Review ID</simpara></entry>
<entry align="left" valign="top"><simpara>integer</simpara></entry>
<entry align="left" valign="top"><simpara>path</simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>change</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Change ID</simpara></entry>
<entry align="left" valign="top"><simpara>integer</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="api.endpoints.Reviews.addChange.successExamples">
<title>Successful Response contains Review Entity:</title>
<programlisting language="json" linenumbering="unnumbered">HTTP/1.1 200 OK

{
  "review": {
    "id": 12204,
    "author": "bruno",
    "changes": [10667, 12000],
    "commits": [10667, 12000],
    "commitStatus": [],
    "created": 1399325913,
    "deployDetails": [],
    "deployStatus": null,
    "description": "Adding .jar that should have been included in r10145\n",
    "participants": {
      "bruno": []
    },
    "pending": false,
    "projects": [],
    "state": "archived",
    "stateLabel": "Archived",
    "testDetails": [],
    "testStatus": null,
    "type": "default",
    "updated": 1399325913
  }
}</programlisting>
</section>
<section xml:id="api.endpoints.Reviews.addChange.usageExamples">
<title>Adding a change to a review</title>
<simpara>You may want to update a review from a shelved or committed change that is different from the initiating
change. This is done by adding a change to the review.</simpara>
<simpara>To add a change:</simpara>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" -d "change=124" "https://my-swarm-host/api/v4/reviews/123/changes/"</programlisting>
<simpara>Swarm responds with the updated review entity:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "review": {
    "id": 123,
    "author": "bruno",
    "changes": [122, 124],
    "commits": [],
    "commitStatus": [],
    "created": 1399325913,
    "deployDetails": [],
    "deployStatus": null,
    "description": "Adding .jar that should have been included in r110\n",
    "groups": [],
    "participants": {
      "bruno": []
    },
    "pending": true,
    "projects": [],
    "state": "needsReview",
    "stateLabel": "Needs Review",
    "testDetails": [],
    "testStatus": null,
    "type": "default",
    "updated": 1399325913,
    "versions": [
      {
        "difference": 1,
        "stream": null,
        "change": 124,
        "user": "bruno",
        "time": 1399330003,
        "pending": true,
        "archiveChange": 124,
      }
    ]
  }
}</programlisting>
</section>
</section>
<section xml:id="api.endpoints.Reviews.state">
<title>PATCH /api/v4/reviews/{id}/state/</title>
<simpara role="summary">Summary: Transition the Review State (v2+)</simpara>
<section xml:id="api.endpoints.Reviews.state.notes">
<title>Description</title>
<simpara>Transition the review to a new state. When transitioning to approved, you can optionally commit the review. (v2+)</simpara>
</section>
<section xml:id="api.endpoints.Reviews.state.parameters">
<title>Parameters</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="5">
<colspec colname="col_1" colwidth="12.5*"/>
<colspec colname="col_2" colwidth="50*"/>
<colspec colname="col_3" colwidth="12.5*"/>
<colspec colname="col_4" colwidth="12.5*"/>
<colspec colname="col_5" colwidth="12.5*"/>
<thead>
<row>
<entry align="left" valign="top">Parameter</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Parameter Type</entry>
<entry align="left" valign="top">Required</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>id</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Review ID</simpara></entry>
<entry align="left" valign="top"><simpara>integer</simpara></entry>
<entry align="left" valign="top"><simpara>path</simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>state</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Review State. Valid options: needsReview, needsRevision, approved, archived, rejected</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>description</literal></simpara></entry>
<entry align="left" valign="top"><simpara>An optional description that is posted as a comment for non-commit transitions. Commits that do not include a description default to using the Review description in the resulting change description.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>commit</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Set this flag to true and provide a state of <literal>approved</literal> in order to trigger the <emphasis role="strong">Approve and Commit</emphasis> action in Swarm.</simpara></entry>
<entry align="left" valign="top"><simpara>boolean</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>wait</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Instruct Swarm to wait for a commit to finish before returning.</simpara></entry>
<entry align="left" valign="top"><simpara>boolean</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>jobs[]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>When performing an 'Approve and Commit', one or more jobs can be attached to the review as part of the commit process.</simpara></entry>
<entry align="left" valign="top"><simpara>stringArray</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>fixStatus</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Provide a fix status for the attached job(s) when performing an 'Approve and Commit'. Possible status values vary by job specification, but often include: open, suspended, closed, review, fixed.</simpara></entry>
<entry align="left" valign="top"><simpara>string</simpara></entry>
<entry align="left" valign="top"><simpara>form</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="api.endpoints.Reviews.state.successExamples">
<title>Examples of successful responses</title>
<bridgehead xml:id="_successful_response_contains_review_entity" renderas="sect4">Successful Response contains Review Entity:</bridgehead>
<programlisting language="json" linenumbering="unnumbered">HTTP/1.1 200 OK

{
  "review": {
    "id": 12204,
    "author": "bruno",
    "changes": [10667, 12000],
    "commits": [],
    "commitStatus": [],
    "created": 1399325913,
    "deployDetails": [],
    "deployStatus": null,
    "description": "Adding .jar that should have been included in r10145\n",
    "participants": {
      "bruno": []
    },
    "pending": false,
    "projects": [],
    "state": "needsRevision",
    "stateLabel": "Needs Revision",
    "testDetails": [],
    "testStatus": null,
    "type": "default",
    "updated": 1399325913
  },
  "transitions": {
    "needsReview": "Needs Review",
    "approved": "Approve",
    "rejected": "Reject",
    "archived": "Archive"
  }
}</programlisting>
<bridgehead xml:id="_successful_commit_contains_review_and_commit_entities" renderas="sect4">Successful Commit contains Review and Commit Entities:</bridgehead>
<programlisting language="json" linenumbering="unnumbered">HTTP/1.1 200 OK

{
  "review": {
    "id": 12204,
    "author": "bruno",
    "changes": [10667, 12000, 12006],
    "commits": [12006],
    "commitStatus": {
      "start": 1399326910,
      "change": 12006,
      "status": "Committed",
      "committer": "bruno",
      "end": 1399326911
    },
    "created": 1399325900,
    "deployDetails": [],
    "deployStatus": null,
    "description": "Adding .jar that should have been included in r10145\n",
    "participants": {
      "bruno": []
    },
    "pending": false,
    "projects": [],
    "state": "needsRevision",
    "stateLabel": "Needs Revision",
    "testDetails": [],
    "testStatus": null,
    "type": "default",
    "updated": 1399325905
  },
  "transitions": {
    "needsReview": "Needs Review",
    "needsRevision": "Needs Revision",
    "rejected": "Reject",
    "archived": "Archive"
  },
  "commit": 12006
}</programlisting>
</section>
<section xml:id="api.endpoints.Reviews.state.usageExamples">
<title>Committing a review</title>
<simpara>To commit a review:</simpara>
<programlisting language="bash" linenumbering="unnumbered">curl -u "username:password" -X PATCH -d "state=approved" -d "commit=1" \
     "https://my-swarm-host/api/v4/reviews/123/state/"</programlisting>
<simpara>Swarm responds with the updated review entity, as well as a list of possible transitions for the review:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "review": {
    "id": 123,
    "author": "bruno",
    "changes": [122, 124],
    "commits": [124],
    "commitStatus": {
        "start": 1399326910,
        "change": 124,
        "status": "Committed",
        "committer": "bruno",
        "end": 1399326911
      },
    "created": 1399325913,
    "deployDetails": [],
    "deployStatus": null,
    "description": "Adding .jar that should have been included in r110\n",
    "groups": [],
    "participants": {
      "bruno": []
    },
    "pending": false,
    "projects": [],
    "state": "approved",
    "stateLabel": "Approved",
    "testDetails": [],
    "testStatus": null,
    "type": "default",
    "updated": 1399325913,
    "versions": []
  },
    "transitions": {
      "needsReview": "Needs Review",
      "approved": "Approve",
      "rejected": "Reject",
      "archived": "Archive"
    }
}</programlisting>
</section>
</section>
</section>
</section>
<section xml:id="api.example">
<title>Extended API example</title>
<simpara>This section includes an extended API example, involving multiple API calls to
answer a more complicated kind of question than any single API endpoint can
provide: which reviews does a specific userid need to attend to?</simpara>
<section xml:id="api.example.code">
<title>The code</title>
<programlisting language="php" linenumbering="unnumbered">&lt;?php
/**
 * vim:set ai si et ts=4 sw=4 syntax=php:
 *
 * reviews.php
 *
 * Queries the Swarm API and reports which reviews a specified user
 * needs to attend to.
 *
 * Required attention is determined by the following criteria:
 * - the user is a participant in a review
 * - and the user has not voted on the review
 * - and the user has not commented on the review
 * - or the user's comment on the review is a
 *   task that has been addressed and needs verification
 */

if (ini_set('track_errors', 1) === false) {
    echo "Warning: unable to track errors.\n";
}

# process command-line arguments
$options = getopt(
    'hs:r:v',
    array('help', 'swarm:', 'reviewer', 'verbose')
);

$swarm = '';
if (isset($options['s'])) {
    $swarm = $options['s'];
}
if (isset($options['swarm'])) {
    $swarm = $options['swarm'];
}
if (!$swarm) {
    usage('Swarm API URL not provided.');
}

$reviewer = '';
if (isset($options['r'])) {
    $reviewer = $options['r'];
}
if (isset($options['reviewer'])) {
    $reviewer = $options['reviewer'];
}
if (!$reviewer) {
    usage('Swarm reviewer not provided.');
}

$verbose = false;
if (isset($options['v']) || isset($options['verbose'])) {
    $verbose = true;
}

if (isset($options['h']) || isset($options['help'])) {
    usage();
}

function usage($message = null)
{
    if ($message) {
        echo "$message\n\n";
    }

    $script = basename(__FILE__);
    echo &lt;&lt;&lt;EOU
$script: -s &lt;Swarm URL&gt; -u &lt;API userid&gt; -p &lt;API user's password&gt; \
  -r &lt;reviewer userid to report on&gt; -h

-s|--swarm     Swarm's URL (e.g. https://user@password:myswarm.url/)
-r|--reviewer  The reviewer to report on.
-h|--help      This help text.
-v|--verbose   Verbose output.

This script queries the Swarm API and reports on reviews that the
specified user needs to attend to.

Note: If your Helix Versioning Engine (p4d) has security level 3 set, you
cannot use a password to authenticate; you must acquire a host-unlocked
ticket from p4d, and use the ticket in place of a password when
communicating with the Swarm API connected to p4d.

EOU;
    exit;
}

function msg($message)
{
    global $verbose;

    if ($verbose) {
        echo $message;
    }
}

function call_api($url, $params)
{
    global $php_errormsg;

    $query    = http_build_query($params);
    $request  = $url . '?' . $query;
    $response = @file_get_contents($request);
    if ($php_errormsg) {
        echo "Unable to call api: $php_errormsg\n";
        exit;
    }

    $json = @json_decode($response, true);
    if ($php_errormsg) {
        echo "Unable to decode api response: $php_errormsg\n";
        exit;
    }

    return $json;
}

# remove trailing / from URL, if it exists
$swarm = rtrim(trim($swarm), '/');

# fetch the list of reviews
$reviews = call_api(
    "$swarm/api/v4/reviews",
    array(
        'hasReviewers' =&gt; 1, # only reviews with participants
        'participants' =&gt; array($reviewer), # only review for this reviewer
        'max'          =&gt; 9, # get plenty of reviews, if available
        'fields'       =&gt; array('id', 'description', 'commits'), # get these fields
    )
);

$report = array();
foreach ($reviews['reviews'] as $review) {
    if (is_null($review)) {
        continue;
    }

    $flag = false;
    msg('Review: ' . $review['id'] . ' ');

    # if the review is already committed, it likely does not need attention
    if (array_key_exists('commits', $review)
        &amp;&amp; count($review['commits'])
    ) {
        msg("is committed, skipping...\n");
        continue;
    }

    # if the review has a vote from the reviewer, they are already aware
    if (array_key_exists('participants', $review)
        &amp;&amp; array_key_exists('vote', $review['participants'][$reviewer])
    ) {
        msg("has vote from reviewer, skipping...\n");
        continue;
    }

    # if there are no open comments on the review, the reviewer's
    # attention is required
    if (array_key_exists('comments', $review)
        &amp;&amp; $review['comments'][0] == 0
    ) {
        msg("has no open comments, skipping...\n");
        continue;
    }

    # fetch the comments for this review
    $comments = call_api(
        "$swarm/api/v4/comments",
        array(
            'topic' =&gt; 'reviews/' . $review['id'], # comments for this review
            'max'   =&gt; 9, # get plenty of comments, if available
        )
    );

    foreach ($comments['comments'] as $comment) {
        msg("\n  Comment: " . $comment['id'] . ' ');

        // skip over comments from other reviewers
        if (array_key_exists('user', $comment) &amp;&amp; $reviewer != $comment['user']) {
            msg("is by another user, carry on...\n");
            continue;
        }

        # skip archived comments
        if (array_key_exists('flags', $comment)
            &amp;&amp; count($comment['flags']) &gt; 0
            &amp;&amp; $comment['flags'][0] == 'closed'
        ) {
            msg("is archived, carry on...\n");
            continue;
        }

        # skip marked tasks
        if (array_key_exists('taskState', $comment)
            &amp;&amp; ($comment['taskState'] == 'comment'
                || $comment['taskState'] == 'verified'
                || $comment['taskState'] == 'open'
            )
        ) {
            msg("reviewer's comment needs attention, carry on...\n");
            continue;
        }

        // anything else means that the reviewer's comment needs attention
        // by the reviewer
        $flag = true;
        msg("needs attention!\n");
        break;
    }

    // evaluation is complete. Does this review need attention?
    if ($flag) {
        $report[] = $review;
    }
}

if (count($report)) {
    echo "User '$reviewer' needs to attend to these reviews:\n";
    foreach ($report as $review) {
        $description = trim($review['description']);
        if (strlen($description) &gt; 60) {
            $description = substr($description, 0, 60) . ' ...';
        }
        echo $review['id'] . ": $description\n";
    }
} else {
    echo "User '$reviewer' has no reviews to attend to.\n";
}</programlisting>
</section>
<section xml:id="api.example.execution">
<title>Executing the example</title>
<simpara>The example is written in PHP. To use it, <link xlink:href="code/reviews.php">download the code</link>,
or copy and paste it into a file called <literal>reviews.php</literal>. Then, execute it like this:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ <emphasis role="strong">php reviews.php -s <emphasis>https://myswarm.host:port/</emphasis> -r <emphasis>bob</emphasis></emphasis></programlisting>
<simpara>Replace <literal><emphasis>http://myswarm.host/</emphasis></literal> with the URL to your Swarm installation.
Replace <literal><emphasis>bob</emphasis></literal> with the userid you’d like to report on.</simpara>
<simpara>To authenticate, insert <literal>username:password@</literal> before the hostname. If your Helix
Versioning Engine’s security counter is set to <literal>3</literal> or higher, you need to
acquire a ticket and use the ticket in place of the password (see
<xref linkend="api.authentication"/> for details). If your Swarm is installed on a
<link linkend="setup.post.port">custom port</link>, or is installed in a
<link linkend="setup.post.subfolder">sub-folder</link>, include those elements in the URL as well.
For example:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ <emphasis role="strong">php reviews.php -s https://me:F0FC33068BA244B1BBD8196CC9166F34@my.host:8080/swarm/ -r <emphasis>bob</emphasis></emphasis></programlisting>
<simpara>If you do not specify the URL correctly, you might see an error like:</simpara>
<screen>Unable to call api: file_get_contents(http://...@my.host:8080/swarm/api/v4/reviews?hasReviewers=1&amp;participants%5B0%5D=bob&amp;max=9&amp;fields%5B0%5D=id&amp;fields%5B1%5D=description&amp;fields%5B2%5D=commits): failed to open stream: HTTP request failed! HTTP/1.1 404 Not Found</screen>
<simpara>If there are no errors, and the specified userid does have reviews to attend to,
the output might look like:</simpara>
<screen>1234: Added grapple-grommit support to woozlewobble class. @bob sh ...</screen>
<simpara><literal>1234</literal> is the id of a review that <literal>bob</literal> should attend to, followed by the first
60 characters of the review’s description.</simpara>
</section>
</section>

</chapter>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><appendix version="5.0" xml:id="contact" xml:base="contact.xml">
  <title>Contact Perforce</title>

  <para>
    We look forward to hearing about your experiences with Swarm, positive
    or negative, including <emphasis>must-haves</emphasis> or <emphasis>it
    would be great if Swarm...</emphasis>. Feel free to contact us:
  </para>

  <orderedlist>
    <listitem>
      <para>
        <emphasis role="bold">Post a message on our
        <link xlink:href="http://forums.perforce.com/index.php?/forum/29-swarm/">public
        forums</link></emphasis>.
      </para>

      <para>
        The forums are a great way to discuss Swarm with other Swarm users and
        the Swarm development team.
      </para>
    </listitem>


    <listitem>
      <para>
        <emphasis role="bold">Email
        <link xlink:href="mailto:support@perforce.com?subject=Swarm">support@perforce.com</link>
        and reference "Swarm" in the subject line.</emphasis>
      </para>

      <para>
        Email is preferable when you need direct assistance.
      </para>
    </listitem>

    <listitem>
      <para>
        <emphasis role="bold">Phone us and ask for assistance with
        Swarm</emphasis>.
      </para>

      <para>
        When you need immediate assistance, calling us is the quickest way to
        resolve a Swarm problem. We have international offices; call the office
        closest to you:
      </para>

      <itemizedlist>
        <listitem>
          <para>
            North America: <link xlink:href="tel:15108647400">+1 510.864.7400</link>
          </para>
        </listitem>

        <listitem>
          <para>
            Europe: <link xlink:href="tel:4401189771020">+44 (0) 1189 771020</link>
          </para>
        </listitem>

        <listitem>
          <para>
            Australia: <link xlink:href="tel:61289124600">+61 2 8912-4600</link>
          </para>
        </listitem>
      </itemizedlist>
    </listitem>
  </orderedlist>

  <para>
    Complete contact information is available on the
    <link xlink:href="https://www.perforce.com/company/contact-us">Perforce web
    site</link>. 
  </para>
</appendix>
  <!-- vim: set ts=2 sw=2 tw=80 ai si: --><glossary xml:id="glossary" version="5.0" xml:base="glossary.xml">
  <title>Glossary</title>

  <glossdiv xml:id="glossary.A">
    <title>A</title>

    <glossentry xml:id="APC">
      <glossterm>APC</glossterm>
      <acronym>APC</acronym>
      <glossdef>
        <para>
          APC is the Alternative PHP Cache, a free, open, and robust framework
          for caching and optimizing PHP intermediate code.
        </para>
      </glossdef>
    </glossentry>
  </glossdiv>

  <glossdiv xml:id="glossary.B">
    <title>B</title>

    <glossentry xml:id="BCC">
      <glossterm>BCC</glossterm>
      <acronym>BCC</acronym>
      <glossdef>
        <para>
          <emphasis>Blind carbon copy</emphasis>, a feature of email, allows the
          sender of a message to conceal the person entered in the
          <literal>Bcc:</literal> field from all other recipients.
        </para>
      </glossdef>
    </glossentry>

    <glossentry xml:id="BMP">
      <glossterm>BMP</glossterm>
      <acronym>BMP</acronym>
      <glossdef>
        <para>
          <link xlink:href="https://en.wikipedia.org/wiki/BMP_file_format">Bitmap</link>,
          a graphics file format, commonly with the filename extension
          <filename>.bmp</filename>.
        </para>
      </glossdef>
    </glossentry>
    
    <glossentry xml:id="branch">
      <glossterm>Branch</glossterm>
      <glossdef>
        <para>
          A branch in Perforce is a set of related files that exist at a
          specific location in the Perforce depot as a result of being copied to
          that location, as opposed to being added at that location.
        </para>
      </glossdef>
    </glossentry>
  </glossdiv>

  <glossdiv xml:id="glossary.C">
    <title>C</title>

    <glossentry xml:id="Changelist">
      <glossterm>Changelist</glossterm>
      <glossdef>
        <para>
          A changelist is a list of files, their version numbers, the changes
          made to the files, and a description of the changes made. A
          changelist is the basic unit of versioned work in a Helix Versioning
          Engine.
        </para>
      </glossdef>
    </glossentry>

    <glossentry xml:id="Code_Review">
      <glossterm>Code Review</glossterm>
      <glossdef>
        <para>
          A code review in Swarm is a process in which other developers can
          see your code, provide feedback, and approve or reject your changes.
        </para>
      </glossdef>
    </glossentry>

    <glossentry xml:id="Comment">
      <glossterm>Comment</glossterm>
      <glossdef>
        <para>
          A comment in Swarm is feedback provided on a changelist or a file within
          a change.
        </para>
      </glossdef>
    </glossentry>

    <glossentry xml:id="CSRF">
      <glossterm>CSRF</glossterm>
      <glossdef>
        <para>
          <link xlink:href="https://en.wikipedia.org/wiki/Cross-site_request_forgery">Cross-Site
          Request Forgery</link>, a form of web-based attack that exploits the
          trust that a site has in a user's web browser.
        </para>
      </glossdef>
    </glossentry>
  </glossdiv>

  <glossdiv xml:id="glossary.D">
    <title>D</title>

    <glossentry xml:id="Debian">
      <glossterm>Debian</glossterm>
      <glossdef>
        <para>
          Debian GNU/Linux is a distribution of the Linux operation system
          produced by the <link xlink:href="https://www.debian.org/">Debian
          Project</link>.
        </para>
        
        <para>
          Debian is also the casual name of the software packaging system used
          by the Debian GNU/Linux, and its
          <link xlink:href="https://www.debian.org/misc/children-distros">variants</link>
          such as <link xlink:href="https://www.ubuntu.com/">Ubuntu Linux</link>.
        </para>
      </glossdef>
    </glossentry>

    <glossentry xml:id="Depot">
      <glossterm>Depot</glossterm>
      <glossdef>
        <para>
          A depot is a top-level unit of storage for versioned files within a
          Perforce server.
        </para>
      </glossdef>
    </glossentry>
  </glossdiv>

  <glossdiv xml:id="glossary.E">
    <title>E</title>

    <glossentry xml:id="Emoji">
      <glossterm>Emoji</glossterm>
      <glossdef>
        <para>
          <link xlink:href="https://en.wikipedia.org/wiki/Emoji">Emoji</link> is a
          Japanese term for ideograms, emoticons, or
          <emphasis>smileys</emphasis> that can be used to express emotions in
          electronic messages. See the
          <link xlink:href="http://www.emoji-cheat-sheet.com/">Emoji Cheat Sheet</link>
          for Emoji common to many web applications.
        </para>
      </glossdef>
    </glossentry>

    <glossentry xml:id="Emoticon">
      <glossterm>Emoticon</glossterm>
      <glossdef>
        <para>
          A pictorial representation an author's facial expression (or other
          symbology) indicating the mood or temper of a portion of text.
          These include *smileys*, such as :-), to indicate happiness, humor,
          disapproval, etc.
        </para>

        <tip>
          <para>
            For more information, see
            <link xlink:href="https://en.wikipedia.org/wiki/Emoticon">Wikipedia</link>.
          </para>
        </tip>
      </glossdef>
    </glossentry>

    <glossentry xml:id="EPS">
      <glossterm>EPS</glossterm>
      <acronym>EPS</acronym>
      <glossdef>
        <para>
          <link xlink:href="https://en.wikipedia.org/wiki/Encapsulated_PostScript">Encapsulated
          PostScript</link>, a graphics file format, commonly with the filename
          extension <filename>.eps</filename>.
        </para>
      </glossdef>
    </glossentry>
  </glossdiv>

  <glossdiv xml:id="glossary.G">
    <title>G</title>

    <glossentry xml:id="GF">
      <glossterm>Git Fusion</glossterm>
      <acronym>GF</acronym>
      <glossdef>
        <para>
          <link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/git-fusion/index.html">Git
          Fusion</link> integrates Git with Perforce, offering enterprise-ready
          Git repository management, and workflows that allow Git and Perforce
          users to collaborate on the same projects using their preferred tools.
        </para>
      </glossdef>
    </glossentry>

    <glossentry xml:id="Groups">
      <glossterm>Groups</glossterm>
      <glossdef>
        <para>
          <link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4sag/chapter.security.html#protections.groups">Groups</link>
          is a feature of the Helix Versioning Engine that makes it easier to
          manage permissions for users.
        </para>
      </glossdef>
    </glossentry>
  </glossdiv>

  <glossdiv xml:id="glossary.H">
    <title>H</title>

    <glossentry xml:id="HTTP">
      <glossterm>HTTP</glossterm>
      <glossdef>
        <para>
          <link xlink:href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol">Hypertext
          Transfer Protocol</link>, the communication protocol used to transfer
          or exchange hypertext, i.e. web pages.
        </para>
      </glossdef>
    </glossentry>
  </glossdiv>

  <glossdiv xml:id="glossary.I">
    <title>I</title>

    <glossentry xml:id="iconv">
      <glossterm>iconv</glossterm>
      <glossdef>
        <para>
          <link xlink:href="https://secure.php.net/manual/en/book.iconv.php">iconv</link>
          is a PHP extension that performs character set conversion, and is an
          interface to the
          <link xlink:href="https://www.gnu.org/software/libiconv/">GNU
          libiconv</link> library.
        </para>
      </glossdef>
    </glossentry>
  </glossdiv>

  <glossdiv xml:id="glossary.J">
    <title>J</title>

    <glossentry xml:id="job">
      <glossterm>Job</glossterm>
      <glossdef>
        <para>
          A job is a component of the Helix Versioning Engine's defect tracking
          system and describes work to be done, such as a bug fix or improvement
          request. Associating a job with a changelist records which changes
          fixed the reported problem or added the requested improvement.
        </para>
      </glossdef>
    </glossentry>

    <glossentry xml:id="Job_Daemon">
      <glossterm>Job Daemon</glossterm>
      <glossdef>
        <para>
          A job daemon is a program that checks the Helix Versioning Engine
          daily to determine if any jobs are open. If so, the daemon sends an
          email message to interested users, informing them the number of jobs
          in each category, the severity of each job, and more.
        </para>

        <tip>
          <para>
            For more information, see the chapter
            "<link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4sag/chapter.scripting.html">Using
            triggers to customize behavior</link>" in the
            <link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4sag/index.html">Helix
            Versioning Engine Administrator Guide: Fundamentals</link>.
          </para>
        </tip>
      </glossdef>
    </glossentry>

    <glossentry xml:id="jobspec">
      <glossterm>jobspec</glossterm>
      <glossdef>
        <para>
          A job specification is a template describing the fields and possible
          values for each job stored in the Helix Versioning Engine.
        </para>

        <tip>
          <para>
            For more information, see the chapter
            "<link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4sag/chapter.jobspecs.html">Customizing
            Perforce: Job Specifications</link>" in the
            <link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4sag/index.html">Helix
            Versioning Engine Administrator Guide: Fundamentals</link>.
          </para>
        </tip>
      </glossdef>
    </glossentry>
  </glossdiv>

  <glossdiv xml:id="glossary.M">
    <title>M</title>

    <glossentry xml:id="MPM">
      <glossterm>MPM</glossterm>
      <acronym>MPM</acronym>
      <glossdef>
        <para>
          An <link xlink:href="https://httpd.apache.org/docs/2.4/mpm.html">MPM</link>,
          or multi-processing module, is a component of the Apache web server
          that is responsible for binding to network ports, accepting requests,
          and dispatch operations to handle the request.
        </para>
      </glossdef>
    </glossentry>
  </glossdiv>

  <glossdiv xml:id="glossary.P">
    <title>P</title>

    <glossentry xml:id="P4PHP">
      <glossterm>P4PHP</glossterm>
      <acronym>P4PHP</acronym>
      <glossdef>
        <para>
          <link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4script/04_php.html">P4PHP</link>
          is the PHP interface to the Perforce API, which enables you to write
          PHP code that interacts with a Helix Versioning Engine.
        </para>
      </glossdef>
    </glossentry>

    <glossentry xml:id="PECL">
      <glossterm>PECL</glossterm>
      <acronym>PECL</acronym>
      <glossdef>
        <para>
          <link xlink:href="https://pecl.php.net/">PHP Extension Community Library</link>,
          a library of extensions that can be added to PHP to improve and
          extend its functionality.
        </para>
      </glossdef>
    </glossentry>

    <glossentry xml:id="Perforce">
      <glossterm>Perforce</glossterm>
      <glossdef>
        <para>
          <link xlink:href="https://www.perforce.com/">Perforce Software</link>,
          provider of enterprise versioning tools.
        </para>
      </glossdef>
    </glossentry>

    <glossentry xml:id="PHP">
      <glossterm>PHP</glossterm>
      <acronym>PHP</acronym>
      <glossdef>
        <para>
          <link xlink:href="https://secure.php.net/">PHP</link>, or PHP: Hypertext
          Pre-processor, is an HTML-embedded scripting language designed to
          allow web developers to write dynamically generated web pages
          quickly.
        </para>
      </glossdef>
    </glossentry>

    <glossentry xml:id="Project">
      <glossterm>Project</glossterm>
      <glossdef>
        <para>
          A project in Swarm is a group of Perforce users who are working
          together on a specific codebase, defined by one or more branches of
          code, along with options for a job filter, automated test
          integration, and automated deployment.
        </para>
      </glossdef>
    </glossentry>

    <glossentry xml:id="PSD">
      <glossterm>PSD</glossterm>
      <acronym>PSD</acronym>
      <glossdef>
        <para>
          <link xlink:href="https://en.wikipedia.org/wiki/Adobe_Photoshop#File_format">Photoshop
          Document</link>, a graphics file format, commonly with the filename
          extension <filename>.psd</filename>.
        </para>
      </glossdef>
    </glossentry>
  </glossdiv>

  <glossdiv xml:id="glossary.R">
    <title>R</title>

    <glossentry xml:id="Remote_Depot">
      <glossterm>Remote depot</glossterm>
      <glossdef>
        <para>
          A remote depot is a depot that acts like a pointer to a depot on a
          second Perforce server.
        </para>

        <tip>
          <para>
            For more information, see the chapter
            "<link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4sag/chapter.depots.html">Working
            with Depots</link>" in the 
            <link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4sag/index.html">Helix
            Versioning Engine Administrator Guide: Fundamentals</link>.
          </para>
        </tip>
      </glossdef>
    </glossentry>

    <glossentry xml:id="Review_Daemon">
      <glossterm>Review Daemon</glossterm>
      <glossdef>
        <para>
          A review daemon is a program that periodically checks the Helix
          Versioning Engine to determine if any changelists have been submitted.
          If so, the daemon sends an email message to users who have
          <emphasis>subscribed</emphasis> to any of the files included in those
          changelists, informing them of changes in files they are interested
          in.
        </para>

        <tip>
          <para>
            For more information, see the chapter
            "<link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4sag/chapter.scripting.html">Using
            triggers to customize behavior</link>" in the
            <link xlink:href="https://www.perforce.com/perforce/doc.current/manuals/p4sag/index.html">Helix
            Versioning Engine Administrator Guide: Fundamentals</link>.
          </para>
        </tip>
      </glossdef>
    </glossentry>

    <glossentry xml:id="RPM">
      <glossterm>RPM</glossterm>
      <glossdef>
        <para>
          <link xlink:href="">RPM Package Manager</link> is a tool, and package
          format, for managing the installation, updates, and removal of
          software packages for Linux distributions such as
          <link xlink:href="https://www.redhat.com/en/technologies/linux-platforms/enterprise-linux">Red Hat
          Enterprise Linux</link>,
          <link xlink:href="https://fedoraproject.org/">the Fedora Project</link>,
          and <link xlink:href="https://www.centos.org/">the CentOS Project</link>.
        </para>

      </glossdef>
    </glossentry>
  </glossdiv>

  <glossdiv xml:id="glossary.T">
    <title>T</title>

    <glossentry xml:id="TGA">
      <glossterm>TGA</glossterm>
      <acronym>TGA</acronym>
      <glossdef>
        <para>
          <link xlink:href="https://en.wikipedia.org/wiki/Truevision_TGA">Truevision
          Graphics Adapter</link>, a graphics file format, commonly with the
          filename extension <filename>.tga</filename>.
        </para>
      </glossdef>
    </glossentry>

    <glossentry xml:id="TIFF">
      <glossterm>TIFF</glossterm>
      <acronym>TIFF</acronym>
      <glossdef>
        <para>
          <link xlink:href="https://en.wikipedia.org/wiki/Tagged_Image_File_Format">Tagged
          Image File Format</link>, a graphics file format, commonly with the
          filename extension <filename>.tif</filename> or
          <filename>.tiff</filename>.
        </para>
      </glossdef>
    </glossentry>
  </glossdiv>

  <glossdiv xml:id="glossary.X">
    <title>X</title>

    <glossentry xml:id="XSS">
      <glossterm>XSS</glossterm>
      <glossdef>
        <para>
          <link xlink:href="https://en.wikipedia.org/wiki/Cross-site_scripting">Cross-Site
          Scripting</link>, a form of web-based attack that injects malicious
          code into a user's web browser.
        </para>
      </glossdef>
    </glossentry>
  </glossdiv>
</glossary>
</book>